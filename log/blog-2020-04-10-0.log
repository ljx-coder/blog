2020-04-10 00:03:25.182 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:03:25.202 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:03:25.203 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:03:25.207 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:03:25.272 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:16:48.396 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 50 ] - Starting BlogApplication on THINK-PC with PID 8628 (started by LIUJIAXU in D:\桌面\blog)
2020-04-10 00:16:48.403 [ restartedMain ] - [ DEBUG ] [ com.ljx.blog.BlogApplication : 53 ] - Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-10 00:16:48.404 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 652 ] - The following profiles are active: dev
2020-04-10 00:16:53.749 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-8082"]
2020-04-10 00:16:53.772 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2020-04-10 00:16:53.777 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-10 00:16:54.053 [ restartedMain ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring embedded WebApplicationContext
2020-04-10 00:16:54.067 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.config.DruidConfig : 45 ] - init Druid Servlet Configuration 
2020-04-10 00:16:55.053 [ restartedMain ] - [ INFO  ] [ org.hibernate.jpa.internal.util.LogHelper : 31 ] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-10 00:16:55.185 [ restartedMain ] - [ INFO  ] [ org.hibernate.Version : 46 ] - HHH000412: Hibernate Core {5.3.15.Final}
2020-04-10 00:16:55.187 [ restartedMain ] - [ INFO  ] [ org.hibernate.cfg.Environment : 213 ] - HHH000206: hibernate.properties not found
2020-04-10 00:16:55.521 [ restartedMain ] - [ INFO  ] [ org.hibernate.annotations.common.Version : 49 ] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-10 00:16:56.204 [ restartedMain ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 928 ] - {dataSource-1} inited
2020-04-10 00:16:56.244 [ restartedMain ] - [ INFO  ] [ org.hibernate.dialect.Dialect : 157 ] - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-10 00:16:59.882 [ restartedMain ] - [ INFO  ] [ o.h.hql.internal.QueryTranslatorFactoryInitiator : 47 ] - HHH000397: Using ASTQueryTranslatorFactory
2020-04-10 00:17:02.984 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-8082"]
2020-04-10 00:17:03.051 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 59 ] - Started BlogApplication in 15.876 seconds (JVM running for 16.779)
2020-04-10 00:17:03.225 [ http-nio-8082-exec-1 ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-10 00:17:03.395 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin
2020-04-10 00:17:03.398 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:17:03.401 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.loginPage
2020-04-10 00:17:03.401 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[]
2020-04-10 00:17:03.414 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/login
2020-04-10 00:17:09.215 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/login
2020-04-10 00:17:09.216 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:17:09.216 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.login
2020-04-10 00:17:09.217 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[liujiaxu, ljx123, org.apache.catalina.session.StandardSessionFacade@1ca3511, {}]
2020-04-10 00:17:09.452 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/index
2020-04-10 00:17:11.564 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:17:11.564 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:17:11.565 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:17:11.566 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:17:11.751 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:17:17.961 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/9/input
2020-04-10 00:17:17.963 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:17:17.964 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 00:17:17.965 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[9, {}]
2020-04-10 00:17:18.042 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 00:17:22.606 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:17:22.607 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 00:17:22.608 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 00:17:22.612 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot静态资源访问和拦截器处理, content=## 一、SpringBoot静态资源访问

### 1、webapp目录下的资源文件
在创建spring boot工程中，默认是没有创建webapp目录的，如果要把静态资源放在webapp目录下，***需要手动在src/main/目录下创建一个webapp目录，然后把静态资源放在该目录下就可以，此时从浏览器中是可以直接访问到spring boot工程中的这些资源的***。 

默认状态下 ***用户不具备src/main/webapp/WEB-INF直接访问权限***，但是可以通过程序中forward、redirect达到间接访问的目的，所以war项目中通常会将需要控制权限的资源文件放入到WEB-INF中

### 2、SpringBoot默认的静态资源目录
springboot默认的静态资源目录，只需要把静态资源放在默认目录下，浏览器就可以直接访问到。
默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类，下面是源码 优先级顺序一致

```java
private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
            "classpath:/META-INF/resources/", "classpath:/resources/",
            "classpath:/static/", "classpath:/public/" };
```
![](https://img-blog.csdn.net/20180715134225155?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)***配置应用首页***

**1、欢迎页即应用首页，默认映射静态资源文件夹下的所有index.html 页面作为首页。**

**2、“localhost:8080/应用上下文路径 ” 此时默认找 index.html 页面**


***特别提醒：***
> *1）**默认静态资源目录下的资源，浏览器都可以直接访问，其中默认以 index.html 为应用首页**
 2）**应用首页 index.html 也可以放在 templates 目录下，浏览器输入 "http://ip:port/应用上下文" 同样可以进入***
3） ***templates 为模板目录，其中的文件（如 *.html）从浏览器是无法直接访问的（index.html除外），相当于以前的 WEB-INF目录下的文件无法直接访问一样，必须通过后台才能访问。***

###  2.1、在properties配置文件进行属性配置
静态资源如HTML文件、JS文件，Spring Boot配置有两项：

    spring.mvc.static-path-pattern  配置映射路径规则 默认值是/**
    spring.resources.static-locations 配置静态资源位置 默认值是 
   下面表示只有静态资源的访问路径为/resources/** 时，
   才会当作静态资源处理请求  **不要忘记加 /****
```java
spring.mvc.static-path-pattern=/resources/**  
```

###  2.2、静态资源的Bean配置(java配置方式)
Spring4.x(或Spring Boot 1.x)版本配置Web应用 直接继WebMvcConfigurerAdapter类

Spring5.x（或Spring Boot 2.x）版本来构建或者升级应用程序在配置WebMvc时，则会出现弃用警告

**WebMvcConfigurerAdapter的作用**
     WebMvcConfigurerAdapter 是一个实现了WebMvcConfigurer 接口的抽象类，并提供了全部方法的空实现，我们可以在其子类中覆盖这些方法，以实现我们自己的配置，如视图解析器，拦截器和跨域支持等...
     
[**WebMvcConfigurerAdapter类被弃用后的两种选择**](https://segmentfault.com/a/1190000018904390)
  
 - **直接实现WebMvcConfigure接口** 
 - **直接继承WebMvcConfigurationSupport类**
  
***自定义资源映射addResourceHandlers***
```java
@Configuration
public class MyWebMvcConfigurerAdapter extends WebMvcConfigurerAdapter {
    /**
     * 配置静态访问资源
     * @param registry
     */
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**")
                .addResourceLocations("classpath:/my/");
       
    }
}
```
如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：

```java
 public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**").addResourceLocations("file:E:/my/");
    }
```
    addResoureHandler指的是对外暴露的访问路径同 spring.mvc.static-path-pattern
    addResourceLocations指的是文件放置的目录同 spring.resources.static-locations

## 二、SpringBoot自定义拦截器

```java
@Configuration
public class MyWebConfiguration implements WebMvcConfigurer {
    /**
     * 配置自定义拦截器
     * @param registry
     */
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
       //匿名内部类实现，当然也可以自定义拦截器类实现handlerInterceptor
        HandlerInterceptor handlerInterceptor=new HandlerInterceptor() {
            @Override
           public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
              boolean flag =true;
              User user=(User)request.getSession().getAttribute("user");
              if(null==user){
                  response.sendRedirect("toLogin");
                  flag = false;
              }else{
                  flag = true;
             }
             return flag;
       }

            @Override
            public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

            }

            @Override
            public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

            }
        };
         //配置拦截器 拦截映射路径
        //addPathPatterns("/**")对所有请求都拦截，
        //excludePathPatterns 排除了/login登录请求的拦截
        //定义多个拦截器时,直接在registry.addInterceptor(new handlerInterceptor()) 同理addPathPatterns
        registry.addInterceptor(handlerInterceptor).addPathPatterns("/**").excludePathPatterns("/toLogin","/login");
        
    }
}

```


> 参考 
> [Springboot中静态资源和拦截器处理](https://www.cnblogs.com/java-synchronized/p/7091723.html)
> [Spring Boot 静态资源访问原理解析](https://www.cnblogs.com/hujunzheng/p/9682960.html)
[Spring MVC和springboot静态资源处理](https://blog.csdn.net/liuxiao723846/article/details/80494157)
[Spring Boot Web开发简介、静态资源映射规则、及 webajrs 导入与使用](https://blog.csdn.net/wangmx1993328/article/details/81051883), firstPicture=http://5b0988e595225.cdn.sohucs.com/images/20190102/d0864fde6ad14041bcb8ebb2f4b6da28.jpeg, flag=原创, views=null, appreciation=false, shareStatement=true, commentabled=false, published=false, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=springboot默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类), {}, org.apache.catalina.session.StandardSessionFacade@1ca3511]
2020-04-10 00:17:22.871 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 00:17:22.930 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:17:22.931 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 00:17:22.931 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:17:22.933 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:17:22.971 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:17:42.901 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:17:42.902 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:17:42.903 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:17:42.904 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:17:42.987 [ http-nio-8082-exec-9 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 00:17:43.018 [ http-nio-8082-exec-9 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 00:17:43.049 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:18:02.438 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 00:18:02.440 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:18:02.442 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 00:18:02.444 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 00:18:02.492 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 00:18:11.518 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/9
2020-04-10 00:18:11.520 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:18:11.522 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 00:18:11.529 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 9]
2020-04-10 00:18:11.549 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 00:18:14.244 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 00:18:14.246 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:18:14.248 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 00:18:14.251 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 00:18:14.276 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 00:18:17.565 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 00:18:17.565 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:18:17.566 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 00:18:17.567 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 00:18:17.588 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 00:18:20.198 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 00:18:20.199 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:18:20.200 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 00:18:20.200 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 00:18:20.221 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 00:18:22.897 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:18:22.898 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:18:22.899 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:18:22.900 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:18:22.944 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:19:01.812 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:19:01.813 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:19:01.816 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:19:01.820 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:19:01.855 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:19:04.543 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/9/input
2020-04-10 00:19:04.545 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:19:04.548 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 00:19:04.550 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[9, {}]
2020-04-10 00:19:04.578 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 00:19:06.719 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:19:06.721 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:19:06.723 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 00:19:06.724 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot静态资源访问和拦截器处理, content=## 一、SpringBoot静态资源访问

### 1、webapp目录下的资源文件
在创建spring boot工程中，默认是没有创建webapp目录的，如果要把静态资源放在webapp目录下，***需要手动在src/main/目录下创建一个webapp目录，然后把静态资源放在该目录下就可以，此时从浏览器中是可以直接访问到spring boot工程中的这些资源的***。 

默认状态下 ***用户不具备src/main/webapp/WEB-INF直接访问权限***，但是可以通过程序中forward、redirect达到间接访问的目的，所以war项目中通常会将需要控制权限的资源文件放入到WEB-INF中

### 2、SpringBoot默认的静态资源目录
springboot默认的静态资源目录，只需要把静态资源放在默认目录下，浏览器就可以直接访问到。
默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类，下面是源码 优先级顺序一致

```java
private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
            "classpath:/META-INF/resources/", "classpath:/resources/",
            "classpath:/static/", "classpath:/public/" };
```
![](https://img-blog.csdn.net/20180715134225155?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)***配置应用首页***

**1、欢迎页即应用首页，默认映射静态资源文件夹下的所有index.html 页面作为首页。**

**2、“localhost:8080/应用上下文路径 ” 此时默认找 index.html 页面**


***特别提醒：***
> *1）**默认静态资源目录下的资源，浏览器都可以直接访问，其中默认以 index.html 为应用首页**
 2）**应用首页 index.html 也可以放在 templates 目录下，浏览器输入 "http://ip:port/应用上下文" 同样可以进入***
3） ***templates 为模板目录，其中的文件（如 *.html）从浏览器是无法直接访问的（index.html除外），相当于以前的 WEB-INF目录下的文件无法直接访问一样，必须通过后台才能访问。***

###  2.1、在properties配置文件进行属性配置
静态资源如HTML文件、JS文件，Spring Boot配置有两项：

    spring.mvc.static-path-pattern  配置映射路径规则 默认值是/**
    spring.resources.static-locations 配置静态资源位置 默认值是 
   下面表示只有静态资源的访问路径为/resources/** 时，
   才会当作静态资源处理请求  **不要忘记加 /****
```java
spring.mvc.static-path-pattern=/resources/**  
```

###  2.2、静态资源的Bean配置(java配置方式)
Spring4.x(或Spring Boot 1.x)版本配置Web应用 直接继WebMvcConfigurerAdapter类

Spring5.x（或Spring Boot 2.x）版本来构建或者升级应用程序在配置WebMvc时，则会出现弃用警告

**WebMvcConfigurerAdapter的作用**
     WebMvcConfigurerAdapter 是一个实现了WebMvcConfigurer 接口的抽象类，并提供了全部方法的空实现，我们可以在其子类中覆盖这些方法，以实现我们自己的配置，如视图解析器，拦截器和跨域支持等...
     
[**WebMvcConfigurerAdapter类被弃用后的两种选择**](https://segmentfault.com/a/1190000018904390)
  
 - **直接实现WebMvcConfigure接口** 
 - **直接继承WebMvcConfigurationSupport类**
  
***自定义资源映射addResourceHandlers***
```java
@Configuration
public class MyWebMvcConfigurerAdapter extends WebMvcConfigurerAdapter {
    /**
     * 配置静态访问资源
     * @param registry
     */
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**")
                .addResourceLocations("classpath:/my/");
       
    }
}
```
如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：

```java
 public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**").addResourceLocations("file:E:/my/");
    }
```
    addResoureHandler指的是对外暴露的访问路径同 spring.mvc.static-path-pattern
    addResourceLocations指的是文件放置的目录同 spring.resources.static-locations

## 二、SpringBoot自定义拦截器

```java
@Configuration
public class MyWebConfiguration implements WebMvcConfigurer {
    /**
     * 配置自定义拦截器
     * @param registry
     */
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
       //匿名内部类实现，当然也可以自定义拦截器类实现handlerInterceptor
        HandlerInterceptor handlerInterceptor=new HandlerInterceptor() {
            @Override
           public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
              boolean flag =true;
              User user=(User)request.getSession().getAttribute("user");
              if(null==user){
                  response.sendRedirect("toLogin");
                  flag = false;
              }else{
                  flag = true;
             }
             return flag;
       }

            @Override
            public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

            }

            @Override
            public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

            }
        };
         //配置拦截器 拦截映射路径
        //addPathPatterns("/**")对所有请求都拦截，
        //excludePathPatterns 排除了/login登录请求的拦截
        //定义多个拦截器时,直接在registry.addInterceptor(new handlerInterceptor()) 同理addPathPatterns
        registry.addInterceptor(handlerInterceptor).addPathPatterns("/**").excludePathPatterns("/toLogin","/login");
        
    }
}

```


> 参考 
> [Springboot中静态资源和拦截器处理](https://www.cnblogs.com/java-synchronized/p/7091723.html)
> [Spring Boot 静态资源访问原理解析](https://www.cnblogs.com/hujunzheng/p/9682960.html)
[Spring MVC和springboot静态资源处理](https://blog.csdn.net/liuxiao723846/article/details/80494157)
[Spring Boot Web开发简介、静态资源映射规则、及 webajrs 导入与使用](https://blog.csdn.net/wangmx1993328/article/details/81051883), firstPicture=http://5b0988e595225.cdn.sohucs.com/images/20190102/d0864fde6ad14041bcb8ebb2f4b6da28.jpeg, flag=原创, views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=springboot默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类), {}, org.apache.catalina.session.StandardSessionFacade@1ca3511]
2020-04-10 00:19:06.756 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 00:19:06.777 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:19:06.777 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:19:06.778 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:19:06.780 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:19:06.809 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:19:10.048 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:19:10.050 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:19:10.051 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:19:10.052 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:19:10.100 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:22:13.577 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/about
2020-04-10 00:22:13.581 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:22:13.582 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.AboutShowController.about
2020-04-10 00:22:13.583 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[]
2020-04-10 00:22:13.616 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:about
2020-04-10 00:22:29.565 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:22:29.566 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:22:29.567 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:22:29.568 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:22:29.646 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:23:40.571 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:23:40.572 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:23:40.573 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:23:40.575 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:23:40.649 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:23:43.151 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/9/input
2020-04-10 00:23:43.153 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:23:43.155 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 00:23:43.159 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[9, {}]
2020-04-10 00:23:43.175 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 00:23:45.368 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:23:45.369 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:23:45.369 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 00:23:45.370 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot静态资源访问和拦截器处理, content=## 一、SpringBoot静态资源访问

### 1、webapp目录下的资源文件
在创建spring boot工程中，默认是没有创建webapp目录的，如果要把静态资源放在webapp目录下，***需要手动在src/main/目录下创建一个webapp目录，然后把静态资源放在该目录下就可以，此时从浏览器中是可以直接访问到spring boot工程中的这些资源的***。 

默认状态下 ***用户不具备src/main/webapp/WEB-INF直接访问权限***，但是可以通过程序中forward、redirect达到间接访问的目的，所以war项目中通常会将需要控制权限的资源文件放入到WEB-INF中

### 2、SpringBoot默认的静态资源目录
springboot默认的静态资源目录，只需要把静态资源放在默认目录下，浏览器就可以直接访问到。
默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类，下面是源码 优先级顺序一致

```java
private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
            "classpath:/META-INF/resources/", "classpath:/resources/",
            "classpath:/static/", "classpath:/public/" };
```
![](https://img-blog.csdn.net/20180715134225155?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)***配置应用首页***

**1、欢迎页即应用首页，默认映射静态资源文件夹下的所有index.html 页面作为首页。**

**2、“localhost:8080/应用上下文路径 ” 此时默认找 index.html 页面**


***特别提醒：***
> *1）**默认静态资源目录下的资源，浏览器都可以直接访问，其中默认以 index.html 为应用首页**
 2）**应用首页 index.html 也可以放在 templates 目录下，浏览器输入 "http://ip:port/应用上下文" 同样可以进入***
3） ***templates 为模板目录，其中的文件（如 *.html）从浏览器是无法直接访问的（index.html除外），相当于以前的 WEB-INF目录下的文件无法直接访问一样，必须通过后台才能访问。***

###  2.1、在properties配置文件进行属性配置
静态资源如HTML文件、JS文件，Spring Boot配置有两项：

    spring.mvc.static-path-pattern  配置映射路径规则 默认值是/**
    spring.resources.static-locations 配置静态资源位置 默认值是 
   下面表示只有静态资源的访问路径为/resources/** 时，
   才会当作静态资源处理请求  **不要忘记加 /****
```java
spring.mvc.static-path-pattern=/resources/**  
```

###  2.2、静态资源的Bean配置(java配置方式)
Spring4.x(或Spring Boot 1.x)版本配置Web应用 直接继WebMvcConfigurerAdapter类

Spring5.x（或Spring Boot 2.x）版本来构建或者升级应用程序在配置WebMvc时，则会出现弃用警告

**WebMvcConfigurerAdapter的作用**
     WebMvcConfigurerAdapter 是一个实现了WebMvcConfigurer 接口的抽象类，并提供了全部方法的空实现，我们可以在其子类中覆盖这些方法，以实现我们自己的配置，如视图解析器，拦截器和跨域支持等...
     
[**WebMvcConfigurerAdapter类被弃用后的两种选择**](https://segmentfault.com/a/1190000018904390)
  
 - **直接实现WebMvcConfigure接口** 
 - **直接继承WebMvcConfigurationSupport类**
  
***自定义资源映射addResourceHandlers***
```java
@Configuration
public class MyWebMvcConfigurerAdapter extends WebMvcConfigurerAdapter {
    /**
     * 配置静态访问资源
     * @param registry
     */
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**")
                .addResourceLocations("classpath:/my/");
       
    }
}
```
如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：

```java
 public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**").addResourceLocations("file:E:/my/");
    }
```
    addResoureHandler指的是对外暴露的访问路径同 spring.mvc.static-path-pattern
    addResourceLocations指的是文件放置的目录同 spring.resources.static-locations

## 二、SpringBoot自定义拦截器

```java
@Configuration
public class MyWebConfiguration implements WebMvcConfigurer {
    /**
     * 配置自定义拦截器
     * @param registry
     */
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
       //匿名内部类实现，当然也可以自定义拦截器类实现handlerInterceptor
        HandlerInterceptor handlerInterceptor=new HandlerInterceptor() {
            @Override
           public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
              boolean flag =true;
              User user=(User)request.getSession().getAttribute("user");
              if(null==user){
                  response.sendRedirect("toLogin");
                  flag = false;
              }else{
                  flag = true;
             }
             return flag;
       }

            @Override
            public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

            }

            @Override
            public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

            }
        };
         //配置拦截器 拦截映射路径
        //addPathPatterns("/**")对所有请求都拦截，
        //excludePathPatterns 排除了/login登录请求的拦截
        //定义多个拦截器时,直接在registry.addInterceptor(new handlerInterceptor()) 同理addPathPatterns
        registry.addInterceptor(handlerInterceptor).addPathPatterns("/**").excludePathPatterns("/toLogin","/login");
        
    }
}

```


> 参考 
> [Springboot中静态资源和拦截器处理](https://www.cnblogs.com/java-synchronized/p/7091723.html)
> [Spring Boot 静态资源访问原理解析](https://www.cnblogs.com/hujunzheng/p/9682960.html)
[Spring MVC和springboot静态资源处理](https://blog.csdn.net/liuxiao723846/article/details/80494157)
[Spring Boot Web开发简介、静态资源映射规则、及 webajrs 导入与使用](https://blog.csdn.net/wangmx1993328/article/details/81051883), firstPicture=http://5b0988e595225.cdn.sohucs.com/images/20190102/d0864fde6ad14041bcb8ebb2f4b6da28.jpeg, flag=原创, views=null, appreciation=false, shareStatement=true, commentabled=false, published=false, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=springboot默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类), {}, org.apache.catalina.session.StandardSessionFacade@1ca3511]
2020-04-10 00:23:45.398 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 00:23:45.414 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:23:45.415 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:23:45.415 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:23:45.416 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:23:45.436 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:23:47.312 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:23:47.313 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:23:47.314 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:23:47.314 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:23:47.355 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:24:09.711 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:24:09.712 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:24:09.712 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 00:24:09.713 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot静态资源访问和拦截器处理, content=## 一、SpringBoot静态资源访问

### 1、webapp目录下的资源文件
在创建spring boot工程中，默认是没有创建webapp目录的，如果要把静态资源放在webapp目录下，***需要手动在src/main/目录下创建一个webapp目录，然后把静态资源放在该目录下就可以，此时从浏览器中是可以直接访问到spring boot工程中的这些资源的***。 

默认状态下 ***用户不具备src/main/webapp/WEB-INF直接访问权限***，但是可以通过程序中forward、redirect达到间接访问的目的，所以war项目中通常会将需要控制权限的资源文件放入到WEB-INF中

### 2、SpringBoot默认的静态资源目录
springboot默认的静态资源目录，只需要把静态资源放在默认目录下，浏览器就可以直接访问到。
默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类，下面是源码 优先级顺序一致

```java
private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
            "classpath:/META-INF/resources/", "classpath:/resources/",
            "classpath:/static/", "classpath:/public/" };
```
![](https://img-blog.csdn.net/20180715134225155?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)***配置应用首页***

**1、欢迎页即应用首页，默认映射静态资源文件夹下的所有index.html 页面作为首页。**

**2、“localhost:8080/应用上下文路径 ” 此时默认找 index.html 页面**


***特别提醒：***
> *1）**默认静态资源目录下的资源，浏览器都可以直接访问，其中默认以 index.html 为应用首页**
 2）**应用首页 index.html 也可以放在 templates 目录下，浏览器输入 "http://ip:port/应用上下文" 同样可以进入***
3） ***templates 为模板目录，其中的文件（如 *.html）从浏览器是无法直接访问的（index.html除外），相当于以前的 WEB-INF目录下的文件无法直接访问一样，必须通过后台才能访问。***

###  2.1、在properties配置文件进行属性配置
静态资源如HTML文件、JS文件，Spring Boot配置有两项：

    spring.mvc.static-path-pattern  配置映射路径规则 默认值是/**
    spring.resources.static-locations 配置静态资源位置 默认值是 
   下面表示只有静态资源的访问路径为/resources/** 时，
   才会当作静态资源处理请求  **不要忘记加 /****
```java
spring.mvc.static-path-pattern=/resources/**  
```

###  2.2、静态资源的Bean配置(java配置方式)
Spring4.x(或Spring Boot 1.x)版本配置Web应用 直接继WebMvcConfigurerAdapter类

Spring5.x（或Spring Boot 2.x）版本来构建或者升级应用程序在配置WebMvc时，则会出现弃用警告

**WebMvcConfigurerAdapter的作用**
     WebMvcConfigurerAdapter 是一个实现了WebMvcConfigurer 接口的抽象类，并提供了全部方法的空实现，我们可以在其子类中覆盖这些方法，以实现我们自己的配置，如视图解析器，拦截器和跨域支持等...
     
[**WebMvcConfigurerAdapter类被弃用后的两种选择**](https://segmentfault.com/a/1190000018904390)
  
 - **直接实现WebMvcConfigure接口** 
 - **直接继承WebMvcConfigurationSupport类**
  
***自定义资源映射addResourceHandlers***
```java
@Configuration
public class MyWebMvcConfigurerAdapter extends WebMvcConfigurerAdapter {
    /**
     * 配置静态访问资源
     * @param registry
     */
    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**")
                .addResourceLocations("classpath:/my/");
       
    }
}
```
如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：

```java
 public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/my/**").addResourceLocations("file:E:/my/");
    }
```
    addResoureHandler指的是对外暴露的访问路径同 spring.mvc.static-path-pattern
    addResourceLocations指的是文件放置的目录同 spring.resources.static-locations

## 二、SpringBoot自定义拦截器

```java
@Configuration
public class MyWebConfiguration implements WebMvcConfigurer {
    /**
     * 配置自定义拦截器
     * @param registry
     */
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
       //匿名内部类实现，当然也可以自定义拦截器类实现handlerInterceptor
        HandlerInterceptor handlerInterceptor=new HandlerInterceptor() {
            @Override
           public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
              boolean flag =true;
              User user=(User)request.getSession().getAttribute("user");
              if(null==user){
                  response.sendRedirect("toLogin");
                  flag = false;
              }else{
                  flag = true;
             }
             return flag;
       }

            @Override
            public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

            }

            @Override
            public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

            }
        };
         //配置拦截器 拦截映射路径
        //addPathPatterns("/**")对所有请求都拦截，
        //excludePathPatterns 排除了/login登录请求的拦截
        //定义多个拦截器时,直接在registry.addInterceptor(new handlerInterceptor()) 同理addPathPatterns
        registry.addInterceptor(handlerInterceptor).addPathPatterns("/**").excludePathPatterns("/toLogin","/login");
        
    }
}

```


> 参考 
> [Springboot中静态资源和拦截器处理](https://www.cnblogs.com/java-synchronized/p/7091723.html)
> [Spring Boot 静态资源访问原理解析](https://www.cnblogs.com/hujunzheng/p/9682960.html)
[Spring MVC和springboot静态资源处理](https://blog.csdn.net/liuxiao723846/article/details/80494157)
[Spring Boot Web开发简介、静态资源映射规则、及 webajrs 导入与使用](https://blog.csdn.net/wangmx1993328/article/details/81051883), firstPicture=http://5b0988e595225.cdn.sohucs.com/images/20190102/d0864fde6ad14041bcb8ebb2f4b6da28.jpeg, flag=原创, views=null, appreciation=false, shareStatement=true, commentabled=false, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=springboot默认的静态资源目录配置在spring-boot-autoconfigurejar包下的org.springframework.boot.autoconfigure.web包下ResourceProperties类), {}, org.apache.catalina.session.StandardSessionFacade@1ca3511]
2020-04-10 00:24:09.742 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 00:24:09.754 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 00:24:09.755 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:24:09.756 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 00:24:09.756 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 00:24:09.767 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 00:24:11.193 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:24:11.197 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:24:11.198 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:24:11.200 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:24:11.239 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:37:58.030 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 50 ] - Starting BlogApplication on THINK-PC with PID 3504 (started by LIUJIAXU in D:\桌面\blog)
2020-04-10 00:37:58.037 [ restartedMain ] - [ DEBUG ] [ com.ljx.blog.BlogApplication : 53 ] - Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-10 00:37:58.037 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 652 ] - The following profiles are active: dev
2020-04-10 00:38:01.917 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-8082"]
2020-04-10 00:38:01.933 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2020-04-10 00:38:01.933 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-10 00:38:02.157 [ restartedMain ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring embedded WebApplicationContext
2020-04-10 00:38:02.161 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.config.DruidConfig : 45 ] - init Druid Servlet Configuration 
2020-04-10 00:38:02.793 [ restartedMain ] - [ INFO  ] [ org.hibernate.jpa.internal.util.LogHelper : 31 ] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-10 00:38:02.877 [ restartedMain ] - [ INFO  ] [ org.hibernate.Version : 46 ] - HHH000412: Hibernate Core {5.3.15.Final}
2020-04-10 00:38:02.877 [ restartedMain ] - [ INFO  ] [ org.hibernate.cfg.Environment : 213 ] - HHH000206: hibernate.properties not found
2020-04-10 00:38:03.073 [ restartedMain ] - [ INFO  ] [ org.hibernate.annotations.common.Version : 49 ] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-10 00:38:03.608 [ restartedMain ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 928 ] - {dataSource-1} inited
2020-04-10 00:38:03.616 [ restartedMain ] - [ INFO  ] [ org.hibernate.dialect.Dialect : 157 ] - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-10 00:38:05.936 [ restartedMain ] - [ INFO  ] [ o.h.hql.internal.QueryTranslatorFactoryInitiator : 47 ] - HHH000397: Using ASTQueryTranslatorFactory
2020-04-10 00:38:08.319 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-8082"]
2020-04-10 00:38:08.379 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 59 ] - Started BlogApplication in 11.314 seconds (JVM running for 14.064)
2020-04-10 00:38:15.995 [ http-nio-8082-exec-1 ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-10 00:38:16.199 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:38:16.199 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:38:16.211 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:38:16.211 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:38:16.627 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 00:38:16.671 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 00:38:16.715 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:40:42.433 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:40:42.433 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:40:42.433 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:40:42.433 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:40:42.521 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:41:25.709 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:41:25.709 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:41:25.709 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:41:25.709 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:41:25.771 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:41:46.926 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:41:46.926 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:41:46.926 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:41:46.926 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:41:46.986 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:42:33.860 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:42:33.864 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:42:33.864 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:42:33.864 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:42:33.920 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 00:43:08.568 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 00:43:08.572 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 00:43:08.572 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 00:43:08.572 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 00:43:08.620 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:09:48.349 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 50 ] - Starting BlogApplication on THINK-PC with PID 7672 (started by LIUJIAXU in D:\桌面\blog)
2020-04-10 12:09:48.349 [ restartedMain ] - [ DEBUG ] [ com.ljx.blog.BlogApplication : 53 ] - Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-10 12:09:48.349 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 652 ] - The following profiles are active: dev
2020-04-10 12:09:51.039 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-8082"]
2020-04-10 12:09:51.059 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2020-04-10 12:09:51.059 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-10 12:09:51.229 [ restartedMain ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring embedded WebApplicationContext
2020-04-10 12:09:51.239 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.config.DruidConfig : 45 ] - init Druid Servlet Configuration 
2020-04-10 12:09:51.739 [ restartedMain ] - [ INFO  ] [ org.hibernate.jpa.internal.util.LogHelper : 31 ] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-10 12:09:51.839 [ restartedMain ] - [ INFO  ] [ org.hibernate.Version : 46 ] - HHH000412: Hibernate Core {5.3.15.Final}
2020-04-10 12:09:51.849 [ restartedMain ] - [ INFO  ] [ org.hibernate.cfg.Environment : 213 ] - HHH000206: hibernate.properties not found
2020-04-10 12:09:52.079 [ restartedMain ] - [ INFO  ] [ org.hibernate.annotations.common.Version : 49 ] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-10 12:09:52.539 [ restartedMain ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 928 ] - {dataSource-1} inited
2020-04-10 12:09:52.559 [ restartedMain ] - [ INFO  ] [ org.hibernate.dialect.Dialect : 157 ] - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-10 12:09:54.469 [ restartedMain ] - [ INFO  ] [ o.h.hql.internal.QueryTranslatorFactoryInitiator : 47 ] - HHH000397: Using ASTQueryTranslatorFactory
2020-04-10 12:09:56.419 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-8082"]
2020-04-10 12:09:56.459 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 59 ] - Started BlogApplication in 8.95 seconds (JVM running for 11.22)
2020-04-10 12:13:49.544 [ http-nio-8082-exec-1 ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-10 12:13:49.624 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:13:49.624 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:13:49.624 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:13:49.624 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:13:49.834 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 12:13:49.854 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 12:13:49.874 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:14:22.692 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 12:14:22.692 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:14:22.692 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 12:14:22.692 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:14:22.872 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 12:14:24.022 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 12:14:24.032 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:14:24.032 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 12:14:24.032 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:14:24.102 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 12:14:28.572 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:14:28.582 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:14:28.582 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:14:28.582 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:14:28.632 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:14:31.362 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:14:31.362 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:14:31.362 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:14:31.372 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:14:31.402 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:15:01.582 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin
2020-04-10 12:15:01.582 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:15:01.582 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.loginPage
2020-04-10 12:15:01.582 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[]
2020-04-10 12:15:01.602 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/login
2020-04-10 12:15:12.573 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/login
2020-04-10 12:15:12.573 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:15:12.573 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.login
2020-04-10 12:15:12.573 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[liujiaxu, ljx123, org.apache.catalina.session.StandardSessionFacade@7b86ca, {}]
2020-04-10 12:15:12.593 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/index
2020-04-10 12:15:15.593 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 12:15:15.593 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:15:15.593 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 12:15:15.593 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 12:15:15.643 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 12:16:17.203 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/7/input
2020-04-10 12:16:17.213 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:16:17.213 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 12:16:17.213 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:16:17.253 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 12:17:09.993 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:17:09.993 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:17:09.993 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:17:09.993 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:17:10.033 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:17:20.733 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:17:20.743 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:17:20.743 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:17:20.743 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:17:20.773 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:17:24.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:17:24.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:17:24.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:17:24.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:17:24.783 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:18:16.033 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 12:18:16.033 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:18:16.033 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 12:18:16.033 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 12:18:16.063 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 12:18:19.202 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/7/input
2020-04-10 12:18:19.202 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:18:19.212 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 12:18:19.212 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:18:19.242 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 12:18:27.832 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 12:18:27.832 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:18:27.832 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 12:18:27.842 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot整合Spring Data JPA, content=## Spring Data JPA
Spring Data JPA是Spring基于ORM框架、JPA规范的基础上封装的一套JPA应用框架,是基于Hibernate之上构建的JPA使用解决方案,用极简的代码实现了对数据库的访问和操作,包括了增、删、改、查等在内的常用功能.
### SpringBoot整合Spring Data JPA
 #### pom文件添加依赖

```java
   <!-- 配置mysql数据库连接驱动 -->
  <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
  </dependency>
  
    <!-- 配置jpa依赖 -->
   <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
   </dependency>
```
#### properties配置文件

```java
 #数据库连接池配置 时区时间是本地时间
 spring.datasource.url=jdbc:mysql://localhost:3306/mysql1
 ?useUnicode=true&characterEncoding=UTF-8&useSSL=true&serverTimezone=GMT%2B8 
 
   #注意新版本driver使用：com.mysql.cj.jdbc.Driver 否则会异常
   spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
   spring.datasource.username=root
   spring.datasource.password=qwert
   spring.datasource.tomcat.initial-size=10
   spring.datasource.tomcat.max-active=20
   spring.datasource.tomcat.max-idle=8
   spring.datasource.tomcat.min-idle=8
   
 #jpa相关配置
  spring.jpa.database = mysql
  spring.jpa.show-sql = true
  spring.jpa.hibernate.ddl-auto = update
  spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5Dialect
  spring.jpa.open-in-view=false
```
#### 编写实体类Bean

 - **编写公共实体类BaseBean**
```java
/**
 * @description: 描述实体类的共同配置
 * @date: 2020-03-11 12:58
 */

@Data
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public class BaseBean {
    /**
    * @Description: 自增长id
    * @Date: 2020/3/11-14:11
    */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;


    /**
     * @Description:创建时间
     * @Date: 2020/3/10-22:17
            */
    @CreatedDate
    @Column(nullable = false ,updatable = false)
    protected Date createTime;

    /**
     * @Description: 修改时间
     * @Date: 2020/3/10-22:17
     */
    @LastModifiedDate
    @Column(nullable = false)
    protected Date modifyTime;
}
```

 -  **编写用户实体类**

```java
/**
 * @description: 用户实体类
 * @date: 2020-03-08 17:37
 */

@Data
@Entity
@Table(name="user")
public class User extends BaseBean {

    @Column(nullable = false)
    private String username;
    
    @Column(nullable = false)
    private Date birthday;
    
    @Column(nullable = false)
    private String sex;
    
    @Column(nullable = false)
    private String address;
}
```
**注解:**

 - **@Entity(name="EntityName")** 必须，用来标注一个数据库对应的实体，数据库中创建的表名默认和类名一致。其中，name 为可选，对应数据库中一个表，使用此注解标记 Pojo 是一个 JPA 实体。
 - **@Table(name=""，catalog=""，schema="")** 可选，用来标注一个数据库对应的实体，数据库中创建的表名默认和类名一致。通常和 @Entity 配合使用，只能标注在实体的 class 定义处，表示实体对应的数据库表的信息。
 - **@Id 必须**，@Id 定义了映射到数据库表的主键的属性，一个实体只能有一个属性被映射为主键。
 - **@GeneratedValue(strategy=GenerationType，generator="") 可选**，strategy: 表示主键生成策略，有 AUTO、INDENTITY、SEQUENCE 和 TABLE 4 种，分别表示让 ORM 框架自动选择，generator: 表示主键生成器的名称。
 - **@Column(name = "user_code"， nullable = false， length=32) 可选**，@Column 描述了数据库表中该字段的详细定义，这对于根据 JPA 注解生成数据库表结构的工具。name: 表示数据库表中该字段的名称，默认情形属性名称一致；nullable: 表示该字段是否允许为 null，默认为 true；unique: 表示该字段是否是唯一标识，默认为 false；length: 表示该字段的大小，仅对 String 类型的字段有效。
 - **@Transient可选**，@Transient 表示该属性并非一个到数据库表的字段的映射，ORM 框架将忽略该属性。
 - **@Enumerated 可选**，使用枚举的时候，我们希望数据库中存储的是枚举对应的 String 类型，而不是枚举的索引值，需要在属性上面添加 @Enumerated(EnumType.STRING) 注解。
 
基本都是hibernate的注解

#### 实现DAO层

 - **配置公共dao接口**

```java
/**
 * @description: dao层公共接口
 */
@Repository
public interface CommonDao<T extends BaseBean> extends JpaRepository<T,Long> {

}
```

 - **创建用户层dao接口**

```java
@Repository
public interface UserDao extends CommonDao<User>{

}
```

**JpaRepository接口定义了如下方法：可以实现CRUD，分页(pageable),排序(sort)等**

```java
@NoRepositoryBean
public interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {
    List<T> findAll();

    List<T> findAll(Sort var1);

    List<T> findAllById(Iterable<ID> var1);

    <S extends T> List<S> saveAll(Iterable<S> var1);

    void flush();

    <S extends T> S saveAndFlush(S var1);

    void deleteInBatch(Iterable<T> var1);

    void deleteAllInBatch();

    T getOne(ID var1);

    <S extends T> List<S> findAll(Example<S> var1);

    <S extends T> List<S> findAll(Example<S> var1, Sort var2);
}

```

```java
package org.springframework.data.repository;

import java.util.Optional;

@NoRepositoryBean
public interface CrudRepository<T, ID> extends Repository<T, ID> {
    <S extends T> S save(S var1);

    <S extends T> Iterable<S> saveAll(Iterable<S> var1);

    Optional<T> findById(ID var1);

    boolean existsById(ID var1);

    Iterable<T> findAll();

    Iterable<T> findAllById(Iterable<ID> var1);

    long count();

    void deleteById(ID var1);

    void delete(T var1);

    void deleteAll(Iterable<? extends T> var1);

    void deleteAll();
}

```

**jpa实现动态条件查询需要实现接口 JpaSpecificationExecutor**

```java
public interface JpaSpecificationExecutor<T> {
    Optional<T> findOne(@Nullable Specification<T> var1);

    List<T> findAll(@Nullable Specification<T> var1);

    Page<T> findAll(@Nullable Specification<T> var1, Pageable var2);

    List<T> findAll(@Nullable Specification<T> var1, Sort var2);

    long count(@Nullable Specification<T> var1);
}
```
 具体实现参考详解
[Spring Boot中使用jpa实现(动态条件)分页查询](https://www.cnblogs.com/sandea/p/8275890.html)
[SpringBoot重点详解--使用JPA操作数据库](https://blog.csdn.net/pengjunlee/article/details/80038677?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task)


 - **查询语句**

在jpa中查询分为两类,一类是继承了父类的方法的基本查询,另一类是自定义查询.
图中黑色就是自定义的,灰色的就是从父类继承的.

![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTIyNDU0OS8yMDE5MDEvMTIyNDU0OS0yMDE5MDEyNDExMzMyMTg5Mi00NzQ4ODAzNjYucG5n?x-oss-process=image/format,png)

 - **自定义查询**
 
Spring Data JPA 可以根据接口方法名来实现数据库操作，主要的语法是 findXXBy、readAXXBy、queryXXBy、countXXBy、getXXBy 后面跟属性名称，利用这个功能仅需要在定义的 Repository 中添加对应的方法名即可，使用时 Spring Boot 会自动帮我们实现
根据用户名查询用户：

    User findByUserName(String userName);
也可以加一些关键字 And、or：
  
    User findByUserNameOrEmail(String username,String email);
修改、删除、统计也是类似语法：

    Long deleteById(Long id);
    Long countByUserName(String userName);
基本上 SQL 体系中的关键词都可以使用，如 LIKE 、IgnoreCase、OrderBy：

    List<User> findByEmailLike(String email);
    
    User findByUserNameIgnoreCase(String userName);
    
    List<User> findByUserNameOrderByEmailDesc(String email);

 - **自定义SQL查询**

```java
@Modifying
@Query(value = "select * from user where name = ?1",nativeQuery = true)
    Page<User> findByNickName(String name);

//自定义删除和修改返回值只能是void或者int（受影响记录条数）类型
@Transactional
@Modifying
@Query("delete from User where id = ?1")
    int deleteById(Long id);

@Transactional
@Modifying
@Query("update User set name = ?1 where id = ?2")
    int modifyById(String  name, Long id);
```

 - 原生SQL的写法, **?index**表示方法参数中的顺序
 - **@Modifying** 这个必须有，告诉框架我们执行的是更新/删除操作
 - **@Query** 内部是正常的sql语句，但是需要注意的是表名，不是实际的表，而是我们前面定义的POJO，nativeQuery 是询问是否使用原生sql语句
 - **@Transactional** 数据修改和删除，需要显示声明事务，否则会报错，一个是在调用的方法上添加注解或者直接在repository api的接口上添加注解


#### 实现Service层

```java
public interface UserService {
    /** 删除 */
    public void delete(int id);
    /** 增加*/
    public void insert(User user);
    /** 更新*/
    public int update(User user);
    /** 查询单个*/
    public User selectById(int id);
    /** 查询全部列表*/
    public Iterator<User> selectAll(int pageNum, int pageSize);
}
```
UserServiceImpl.java
```java
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserDao userDao;

    /**
     * 删除
     * @param id
     */
    @Override
    public void delete(int id) {
        userDao.deleteById(id);
    }

    /**
     * 增加
     * @param user
     */
    @Override
    public void insert(User user) {
        userDao.save(user);
    }

    /**
     * 更新
     * @param user
     */
    @Override
    public int update(User user) {
        userDao.save(user);
        return 1;
    }

    /**
     * 查询单个 注意返回的是optional类
     * @param id
     */
    @Override
    public User selectById(int id) {
        Optional<User> optional = userDao.findById(id);
        User user = optional.get();
        return user;
    }

    /**
     * 查询全部列表,并做分页
     *  @param pageNum 开始页数
     * @param pageSize 每页显示的数据条数
     */
    @Override
    public Iterator<User> selectAll(int pageNum, int pageSize) {
        //将参数传给这个方法就可以实现物理分页了，非常简单。
        Sort sort = new Sort(Sort.Direction.DESC, "id");
        Pageable pageable = new PageRequest(pageNum, pageSize, sort);
        Page<User> users = userDao.findAll(pageable);
        Iterator<User> userIterator =  users.iterator();
        return  userIterator;
    }
}
```
#### 实现Controller层

```java
@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @RequestMapping(method = RequestMethod.GET,value = "/delete/{id}")
    public void delete(@PathVariable("id")int id){
        userService.delete(id);
    }

    @RequestMapping(method = RequestMethod.POST,value = "/insert")
    public void insert(User user){
        userService.insert(user);
    }
    @RequestMapping(method = RequestMethod.POST,value = "/update/{id}")
    public void update(@RequestParam User user){
        userService.update(user);
    }

    @RequestMapping(method = RequestMethod.GET,value = "/{id}/select")
    public User select(@PathVariable("id")int id){
        return userService.selectById(id);
    }

    @RequestMapping(method = RequestMethod.GET,value = "/selectAll/{pageNum}/{pageSize}")
    public List<User> selectAll(@PathVariable("pageNum") int pageNum, @PathVariable("pageSize") int pageSize){
        Iterator<User> userIterator = userService.selectAll(pageNum, pageSize);
        List<User> list = new ArrayList<>();
        while(userIterator.hasNext()){
            list.add(userIterator.next());
        }
        return list;
    }
}
```

 文章参考
 [spring boot2 整合（二）JPA（特别完整！）](https://www.jianshu.com/p/3b31270a44b1)
 [SpringBoot中使用SpringDataJPA](https://www.cnblogs.com/wadmwz/p/10313495.html)



, firstPicture=http://image.baidu.com/search/detail?ct=503316480&z=undefined&tn=baiduimagedetail&ipn=d&word=springboot%E5%9B%BE%E6%A0%87&step_word=&ie=utf-8&in=&cl=2&lm=-1&st=undefined&hd=undefined&latest=undefined&copyright=undefined&cs=2927103475,842869804&os=414483308,3167470945&simid=3409412619,522141907&pn=8&rn=1&di=480&ln=1004&fr=&fmq=1586492218120_R&fm=&ic=undefined&s=undefined&se=&sme=&tab=0&width=undefined&height=undefined&face=undefined&is=0,0&istype=0&ist=&jit=&bdtype=11&spn=0&pi=0&gsm=0&hs=2&objurl=http%3A%2F%2Ffile.boxuegu.com%2F667d99c2d40048a6b4063c8009a49bb1.jpg&rpstart=0&rpnum=0&adpicid=0&force=undefined, flag=原创, views=null, appreciation=true, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=4,1, description=SpringBoot整合之使用 Spring Data JPA (CRUD,分页,动态条件查询等)), {}, org.apache.catalina.session.StandardSessionFacade@7b86ca]
2020-04-10 12:18:27.962 [ http-nio-8082-exec-5 ] - [ ERROR ] [ druid.sql.Statement : 149 ] - {conn-10005, pstmt-20022} execute error. update t_blog set updateTime=?, appreciation=?, commentabled=?, content=?, description=?, firstPicture=?, flag=?, published=?, recommend=?, shareStatement=?, title=?, type_id=?, user_id=?, views=? where id=?
com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'firstPicture' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1092)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1040)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1347)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1025)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2843)
	at com.alibaba.druid.filter.FilterAdapter.preparedStatement_executeUpdate(FilterAdapter.java:1091)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_executeUpdate(FilterEventAdapter.java:491)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2841)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_executeUpdate(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2841)
	at com.alibaba.druid.filter.FilterAdapter.preparedStatement_executeUpdate(FilterAdapter.java:1091)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_executeUpdate(FilterEventAdapter.java:491)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2841)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.executeUpdate(PreparedStatementProxyImpl.java:194)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.executeUpdate(DruidPooledPreparedStatement.java:256)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3376)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:3249)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3650)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:146)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:478)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:356)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1472)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:512)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3310)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2506)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:447)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:178)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:39)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:271)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:533)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:746)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:714)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:534)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:305)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.ljx.blog.service.serviceImpl.BlogServiceImpl$$EnhancerBySpringCGLIB$$9688a8a0.updateBlog(<generated>)
	at com.ljx.blog.controller.admin.BlogController.post(BlogController.java:97)
	at com.ljx.blog.controller.admin.BlogController$$FastClassBySpringCGLIB$$977242c4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.ljx.blog.controller.admin.BlogController$$EnhancerBySpringCGLIB$$be5c81cd.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2020-04-10 12:18:27.972 [ http-nio-8082-exec-5 ] - [ WARN  ] [ org.hibernate.engine.jdbc.spi.SqlExceptionHelper : 137 ] - SQL Error: 1406, SQLState: 22001
2020-04-10 12:18:27.972 [ http-nio-8082-exec-5 ] - [ ERROR ] [ org.hibernate.engine.jdbc.spi.SqlExceptionHelper : 142 ] - Data truncation: Data too long for column 'firstPicture' at row 1
2020-04-10 12:18:27.992 [ http-nio-8082-exec-5 ] - [ ERROR ] [ org.hibernate.internal.ExceptionMapperStandardImpl : 39 ] - HHH000346: Error during managed flush [org.hibernate.exception.DataException: could not execute statement]
2020-04-10 12:18:28.022 [ http-nio-8082-exec-5 ] - [ ERROR ] [ o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] : 175 ] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement] with root cause
com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'firstPicture' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1092)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1040)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1347)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:1025)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2843)
	at com.alibaba.druid.filter.FilterAdapter.preparedStatement_executeUpdate(FilterAdapter.java:1091)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_executeUpdate(FilterEventAdapter.java:491)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2841)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_executeUpdate(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2841)
	at com.alibaba.druid.filter.FilterAdapter.preparedStatement_executeUpdate(FilterAdapter.java:1091)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_executeUpdate(FilterEventAdapter.java:491)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_executeUpdate(FilterChainImpl.java:2841)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.executeUpdate(PreparedStatementProxyImpl.java:194)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.executeUpdate(DruidPooledPreparedStatement.java:256)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3376)
	at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:3249)
	at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3650)
	at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:146)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:478)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:356)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1472)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:512)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3310)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2506)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:447)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:178)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:39)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:271)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:533)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:746)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:714)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:534)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:305)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.ljx.blog.service.serviceImpl.BlogServiceImpl$$EnhancerBySpringCGLIB$$9688a8a0.updateBlog(<generated>)
	at com.ljx.blog.controller.admin.BlogController.post(BlogController.java:97)
	at com.ljx.blog.controller.admin.BlogController$$FastClassBySpringCGLIB$$977242c4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.ljx.blog.controller.admin.BlogController$$EnhancerBySpringCGLIB$$be5c81cd.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2020-04-10 12:18:58.142 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 12:18:58.142 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:18:58.142 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 12:18:58.142 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot整合Spring Data JPA, content=## Spring Data JPA
Spring Data JPA是Spring基于ORM框架、JPA规范的基础上封装的一套JPA应用框架,是基于Hibernate之上构建的JPA使用解决方案,用极简的代码实现了对数据库的访问和操作,包括了增、删、改、查等在内的常用功能.
### SpringBoot整合Spring Data JPA
 #### pom文件添加依赖

```java
   <!-- 配置mysql数据库连接驱动 -->
  <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
  </dependency>
  
    <!-- 配置jpa依赖 -->
   <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
   </dependency>
```
#### properties配置文件

```java
 #数据库连接池配置 时区时间是本地时间
 spring.datasource.url=jdbc:mysql://localhost:3306/mysql1
 ?useUnicode=true&characterEncoding=UTF-8&useSSL=true&serverTimezone=GMT%2B8 
 
   #注意新版本driver使用：com.mysql.cj.jdbc.Driver 否则会异常
   spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
   spring.datasource.username=root
   spring.datasource.password=qwert
   spring.datasource.tomcat.initial-size=10
   spring.datasource.tomcat.max-active=20
   spring.datasource.tomcat.max-idle=8
   spring.datasource.tomcat.min-idle=8
   
 #jpa相关配置
  spring.jpa.database = mysql
  spring.jpa.show-sql = true
  spring.jpa.hibernate.ddl-auto = update
  spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL5Dialect
  spring.jpa.open-in-view=false
```
#### 编写实体类Bean

 - **编写公共实体类BaseBean**
```java
/**
 * @description: 描述实体类的共同配置
 * @date: 2020-03-11 12:58
 */

@Data
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public class BaseBean {
    /**
    * @Description: 自增长id
    * @Date: 2020/3/11-14:11
    */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;


    /**
     * @Description:创建时间
     * @Date: 2020/3/10-22:17
            */
    @CreatedDate
    @Column(nullable = false ,updatable = false)
    protected Date createTime;

    /**
     * @Description: 修改时间
     * @Date: 2020/3/10-22:17
     */
    @LastModifiedDate
    @Column(nullable = false)
    protected Date modifyTime;
}
```

 -  **编写用户实体类**

```java
/**
 * @description: 用户实体类
 * @date: 2020-03-08 17:37
 */

@Data
@Entity
@Table(name="user")
public class User extends BaseBean {

    @Column(nullable = false)
    private String username;
    
    @Column(nullable = false)
    private Date birthday;
    
    @Column(nullable = false)
    private String sex;
    
    @Column(nullable = false)
    private String address;
}
```
**注解:**

 - **@Entity(name="EntityName")** 必须，用来标注一个数据库对应的实体，数据库中创建的表名默认和类名一致。其中，name 为可选，对应数据库中一个表，使用此注解标记 Pojo 是一个 JPA 实体。
 - **@Table(name=""，catalog=""，schema="")** 可选，用来标注一个数据库对应的实体，数据库中创建的表名默认和类名一致。通常和 @Entity 配合使用，只能标注在实体的 class 定义处，表示实体对应的数据库表的信息。
 - **@Id 必须**，@Id 定义了映射到数据库表的主键的属性，一个实体只能有一个属性被映射为主键。
 - **@GeneratedValue(strategy=GenerationType，generator="") 可选**，strategy: 表示主键生成策略，有 AUTO、INDENTITY、SEQUENCE 和 TABLE 4 种，分别表示让 ORM 框架自动选择，generator: 表示主键生成器的名称。
 - **@Column(name = "user_code"， nullable = false， length=32) 可选**，@Column 描述了数据库表中该字段的详细定义，这对于根据 JPA 注解生成数据库表结构的工具。name: 表示数据库表中该字段的名称，默认情形属性名称一致；nullable: 表示该字段是否允许为 null，默认为 true；unique: 表示该字段是否是唯一标识，默认为 false；length: 表示该字段的大小，仅对 String 类型的字段有效。
 - **@Transient可选**，@Transient 表示该属性并非一个到数据库表的字段的映射，ORM 框架将忽略该属性。
 - **@Enumerated 可选**，使用枚举的时候，我们希望数据库中存储的是枚举对应的 String 类型，而不是枚举的索引值，需要在属性上面添加 @Enumerated(EnumType.STRING) 注解。
 
基本都是hibernate的注解

#### 实现DAO层

 - **配置公共dao接口**

```java
/**
 * @description: dao层公共接口
 */
@Repository
public interface CommonDao<T extends BaseBean> extends JpaRepository<T,Long> {

}
```

 - **创建用户层dao接口**

```java
@Repository
public interface UserDao extends CommonDao<User>{

}
```

**JpaRepository接口定义了如下方法：可以实现CRUD，分页(pageable),排序(sort)等**

```java
@NoRepositoryBean
public interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {
    List<T> findAll();

    List<T> findAll(Sort var1);

    List<T> findAllById(Iterable<ID> var1);

    <S extends T> List<S> saveAll(Iterable<S> var1);

    void flush();

    <S extends T> S saveAndFlush(S var1);

    void deleteInBatch(Iterable<T> var1);

    void deleteAllInBatch();

    T getOne(ID var1);

    <S extends T> List<S> findAll(Example<S> var1);

    <S extends T> List<S> findAll(Example<S> var1, Sort var2);
}

```

```java
package org.springframework.data.repository;

import java.util.Optional;

@NoRepositoryBean
public interface CrudRepository<T, ID> extends Repository<T, ID> {
    <S extends T> S save(S var1);

    <S extends T> Iterable<S> saveAll(Iterable<S> var1);

    Optional<T> findById(ID var1);

    boolean existsById(ID var1);

    Iterable<T> findAll();

    Iterable<T> findAllById(Iterable<ID> var1);

    long count();

    void deleteById(ID var1);

    void delete(T var1);

    void deleteAll(Iterable<? extends T> var1);

    void deleteAll();
}

```

**jpa实现动态条件查询需要实现接口 JpaSpecificationExecutor**

```java
public interface JpaSpecificationExecutor<T> {
    Optional<T> findOne(@Nullable Specification<T> var1);

    List<T> findAll(@Nullable Specification<T> var1);

    Page<T> findAll(@Nullable Specification<T> var1, Pageable var2);

    List<T> findAll(@Nullable Specification<T> var1, Sort var2);

    long count(@Nullable Specification<T> var1);
}
```
 具体实现参考详解
[Spring Boot中使用jpa实现(动态条件)分页查询](https://www.cnblogs.com/sandea/p/8275890.html)
[SpringBoot重点详解--使用JPA操作数据库](https://blog.csdn.net/pengjunlee/article/details/80038677?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task)


 - **查询语句**

在jpa中查询分为两类,一类是继承了父类的方法的基本查询,另一类是自定义查询.
图中黑色就是自定义的,灰色的就是从父类继承的.

![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTIyNDU0OS8yMDE5MDEvMTIyNDU0OS0yMDE5MDEyNDExMzMyMTg5Mi00NzQ4ODAzNjYucG5n?x-oss-process=image/format,png)

 - **自定义查询**
 
Spring Data JPA 可以根据接口方法名来实现数据库操作，主要的语法是 findXXBy、readAXXBy、queryXXBy、countXXBy、getXXBy 后面跟属性名称，利用这个功能仅需要在定义的 Repository 中添加对应的方法名即可，使用时 Spring Boot 会自动帮我们实现
根据用户名查询用户：

    User findByUserName(String userName);
也可以加一些关键字 And、or：
  
    User findByUserNameOrEmail(String username,String email);
修改、删除、统计也是类似语法：

    Long deleteById(Long id);
    Long countByUserName(String userName);
基本上 SQL 体系中的关键词都可以使用，如 LIKE 、IgnoreCase、OrderBy：

    List<User> findByEmailLike(String email);
    
    User findByUserNameIgnoreCase(String userName);
    
    List<User> findByUserNameOrderByEmailDesc(String email);

 - **自定义SQL查询**

```java
@Modifying
@Query(value = "select * from user where name = ?1",nativeQuery = true)
    Page<User> findByNickName(String name);

//自定义删除和修改返回值只能是void或者int（受影响记录条数）类型
@Transactional
@Modifying
@Query("delete from User where id = ?1")
    int deleteById(Long id);

@Transactional
@Modifying
@Query("update User set name = ?1 where id = ?2")
    int modifyById(String  name, Long id);
```

 - 原生SQL的写法, **?index**表示方法参数中的顺序
 - **@Modifying** 这个必须有，告诉框架我们执行的是更新/删除操作
 - **@Query** 内部是正常的sql语句，但是需要注意的是表名，不是实际的表，而是我们前面定义的POJO，nativeQuery 是询问是否使用原生sql语句
 - **@Transactional** 数据修改和删除，需要显示声明事务，否则会报错，一个是在调用的方法上添加注解或者直接在repository api的接口上添加注解


#### 实现Service层

```java
public interface UserService {
    /** 删除 */
    public void delete(int id);
    /** 增加*/
    public void insert(User user);
    /** 更新*/
    public int update(User user);
    /** 查询单个*/
    public User selectById(int id);
    /** 查询全部列表*/
    public Iterator<User> selectAll(int pageNum, int pageSize);
}
```
UserServiceImpl.java
```java
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserDao userDao;

    /**
     * 删除
     * @param id
     */
    @Override
    public void delete(int id) {
        userDao.deleteById(id);
    }

    /**
     * 增加
     * @param user
     */
    @Override
    public void insert(User user) {
        userDao.save(user);
    }

    /**
     * 更新
     * @param user
     */
    @Override
    public int update(User user) {
        userDao.save(user);
        return 1;
    }

    /**
     * 查询单个 注意返回的是optional类
     * @param id
     */
    @Override
    public User selectById(int id) {
        Optional<User> optional = userDao.findById(id);
        User user = optional.get();
        return user;
    }

    /**
     * 查询全部列表,并做分页
     *  @param pageNum 开始页数
     * @param pageSize 每页显示的数据条数
     */
    @Override
    public Iterator<User> selectAll(int pageNum, int pageSize) {
        //将参数传给这个方法就可以实现物理分页了，非常简单。
        Sort sort = new Sort(Sort.Direction.DESC, "id");
        Pageable pageable = new PageRequest(pageNum, pageSize, sort);
        Page<User> users = userDao.findAll(pageable);
        Iterator<User> userIterator =  users.iterator();
        return  userIterator;
    }
}
```
#### 实现Controller层

```java
@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @RequestMapping(method = RequestMethod.GET,value = "/delete/{id}")
    public void delete(@PathVariable("id")int id){
        userService.delete(id);
    }

    @RequestMapping(method = RequestMethod.POST,value = "/insert")
    public void insert(User user){
        userService.insert(user);
    }
    @RequestMapping(method = RequestMethod.POST,value = "/update/{id}")
    public void update(@RequestParam User user){
        userService.update(user);
    }

    @RequestMapping(method = RequestMethod.GET,value = "/{id}/select")
    public User select(@PathVariable("id")int id){
        return userService.selectById(id);
    }

    @RequestMapping(method = RequestMethod.GET,value = "/selectAll/{pageNum}/{pageSize}")
    public List<User> selectAll(@PathVariable("pageNum") int pageNum, @PathVariable("pageSize") int pageSize){
        Iterator<User> userIterator = userService.selectAll(pageNum, pageSize);
        List<User> list = new ArrayList<>();
        while(userIterator.hasNext()){
            list.add(userIterator.next());
        }
        return list;
    }
}
```

 文章参考
 [spring boot2 整合（二）JPA（特别完整！）](https://www.jianshu.com/p/3b31270a44b1)
 [SpringBoot中使用SpringDataJPA](https://www.cnblogs.com/wadmwz/p/10313495.html)



, firstPicture=http://img.mukewang.com/szimg/5ae4172200010b8f05400300.jpg, flag=原创, views=null, appreciation=true, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=4,1, description=SpringBoot整合之使用 Spring Data JPA (CRUD,分页,动态条件查询等)), {}, org.apache.catalina.session.StandardSessionFacade@7b86ca]
2020-04-10 12:18:58.222 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 12:18:58.322 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 12:18:58.322 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:18:58.322 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 12:18:58.332 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 12:18:58.352 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 12:19:00.272 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:19:00.272 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:19:00.272 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:19:00.272 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:19:00.322 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:22:00.224 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 12:22:00.224 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:22:00.224 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 12:22:00.224 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:22:00.284 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 12:22:01.277 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 12:22:01.278 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:22:01.279 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 12:22:01.279 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:22:01.307 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 12:27:25.521 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/8
2020-04-10 12:27:25.521 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:27:25.521 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 12:27:25.521 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[8, {}]
2020-04-10 12:27:25.561 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 12:27:26.568 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/8
2020-04-10 12:27:26.569 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:27:26.570 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 12:27:26.570 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[8, {}]
2020-04-10 12:27:26.595 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 12:27:52.463 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/archives
2020-04-10 12:27:52.463 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:27:52.463 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.ArchivesShowController.archives
2020-04-10 12:27:52.463 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 12:27:52.523 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:archives
2020-04-10 12:28:33.923 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/5
2020-04-10 12:28:33.923 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:28:33.933 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 12:28:33.933 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[5, {}]
2020-04-10 12:28:33.963 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 12:28:34.994 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/5
2020-04-10 12:28:34.997 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:28:34.997 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 12:28:34.998 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[5, {}]
2020-04-10 12:28:35.004 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 12:29:26.364 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/archives
2020-04-10 12:29:26.364 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:29:26.364 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.ArchivesShowController.archives
2020-04-10 12:29:26.364 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 12:29:26.394 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:archives
2020-04-10 12:30:11.590 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 12:30:11.590 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:30:11.590 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 12:30:11.600 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:30:11.630 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 12:30:12.997 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 12:30:12.997 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:30:12.998 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 12:30:12.999 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 12:30:13.019 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 12:34:32.546 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:34:32.556 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:34:32.556 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:34:32.556 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:34:32.606 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:36:03.310 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:36:03.310 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:36:03.310 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:36:03.310 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:36:03.370 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 12:36:34.857 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 12:36:34.857 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:127.0.0.1
2020-04-10 12:36:34.857 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 12:36:34.857 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 12:36:34.897 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 18:53:29.146 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 18:53:29.146 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:53:29.156 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 18:53:29.156 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 18:53:29.226 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 18:53:46.976 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 18:53:46.976 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:53:46.976 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 18:53:46.976 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 18:53:47.016 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 18:54:45.936 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin
2020-04-10 18:54:45.946 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:54:45.946 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.loginPage
2020-04-10 18:54:45.946 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[]
2020-04-10 18:54:45.946 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/login
2020-04-10 18:54:53.966 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/login
2020-04-10 18:54:53.966 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:54:53.966 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.login
2020-04-10 18:54:53.966 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[liujiaxu, ljx123, org.apache.catalina.session.StandardSessionFacade@19f14f5, {}]
2020-04-10 18:54:53.986 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/index
2020-04-10 18:55:01.246 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 18:55:01.246 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:55:01.246 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 18:55:01.246 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 18:55:01.276 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 18:55:06.655 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/2/input
2020-04-10 18:55:06.655 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:55:06.655 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 18:55:06.655 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 18:55:06.685 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 18:55:45.637 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 18:55:45.637 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:55:45.637 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 18:55:45.637 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot中.properties重点配置和pom.xml中依赖总结, content=#### application.properties和yml格式转换 
 [格式在线转换工具 ](https://www.toyaml.com/index.html)

**yml格式注意点：**
  大小写敏感
  使用缩进表示层级关系
  缩进时不允许使用Tab键，只允许使用空格
  缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
  kye-value的关系使用冒号代表，格式为key: value，
  注意冒号后面要加一个空格，不然解析不了
  其中#表示注释，从这个字符到行尾，都会被解析器忽略

**application.properties**

#### 指定tomcat的端口号，编码格式

```java
 sever.port=8088
 server.tomcat.uri-encoding=UTF-8
```

#### 覆盖默认静态资源配置

```java
spring.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/static/**  默认是/**  添加路径规则时不要忘记 /** 
```
   
> [SpringBoot静态资源访问笔记](https://blog.csdn.net/YOUNGljx/article/details/104687409)


#### 配置url项目访问路径

**注意点 参考** [Springboot 添加server.servlet.context-path相关使用总结](https://blog.csdn.net/qq_38322527/article/details/101691785) 

```java  
 #在springboot1.x中如下配置       #在springboot2.x中如下配置
 server.context-path=/项目名     server.servlet.context-path=/项目      
```

#### 修改进入SpringMVC DispatcherServlet的规则路径
  
```java
在springboot2.x中，这个配置是默认关闭的 低版本直接配置
  spring.mvc.pathmatch.use-suffix-pattern=true
  server.servlet.path=*.html 或*.do 或 *.action
```
    
##### Java配置方式 

```java
@Configuration
public class MyWebMvcConfigurer implements WebMvcConfigurer {
    @Override
    public void configurePathMatch(PathMatchConfigurer configurer) {
        //开启路径后缀匹配
        configurer.setUseRegisteredSuffixPatternMatch(true);
    }
}


@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
    /**
     * 设置匹配*.action后缀请求
     * @param dispatcherServlet
     * @return
     */
    @Bean
    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) {
        ServletRegistrationBean<DispatcherServlet> servletServletRegistrationBean = new ServletRegistrationBean<>(dispatcherServlet);
        servletServletRegistrationBean.addUrlMappings("*.action");
        return servletServletRegistrationBean;
    }
}
```

#### 设置日志级别 默认的日志框架 Logback
   
```java
#root日志以WARN级别输出
 logging.level.root=WARN    
#springframework.web日志以DEBUG级别输出
 logging.level.org.springframework.web=DEBUG
 
# 在当前磁盘的根路径下创建 spring 文件夹和里面的 log 文件夹；使用 spring.log 作为默认文件
logging.path=/spring/log
# 指定完整的文件名
#logging.file=D:/springboot.log

#logging.file.path=指定路径和文件名

#  在控制台输出的日志的格式
logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
# 指定文件中日志输出的格式
logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n
```
>  [springboot使用日志笔记](https://blog.csdn.net/YOUNGljx/article/details/105074630)

#### 数据源相关配置
   
 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源
```java 
  <!-- 引入mysql数据库连接驱动 -->
   <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
   </dependency>
    
   #配置数据源等相关 时区时间是本地时间
   spring.datasource.url=jdbc:mysql://localhost:3306/mysql1
   ?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8
    
   #注意新版本driver使用：com.mysql.cj.jdbc.Driver 否则会异常
   spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    
   spring.datasource.username=root
   spring.datasource.password=qwert
   spring.datasource.tomcat.initial-size=10
   spring.datasource.tomcat.max-active=20
   spring.datasource.tomcat.max-idle=8
   spring.datasource.tomcat.min-idle=8
```
##### 配置alibaba Druid数据源

 [Spring Boot 自定义数据源 DruidDataSource](https://blog.csdn.net/wangmx1993328/article/details/81865153)
[集成DataSource 与 Druid监控配置](https://www.cnblogs.com/yy3b2007com/p/8763077.html)

   ***未完待续***, firstPicture=http://pic4.zhimg.com/v2-9fa90a3009a4d4fcf1f7f07bef91b176_1200x500.jpg, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=false, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=SpringBoot中.properties或.yml重点配置和pom.xml中依赖总结), {}, org.apache.catalina.session.StandardSessionFacade@19f14f5]
2020-04-10 18:55:45.677 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 18:55:45.707 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 18:55:45.707 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:55:45.707 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 18:55:45.707 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 18:55:45.737 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 18:55:47.437 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 18:55:47.437 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:55:47.437 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 18:55:47.437 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 18:55:47.487 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 18:56:30.157 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/2/input
2020-04-10 18:56:30.157 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:56:30.157 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 18:56:30.157 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 18:56:30.187 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 18:56:35.258 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 18:56:35.258 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:56:35.258 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 18:56:35.258 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot中.properties重点配置和pom.xml中依赖总结, content=#### application.properties和yml格式转换 
 [格式在线转换工具 ](https://www.toyaml.com/index.html)

**yml格式注意点：**
  大小写敏感
  使用缩进表示层级关系
  缩进时不允许使用Tab键，只允许使用空格
  缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
  kye-value的关系使用冒号代表，格式为key: value，
  注意冒号后面要加一个空格，不然解析不了
  其中#表示注释，从这个字符到行尾，都会被解析器忽略

**application.properties**

#### 指定tomcat的端口号，编码格式

```java
 sever.port=8088
 server.tomcat.uri-encoding=UTF-8
```

#### 覆盖默认静态资源配置

```java
spring.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/static/**  默认是/**  添加路径规则时不要忘记 /** 
```
   
> [SpringBoot静态资源访问笔记](https://blog.csdn.net/YOUNGljx/article/details/104687409)


#### 配置url项目访问路径

**注意点 参考** [Springboot 添加server.servlet.context-path相关使用总结](https://blog.csdn.net/qq_38322527/article/details/101691785) 

```java  
 #在springboot1.x中如下配置       #在springboot2.x中如下配置
 server.context-path=/项目名     server.servlet.context-path=/项目      
```

#### 修改进入SpringMVC DispatcherServlet的规则路径
  
```java
在springboot2.x中，这个配置是默认关闭的 低版本直接配置
  spring.mvc.pathmatch.use-suffix-pattern=true
  server.servlet.path=*.html 或*.do 或 *.action
```
    
##### Java配置方式 

```java
@Configuration
public class MyWebMvcConfigurer implements WebMvcConfigurer {
    @Override
    public void configurePathMatch(PathMatchConfigurer configurer) {
        //开启路径后缀匹配
        configurer.setUseRegisteredSuffixPatternMatch(true);
    }
}


@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
    /**
     * 设置匹配*.action后缀请求
     * @param dispatcherServlet
     * @return
     */
    @Bean
    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) {
        ServletRegistrationBean<DispatcherServlet> servletServletRegistrationBean = new ServletRegistrationBean<>(dispatcherServlet);
        servletServletRegistrationBean.addUrlMappings("*.action");
        return servletServletRegistrationBean;
    }
}
```

#### 设置日志级别 默认的日志框架 Logback
   
```java
#root日志以WARN级别输出
 logging.level.root=WARN    
#springframework.web日志以DEBUG级别输出
 logging.level.org.springframework.web=DEBUG
 
# 在当前磁盘的根路径下创建 spring 文件夹和里面的 log 文件夹；使用 spring.log 作为默认文件
logging.path=/spring/log
# 指定完整的文件名
#logging.file=D:/springboot.log

#logging.file.path=指定路径和文件名

#  在控制台输出的日志的格式
logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
# 指定文件中日志输出的格式
logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n
```
>  [springboot使用日志笔记](https://blog.csdn.net/YOUNGljx/article/details/105074630)

#### 数据源相关配置
   
 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源
```java 
  <!-- 引入mysql数据库连接驱动 -->
   <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
   </dependency>
    
   #配置数据源等相关 时区时间是本地时间
   spring.datasource.url=jdbc:mysql://localhost:3306/mysql1
   ?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8
    
   #注意新版本driver使用：com.mysql.cj.jdbc.Driver 否则会异常
   spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    
   spring.datasource.username=root
   spring.datasource.password=qwert
   spring.datasource.tomcat.initial-size=10
   spring.datasource.tomcat.max-active=20
   spring.datasource.tomcat.max-idle=8
   spring.datasource.tomcat.min-idle=8
```
##### 配置alibaba Druid数据源

 [Spring Boot 自定义数据源 DruidDataSource](https://blog.csdn.net/wangmx1993328/article/details/81865153)
[集成DataSource 与 Druid监控配置](https://www.cnblogs.com/yy3b2007com/p/8763077.html)

   ***未完待续***, firstPicture=http://pic4.zhimg.com/v2-9fa90a3009a4d4fcf1f7f07bef91b176_1200x500.jpg, flag=转载, views=null, appreciation=true, shareStatement=true, commentabled=false, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=SpringBoot中.properties或.yml重点配置和pom.xml中依赖总结), {}, org.apache.catalina.session.StandardSessionFacade@19f14f5]
2020-04-10 18:56:35.278 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 18:56:35.288 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 18:56:35.288 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:56:35.298 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 18:56:35.298 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 18:56:35.318 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 18:56:36.468 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 18:56:36.478 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:56:36.478 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 18:56:36.478 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 18:56:36.518 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 18:57:23.247 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 18:57:23.247 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:57:23.247 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 18:57:23.247 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 18:57:23.287 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 18:57:36.521 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 18:57:36.521 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:57:36.521 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 18:57:36.521 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 18:57:36.551 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 18:58:44.282 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 18:58:44.282 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 18:58:44.282 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 18:58:44.282 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 18:58:44.332 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:00:16.068 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:00:16.068 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:00:16.068 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:00:16.068 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:00:16.118 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:04:15.198 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:04:15.198 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:04:15.198 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:04:15.208 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:04:15.248 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:06:41.597 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:06:41.597 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:06:41.597 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:06:41.597 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:06:41.647 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:08:33.649 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:08:33.649 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:08:33.649 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:08:33.649 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:08:33.719 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:09:23.094 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:09:23.094 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:09:23.104 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:09:23.104 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:09:23.144 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:12:12.267 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 19:12:12.267 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:12:12.267 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:12:12.277 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 19:12:12.327 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:12:59.507 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 19:12:59.507 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:12:59.517 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:12:59.517 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 19:12:59.557 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:13:00.453 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 19:13:00.454 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:13:00.455 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 19:13:00.455 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 19:13:00.484 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 19:13:26.308 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 19:13:26.308 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:13:26.308 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:13:26.308 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 19:13:26.338 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:15:47.110 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:15:47.110 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:15:47.110 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:15:47.110 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:15:47.190 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:17:05.880 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:17:05.880 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:17:05.880 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:17:05.880 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:17:05.940 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:17:08.710 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:17:08.710 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:17:08.710 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:17:08.710 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:17:08.740 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:17:31.915 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:17:31.925 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:17:31.925 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:17:31.925 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:17:31.945 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:17:45.109 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:17:45.109 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:17:45.109 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:17:45.109 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:17:45.149 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:17:47.869 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:17:47.869 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:17:47.869 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:17:47.879 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:17:47.889 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:23:02.062 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:23:02.062 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:02.062 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:23:02.062 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:23:02.112 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:23:15.806 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:23:15.806 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:15.806 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:23:15.806 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:23:15.846 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:23:24.427 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:23:24.427 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:24.427 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:23:24.427 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:23:24.447 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:23:26.276 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/tags/-1
2020-04-10 19:23:26.276 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:26.276 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TagShowController.types
2020-04-10 19:23:26.286 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:23:26.356 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:tags
2020-04-10 19:23:28.596 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:23:28.596 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:28.596 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:23:28.596 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:23:28.606 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:23:36.446 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:23:36.446 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:36.446 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:23:36.446 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:23:36.466 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:23:39.766 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:23:39.766 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:23:39.766 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:23:39.766 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:23:39.786 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:25:36.759 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:25:36.759 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:25:36.769 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:25:36.769 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:25:36.799 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:26:18.190 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/9
2020-04-10 19:26:18.190 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:26:18.190 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:26:18.190 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 9]
2020-04-10 19:26:18.220 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:28:15.955 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 50 ] - Starting BlogApplication on THINK-PC with PID 4696 (started by LIUJIAXU in D:\桌面\blog)
2020-04-10 19:28:15.965 [ restartedMain ] - [ DEBUG ] [ com.ljx.blog.BlogApplication : 53 ] - Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-10 19:28:15.965 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 652 ] - The following profiles are active: dev
2020-04-10 19:28:18.210 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-8082"]
2020-04-10 19:28:18.230 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2020-04-10 19:28:18.230 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-10 19:28:18.370 [ restartedMain ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring embedded WebApplicationContext
2020-04-10 19:28:18.380 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.config.DruidConfig : 45 ] - init Druid Servlet Configuration 
2020-04-10 19:28:18.860 [ restartedMain ] - [ INFO  ] [ org.hibernate.jpa.internal.util.LogHelper : 31 ] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-10 19:28:18.970 [ restartedMain ] - [ INFO  ] [ org.hibernate.Version : 46 ] - HHH000412: Hibernate Core {5.3.15.Final}
2020-04-10 19:28:18.970 [ restartedMain ] - [ INFO  ] [ org.hibernate.cfg.Environment : 213 ] - HHH000206: hibernate.properties not found
2020-04-10 19:28:19.200 [ restartedMain ] - [ INFO  ] [ org.hibernate.annotations.common.Version : 49 ] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-10 19:28:19.720 [ restartedMain ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 928 ] - {dataSource-1} inited
2020-04-10 19:28:19.730 [ restartedMain ] - [ INFO  ] [ org.hibernate.dialect.Dialect : 157 ] - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-10 19:28:21.659 [ restartedMain ] - [ INFO  ] [ o.h.hql.internal.QueryTranslatorFactoryInitiator : 47 ] - HHH000397: Using ASTQueryTranslatorFactory
2020-04-10 19:28:23.429 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-8082"]
2020-04-10 19:28:23.469 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 59 ] - Started BlogApplication in 8.124 seconds (JVM running for 9.943)
2020-04-10 19:29:47.581 [ http-nio-8082-exec-1 ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-10 19:29:47.701 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:29:47.701 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:29:47.701 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:29:47.701 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:29:47.771 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 19:29:48.131 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 19:29:48.161 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:30:12.481 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:30:12.481 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:30:12.481 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:30:12.481 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:30:12.571 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:30:27.291 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:30:27.291 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:30:27.291 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:30:27.301 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:30:27.341 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:31:34.867 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:31:34.867 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:31:34.867 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:31:34.867 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:31:34.937 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:34:50.103 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:34:50.103 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:34:50.103 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:34:50.103 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:34:50.143 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:35:03.853 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:35:03.853 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:35:03.853 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:35:03.853 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:35:03.883 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:35:07.324 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:35:07.324 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:35:07.324 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:35:07.324 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:35:07.364 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:35:10.549 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/tags/-1
2020-04-10 19:35:10.550 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:35:10.551 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TagShowController.types
2020-04-10 19:35:10.553 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:35:10.641 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:tags
2020-04-10 19:35:12.272 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:35:12.273 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:35:12.273 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:35:12.273 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:35:12.307 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:35:15.879 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:35:15.880 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:35:15.881 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:35:15.882 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:35:15.919 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:35:20.544 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:35:20.544 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:35:20.544 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:35:20.544 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:35:20.584 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:36:03.876 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 19:36:03.876 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:36:03.876 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:36:03.876 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 19:36:03.926 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:36:08.692 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/9
2020-04-10 19:36:08.693 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:36:08.694 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:36:08.695 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 9]
2020-04-10 19:36:08.727 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:36:26.835 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:36:26.835 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:36:26.845 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:36:26.845 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:36:26.875 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:36:30.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:36:30.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:36:30.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:36:30.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:36:30.345 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:36:38.627 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/tags/1
2020-04-10 19:36:38.627 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:36:38.627 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TagShowController.types
2020-04-10 19:36:38.627 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 1]
2020-04-10 19:36:38.647 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:tags
2020-04-10 19:36:49.817 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 19:36:49.817 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:36:49.817 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:36:49.817 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 19:36:49.937 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:37:03.125 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:37:03.125 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:37:03.125 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:37:03.125 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:37:03.165 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:37:06.774 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 19:37:06.774 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:37:06.774 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:37:06.774 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 19:37:06.794 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:40:39.700 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 19:40:39.710 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:40:39.710 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:40:39.710 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 19:40:39.780 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:40:40.716 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 19:40:40.717 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:40:40.718 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 19:40:40.718 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 19:40:40.792 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 19:42:32.037 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 19:42:32.037 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:42:32.037 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 19:42:32.037 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 19:42:32.087 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 19:42:33.582 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 19:42:33.583 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:42:33.584 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 19:42:33.584 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 19:42:33.612 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 19:42:49.544 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:42:49.544 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:42:49.544 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:42:49.544 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:42:49.584 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:43:39.446 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:43:39.456 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:43:39.456 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:43:39.456 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:43:39.496 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:44:14.430 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:44:14.430 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:44:14.430 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:44:14.430 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:44:14.470 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:44:35.683 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/search
2020-04-10 19:44:35.683 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:44:35.683 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.search
2020-04-10 19:44:35.683 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], sp, {}]
2020-04-10 19:44:35.703 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:search
2020-04-10 19:47:44.989 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/7
2020-04-10 19:47:44.989 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:47:44.989 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 19:47:44.989 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 3, sort: updateTime: DESC], {}, 7]
2020-04-10 19:47:45.019 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 19:47:59.871 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:47:59.871 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:47:59.871 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:47:59.871 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:47:59.911 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:52:39.974 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:52:39.974 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:52:39.974 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:52:39.974 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:52:40.034 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 19:53:15.569 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 19:53:15.569 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 19:53:15.569 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 19:53:15.569 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 19:53:15.609 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 20:45:51.822 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin
2020-04-10 20:45:51.822 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 20:45:51.822 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.loginPage
2020-04-10 20:45:51.822 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[]
2020-04-10 20:45:51.842 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/login
2020-04-10 20:45:57.443 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/login
2020-04-10 20:45:57.453 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 20:45:57.453 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.login
2020-04-10 20:45:57.453 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[liujiaxu, ljx123, org.apache.catalina.session.StandardSessionFacade@ea89af, {}]
2020-04-10 20:45:57.473 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/index
2020-04-10 20:46:04.083 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 20:46:04.083 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 20:46:04.083 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 20:46:04.083 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 20:46:04.143 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 20:46:07.292 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 20:46:07.292 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 20:46:07.292 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 20:46:07.292 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 20:46:07.312 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 20:53:10.023 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 20:53:10.023 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 20:53:10.023 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 20:53:10.023 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 20:53:10.073 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 20:53:44.793 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 20:53:44.793 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 20:53:44.793 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 20:53:44.793 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 20:53:44.813 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:14:27.930 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:14:27.930 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:14:27.930 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:14:27.930 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:14:27.960 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:15:09.162 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:15:09.162 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:15:09.162 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:15:09.162 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:15:09.172 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:18:02.173 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:18:02.173 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:18:02.173 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:18:02.173 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:18:02.203 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:23:42.506 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:23:42.506 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:23:42.506 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:23:42.506 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:23:42.556 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:23:44.399 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:23:44.409 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:23:44.409 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:23:44.409 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:23:44.429 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:24:56.536 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:24:56.536 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:24:56.536 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:24:56.536 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:24:56.556 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:25:13.046 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:25:13.046 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:25:13.046 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:25:13.046 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:25:13.076 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:26:32.908 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:26:32.908 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:26:32.908 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:26:32.908 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:26:32.948 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:29:26.344 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/types
2020-04-10 21:29:26.354 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:26.354 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TypeController.types
2020-04-10 21:29:26.354 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: id: DESC], {}]
2020-04-10 21:29:26.424 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/types
2020-04-10 21:29:29.466 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/types/input
2020-04-10 21:29:29.466 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:29.466 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TypeController.input
2020-04-10 21:29:29.466 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:29:29.466 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/types-input
2020-04-10 21:29:34.905 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/types
2020-04-10 21:29:34.915 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:34.915 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TypeController.post
2020-04-10 21:29:34.915 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Type(name=java, blogs=[]), org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]
2020-04-10 21:29:35.055 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/types
2020-04-10 21:29:35.155 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/types
2020-04-10 21:29:35.155 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:35.155 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TypeController.types
2020-04-10 21:29:35.155 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: id: DESC], {message=新增成功}]
2020-04-10 21:29:35.165 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/types
2020-04-10 21:29:36.345 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/tags
2020-04-10 21:29:36.345 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:36.345 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TagController.tags
2020-04-10 21:29:36.345 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: id: DESC], {}]
2020-04-10 21:29:36.375 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/tags
2020-04-10 21:29:39.395 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/tags/input
2020-04-10 21:29:39.405 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:39.405 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TagController.input
2020-04-10 21:29:39.405 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:29:39.405 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/tags-input
2020-04-10 21:29:49.415 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/tags
2020-04-10 21:29:49.415 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:49.415 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TagController.post
2020-04-10 21:29:49.415 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Tag(name=java, blogs=[]), org.springframework.validation.BeanPropertyBindingResult: 0 errors, {}]
2020-04-10 21:29:49.445 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/tags
2020-04-10 21:29:49.455 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/tags
2020-04-10 21:29:49.455 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:29:49.465 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TagController.tags
2020-04-10 21:29:49.465 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: id: DESC], {message=新增成功}]
2020-04-10 21:29:49.475 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/tags
2020-04-10 21:30:13.274 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 21:30:13.274 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:30:13.274 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 21:30:13.284 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 21:30:13.294 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:31:15.745 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:31:15.745 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:31:15.745 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 21:31:15.745 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=还在重复写空指针检查代码？考虑使用 Optional 吧！, content=
  <h2 id="一前言">一、前言</h2>

<p>如果要给 Java 所有异常弄个榜单，我会选择将 <code class="language-plaintext highlighter-rouge">NullPointerException</code> 放在榜首。这个异常潜伏在代码中，就像个遥控炸弹，不知道什么时候这个按钮会被突然按下（传入 null 对象）。</p>

<!--more-->

<p>还记得刚入行程序员的时候，三天两头碰到空指针异常引发的 Bug，解决完一个，又在另一处碰到。那时候师兄就教我，不要相信任何『对象』，特别是别人给你的，这些地方都加上判断。于是代码通常为会变成下面这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3</pre></td><td class="code"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">obj</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
    <span class="c1">// do something</span>
<span class="o">}</span>
</code></pre></td></tr></tbody></table></div></div>

<p>有了这个防御之后，虽然不用再担心空指针异常，但是过多的判断语句使得代码变得臃肿。</p>

<p>假设我们存在如下对象关系</p>

<p><a href="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Staff-2c97dabd.png" class="fancybox fancybox.image" rel="group"><img src="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Staff-2c97dabd.png" alt=""></a></p>

<p>原本为了获取图中的 <code class="language-plaintext highlighter-rouge">name</code> 属性，原本一句代码就可以轻松完成。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Staff</span> <span class="n">staff</span><span class="o">=..;</span>
<span class="n">staff</span><span class="o">.</span><span class="na">getDepartment</span><span class="o">().</span><span class="na">getCompany</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</code></pre></td></tr></tbody></table></div></div>

<p>但是很不幸，为了代码的安全性，我们不得不加入空指针判断代码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Staff</span> <span class="n">staff</span><span class="o">=..;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">staff</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Department</span> <span class="n">department</span> <span class="o">=</span> <span class="n">staff</span><span class="o">.</span><span class="na">getDepartment</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">department</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Company</span> <span class="n">company</span> <span class="o">=</span> <span class="n">department</span><span class="o">.</span><span class="na">getCompany</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">company</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">company</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="k">return</span> <span class="s">"Unknown"</span><span class="o">;</span>
</code></pre></td></tr></tbody></table></div></div>

<blockquote>
  <p>当其中对象为 <code class="language-plaintext highlighter-rouge">null</code> 时，可以返回默认值，如上所示。也可以直接抛出其他异常快速失败。</p>
</blockquote>

<p>虽然上面代码变得更加安全，但是过多嵌套 if 语句降低代码整体可读性，提高复杂度。</p>

<p>所幸 Java 8 引入引入一个新类 <code class="language-plaintext highlighter-rouge">Java.util.Optional&lt;T&gt;</code>,依靠 Optional 类提供 API，我们可以写出既安全又具有阅读性的代码。</p>

<blockquote>
  <p>还在使用 JDK 6 ？那你也别急着关闭这篇文章。可以考虑使用 Guava Optional。不过需要注意的是，Guava Optional API 与 JDK 存在差异，以下以 JDK8 Optional 为例。</p>
</blockquote>

<h2 id="二optional-api">二、Optional API</h2>

<h3 id="21optionalof-与-optionalofnullable">2.1、Optional#of 与 Optional#ofNullable</h3>

<p>Optional<t> 本质是一个容器，需要我们将对象实例传入该容器中。`Optional` 的构造方法为 `private`，无法直接使用 new 构建对象，只能使用 `Optional` 提供的静态方法创建。</t></p>

<p><code class="language-plaintext highlighter-rouge">Optional</code> 三个创建方法如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Optional.of(obj)</code>,如果对象为 null，将会抛出 NPE。</li>
  <li><code class="language-plaintext highlighter-rouge">Optional.ofNullable(obj)</code>,如果对象为 null,将会创建不包含值的 <strong>empty</strong> <code class="language-plaintext highlighter-rouge">Optional</code> 对象实例。</li>
  <li><code class="language-plaintext highlighter-rouge">Optional.empty()</code> 等同于 <code class="language-plaintext highlighter-rouge">Optional.ofNullable(null)</code></li>
</ul>

<p><a href="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Optionalcompare-293804bc.png" class="fancybox fancybox.image" rel="group"><img src="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Optionalcompare-293804bc.png" alt=""></a></p>

<p>只有在确定对象不会为 null 的情况使用 <code class="language-plaintext highlighter-rouge">Optional#of</code>，否则建议使用 <code class="language-plaintext highlighter-rouge">Optional#ofNullable</code>方法。</p>

<h3 id="22optionalget-与-optionalispresent">2.2、Optional#get 与 Optional#isPresent</h3>

<p>对象实例存入 <code class="language-plaintext highlighter-rouge">Optional</code> 容器中之后，最后我们需要从中取出。<code class="language-plaintext highlighter-rouge">Optional#get</code> 方法用于取出内部对象实例，不过需要注意的是，如果是 <strong>empty  Optional</strong> 实例，由于容器内没有任何对象实例，使用 <code class="language-plaintext highlighter-rouge">get</code> 方法将会抛出 <code class="language-plaintext highlighter-rouge">NoSuchElementException</code> 异常。</p>

<p>为了防止异常抛出，可以使用 <code class="language-plaintext highlighter-rouge">Optional#isPresent</code> 。这个方法将会判断内部是否存在对象实例，若存在则返回 true。</p>

<p>示例代码如下:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4<br>5</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">optCompany</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">company</span><span class="o">);</span>
<span class="c1">// 与直接使用空指针判断没有任何区别</span>
<span class="k">if</span> <span class="o">(</span><span class="n">optCompany</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">optCompany</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></td></tr></tbody></table></div></div>

<p>仔细对比，可以发现上面用法与空指针检查并无差别。刚接触到 <code class="language-plaintext highlighter-rouge">Optional</code> ，看到很多文章介绍这个用法，那时候一直很疑惑，这个解决方案不是更加麻烦？</p>

<p>后来接触到 <code class="language-plaintext highlighter-rouge">Optional</code> 其他 API，我才发现这个类真正有意义是下面这些 API。如果使用过 Java8 Stream 的 API，下面 <code class="language-plaintext highlighter-rouge">Optional</code> API 你将会很熟悉。</p>

<h3 id="23optionalifpresent">2.3、Optional#ifPresent</h3>

<p>通常情况下，空指针检查之后，如果对象不为空，将会进行下一步处理，比如打印该对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Company</span> <span class="n">company</span> <span class="o">=</span> <span class="o">...;</span>
<span class="k">if</span><span class="o">(</span><span class="n">company</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">company</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></td></tr></tbody></table></div></div>

<p>上面代码我们可以使用 <code class="language-plaintext highlighter-rouge">Optional#ifPresent</code> 代替，如下所示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">optCompany</span> <span class="o">=</span> <span class="o">...;</span>
<span class="n">optCompany</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></td></tr></tbody></table></div></div>

<p>使用  <code class="language-plaintext highlighter-rouge">ifPresent</code> 方法，我们不用再显示的进行检查，如果 <code class="language-plaintext highlighter-rouge">Optional</code> 为空，上面例子将不再输出。</p>

<h3 id="24optionalfilter">2.4、Optional#filter</h3>

<p>有时候我们需要某些属性满足一定条件，才进行下一步动作。这里假设我们当 Company name 属性为 Apple，打印输出 ok。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3</pre></td><td class="code"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">company</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="s">"Apple"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">company</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ok"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></td></tr></tbody></table></div></div>

<p>下面使用 <code class="language-plaintext highlighter-rouge">Optional#filter</code> 结合  <code class="language-plaintext highlighter-rouge">Optional#ifPresent</code>  重写上面的代码，如下所示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">companyOpt</span><span class="o">=...;</span>
<span class="n">companyOpt</span>
        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">company</span> <span class="o">-&gt;</span> <span class="s">"Apple"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">company</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span>
        <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">company</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ok"</span><span class="o">));</span>
</code></pre></td></tr></tbody></table></div></div>

<p><code class="language-plaintext highlighter-rouge">filter</code> 方法将会判断对象是否符合条件。如果不符合条件，将会返回一个空的 <code class="language-plaintext highlighter-rouge">Optional</code> 。</p>

<h3 id="25optionalorelse-与-optionalorelsethrow">2.5、Optional#orElse 与 Optional#orElseThrow</h3>

<p>当一个对象为 null 时，业务上通常可以设置一个默认值，从而使流程继续下去。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1</pre></td><td class="code"><pre class="highlight"><code><span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">company</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">company</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">:</span> <span class="s">"Unknown"</span><span class="o">;</span>
</code></pre></td></tr></tbody></table></div></div>

<p>或者抛出一个内部异常，记录失败原因，快速失败。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3</pre></td><td class="code"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">company</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></td></tr></tbody></table></div></div>

<p><code class="language-plaintext highlighter-rouge">Optional</code> 类提供两个方法 <code class="language-plaintext highlighter-rouge">orElse</code> 与 <code class="language-plaintext highlighter-rouge">orElseThrow</code> ，可以方便完成上面转化。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4<br>5</pre></td><td class="code"><pre class="highlight"><code><span class="c1">// 设置默认值</span>
<span class="nc">String</span> <span class="n">name</span><span class="o">=</span><span class="n">companyOpt</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"Unknown"</span><span class="o">)).</span><span class="na">getName</span><span class="o">();</span>

<span class="c1">// 抛出异常</span>
<span class="nc">String</span> <span class="n">name</span><span class="o">=</span><span class="n">companyOpt</span><span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">RuntimeException:</span><span class="o">:</span><span class="k">new</span><span class="o">).</span><span class="na">getName</span><span class="o">();</span>
</code></pre></td></tr></tbody></table></div></div>

<p>如果 <code class="language-plaintext highlighter-rouge">Optional</code> 为空，提供默认值或抛出异常。</p>

<h3 id="26optionalmap-与-optionalflatmap">2.6、Optional#map 与 Optional#flatMap</h3>

<p>熟悉 Java8 Stream 同学的应该了解，<code class="language-plaintext highlighter-rouge">Stream#map</code> 方法可以将当前对象转化为另外一个对象， <code class="language-plaintext highlighter-rouge">Optional#map</code> 方法也与之类似。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">optCompany</span> <span class="o">=</span> <span class="o">...;</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">nameopt</span> <span class="o">=</span> <span class="n">optCompany</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Company:</span><span class="o">:</span><span class="n">getName</span><span class="o">);</span>
</code></pre></td></tr></tbody></table></div></div>

<p>map 方法可以将原先 <code class="language-plaintext highlighter-rouge">Optional&lt;Company&gt;</code> 转变成 <code class="language-plaintext highlighter-rouge">Optional&lt;String&gt;</code> ，此时 Optional 内部对象变成 String 类型。如果转化之前 <code class="language-plaintext highlighter-rouge">Optional</code> 对象为空，则什么也不会发生。</p>

<p>另外 Optional 还有一个 <code class="language-plaintext highlighter-rouge">flatMap</code> 方法，两者区别见下图。</p>

<p><a href="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/mapvsflatmap-2b57bab4.png" class="fancybox fancybox.image" rel="group"><img src="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/mapvsflatmap-2b57bab4.png" alt=""></a></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Department#getCompany </code>返回对象为 <code class="language-plaintext highlighter-rouge">Optional&lt;Company&gt;</code></p>
</blockquote>

<h2 id="三代码重构">三、代码重构</h2>

<p>上面我们学习了 <code class="language-plaintext highlighter-rouge">Optional</code> 类主要 API ，下面我们使用 <code class="language-plaintext highlighter-rouge">Optional</code>  重构文章刚开头的代码。为了方便读者对比，将上面的代码复制了下来。</p>

<p>代码重构前：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</pre></td><td class="code"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">staff</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Department</span> <span class="n">department</span> <span class="o">=</span> <span class="n">staff</span><span class="o">.</span><span class="na">getDepartment</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">department</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Company</span> <span class="n">company</span> <span class="o">=</span> <span class="n">department</span><span class="o">.</span><span class="na">getCompany</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">company</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">company</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="k">return</span> <span class="s">"Unknown"</span><span class="o">;</span>
</code></pre></td></tr></tbody></table></div></div>

<p>首先我们需要将 <code class="language-plaintext highlighter-rouge">Staff </code>，<code class="language-plaintext highlighter-rouge">Department</code>  修改 getter 方法返回结果类型改成 <code class="language-plaintext highlighter-rouge">Optional</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24</pre></td><td class="code"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Staff</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Department</span> <span class="n">department</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Department</span><span class="o">&gt;</span> <span class="nf">getDepartment</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">department</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Department</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Company</span> <span class="n">company</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="nf">getCompany</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">company</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>

</code></pre></td></tr></tbody></table></div></div>

<p>然后综合使用 Optional API 重构代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><table style="margin: 0px"><tbody><tr><td class="gutter"><pre>1<br>2<br>3<br>4<br>5<br>6</pre></td><td class="code"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Staff</span><span class="o">&gt;</span> <span class="n">staffOpt</span> <span class="o">=...;</span>
<span class="n">staffOpt</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Staff:</span><span class="o">:</span><span class="n">getDepartment</span><span class="o">)</span>
        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Department:</span><span class="o">:</span><span class="n">getCompany</span><span class="o">)</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Company:</span><span class="o">:</span><span class="n">getName</span><span class="o">)</span>
        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"Unknown"</span><span class="o">);</span>
</code></pre></td></tr></tbody></table></div></div>

<p>可以看到重构之后代码利用 <code class="language-plaintext highlighter-rouge">Optional</code>  的 Fluent Interface，以及 lambda 表达式，使代码更加流畅连贯，并且提高代码整体可读性。</p>

<h2 id="四帮助文章">四、帮助文章</h2>

<p>1、<a href="https://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html">Tired of Null Pointer Exceptions? Consider Using Java SE 8’s Optional!</a><br>
3、<a href="https://community.oracle.com/docs/DOC-991686">Optionals: Patterns and Good Practices</a><br>
3、Java8 in Action</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=true, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=如果要给 Java 所有异常弄个榜单，我会选择将 NullPointerException 放在榜首。这个异常潜伏在代码中，就像个遥控炸弹，不知道什么时候这个按钮会被突然按下（传入 null 对象）), {}, org.apache.catalina.session.StandardSessionFacade@ea89af]
2020-04-10 21:31:15.875 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 21:31:15.895 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:31:15.895 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:31:15.895 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:31:15.895 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:31:15.925 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:31:20.104 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:31:20.114 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:31:20.114 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:31:20.114 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:31:20.174 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:31:28.894 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 21:31:28.894 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:31:28.894 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 21:31:28.894 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:31:28.924 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 21:31:29.844 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 21:31:29.844 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:31:29.844 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 21:31:29.844 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:31:29.854 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 21:32:23.236 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/11/input
2020-04-10 21:32:23.236 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:32:23.236 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 21:32:23.236 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:32:23.266 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:35:43.391 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/11/input
2020-04-10 21:35:43.391 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:35:43.391 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 21:35:43.391 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:35:43.451 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:42:03.680 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/11/input
2020-04-10 21:42:03.680 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:42:03.680 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 21:42:03.690 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:42:03.740 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:49:25.373 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:49:25.373 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:49:25.373 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 21:49:25.383 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=还在重复写空指针检查代码？考虑使用 Optional 吧！, content=  <h2 id="一前言">一、前言</h2>

<p>如果要给 Java 所有异常弄个榜单，我会选择将 <code class="language-plaintext highlighter-rouge">NullPointerException</code> 放在榜首。这个异常潜伏在代码中，就像个遥控炸弹，不知道什么时候这个按钮会被突然按下（传入 null 对象）。</p>

<!--more-->

<p>还记得刚入行程序员的时候，三天两头碰到空指针异常引发的 Bug，解决完一个，又在另一处碰到。那时候师兄就教我，不要相信任何『对象』，特别是别人给你的，这些地方都加上判断。于是代码通常为会变成下面这样：</p>

```java
if(obj!=null){
    // do something
}

```

<p>有了这个防御之后，虽然不用再担心空指针异常，但是过多的判断语句使得代码变得臃肿。</p>

<p>假设我们存在如下对象关系</p>

<p><a href="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Staff-2c97dabd.png" class="fancybox fancybox.image" rel="group"><img src="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Staff-2c97dabd.png" alt=""></a></p>

<p>原本为了获取图中的 <code class="language-plaintext highlighter-rouge">name</code> 属性，原本一句代码就可以轻松完成。</p>

```java
Staff staff=..;
staff.getDepartment().getCompany().getName();

```

<p>但是很不幸，为了代码的安全性，我们不得不加入空指针判断代码。</p>

```java
Staff staff=..;
if (staff != null) {
    Department department = staff.getDepartment();
    if (department != null) {
        Company company = department.getCompany();
        if (company != null) {
            return company.getName();
        }
    }
}
return "Unknown";

```


<blockquote>
  <p>当其中对象为 <code class="language-plaintext highlighter-rouge">null</code> 时，可以返回默认值，如上所示。也可以直接抛出其他异常快速失败。</p>
</blockquote>

<p>虽然上面代码变得更加安全，但是过多嵌套 if 语句降低代码整体可读性，提高复杂度。</p>

<p>所幸 Java 8 引入引入一个新类 <code class="language-plaintext highlighter-rouge">Java.util.Optional&lt;T&gt;</code>,依靠 Optional 类提供 API，我们可以写出既安全又具有阅读性的代码。</p>

<blockquote>
  <p>还在使用 JDK 6 ？那你也别急着关闭这篇文章。可以考虑使用 Guava Optional。不过需要注意的是，Guava Optional API 与 JDK 存在差异，以下以 JDK8 Optional 为例。</p>
</blockquote>

<h2 id="二optional-api">二、Optional API</h2>

<h3 id="21optionalof-与-optionalofnullable">2.1、Optional#of 与 Optional#ofNullable</h3>

<p>Optional<t> 本质是一个容器，需要我们将对象实例传入该容器中。`Optional` 的构造方法为 `private`，无法直接使用 new 构建对象，只能使用 `Optional` 提供的静态方法创建。</t></p>

<p><code class="language-plaintext highlighter-rouge">Optional</code> 三个创建方法如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Optional.of(obj)</code>,如果对象为 null，将会抛出 NPE。</li>
  <li><code class="language-plaintext highlighter-rouge">Optional.ofNullable(obj)</code>,如果对象为 null,将会创建不包含值的 <strong>empty</strong> <code class="language-plaintext highlighter-rouge">Optional</code> 对象实例。</li>
  <li><code class="language-plaintext highlighter-rouge">Optional.empty()</code> 等同于 <code class="language-plaintext highlighter-rouge">Optional.ofNullable(null)</code></li>
</ul>

<p><a href="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Optionalcompare-293804bc.png" class="fancybox fancybox.image" rel="group"><img src="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/Optionalcompare-293804bc.png" alt=""></a></p>

<p>只有在确定对象不会为 null 的情况使用 <code class="language-plaintext highlighter-rouge">Optional#of</code>，否则建议使用 <code class="language-plaintext highlighter-rouge">Optional#ofNullable</code>方法。</p>

<h3 id="22optionalget-与-optionalispresent">2.2、Optional#get 与 Optional#isPresent</h3>

<p>对象实例存入 <code class="language-plaintext highlighter-rouge">Optional</code> 容器中之后，最后我们需要从中取出。<code class="language-plaintext highlighter-rouge">Optional#get</code> 方法用于取出内部对象实例，不过需要注意的是，如果是 <strong>empty  Optional</strong> 实例，由于容器内没有任何对象实例，使用 <code class="language-plaintext highlighter-rouge">get</code> 方法将会抛出 <code class="language-plaintext highlighter-rouge">NoSuchElementException</code> 异常。</p>

<p>为了防止异常抛出，可以使用 <code class="language-plaintext highlighter-rouge">Optional#isPresent</code> 。这个方法将会判断内部是否存在对象实例，若存在则返回 true。</p>

<p>示例代码如下:</p>

```java
Optional<Company> optCompany = Optional.ofNullable(company);
// 与直接使用空指针判断没有任何区别
if (optCompany.isPresent()) {
    System.out.println(optCompany.get().getName());
}

```

<p>仔细对比，可以发现上面用法与空指针检查并无差别。刚接触到 <code class="language-plaintext highlighter-rouge">Optional</code> ，看到很多文章介绍这个用法，那时候一直很疑惑，这个解决方案不是更加麻烦？</p>

<p>后来接触到 <code class="language-plaintext highlighter-rouge">Optional</code> 其他 API，我才发现这个类真正有意义是下面这些 API。如果使用过 Java8 Stream 的 API，下面 <code class="language-plaintext highlighter-rouge">Optional</code> API 你将会很熟悉。</p>

<h3 id="23optionalifpresent">2.3、Optional#ifPresent</h3>

<p>通常情况下，空指针检查之后，如果对象不为空，将会进行下一步处理，比如打印该对象。</p>

```java
Company company = ...;
if(company!=null){
    System.out.println(company);
}

```

<p>上面代码我们可以使用 <code class="language-plaintext highlighter-rouge">Optional#ifPresent</code> 代替，如下所示：</p>

```java
Optional<Company> optCompany = ...;
optCompany.ifPresent(System.out::println);

```

<p>使用  <code class="language-plaintext highlighter-rouge">ifPresent</code> 方法，我们不用再显示的进行检查，如果 <code class="language-plaintext highlighter-rouge">Optional</code> 为空，上面例子将不再输出。</p>

<h3 id="24optionalfilter">2.4、Optional#filter</h3>

<p>有时候我们需要某些属性满足一定条件，才进行下一步动作。这里假设我们当 Company name 属性为 Apple，打印输出 ok。</p>

```java
if (company != null && "Apple".equals(company.getName())) {
    System.out.println("ok");
}

```

<p>下面使用 <code class="language-plaintext highlighter-rouge">Optional#filter</code> 结合  <code class="language-plaintext highlighter-rouge">Optional#ifPresent</code>  重写上面的代码，如下所示：</p>

```java
Optional<Company> companyOpt=...;
companyOpt
        .filter(company -> "Apple".equals(company.getName()))
        .ifPresent(company -> System.out.println("ok"));

```

<p><code class="language-plaintext highlighter-rouge">filter</code> 方法将会判断对象是否符合条件。如果不符合条件，将会返回一个空的 <code class="language-plaintext highlighter-rouge">Optional</code> 。</p>

<h3 id="25optionalorelse-与-optionalorelsethrow">2.5、Optional#orElse 与 Optional#orElseThrow</h3>

<p>当一个对象为 null 时，业务上通常可以设置一个默认值，从而使流程继续下去。</p>

```java
String name = company != null ? company.getName() : "Unknown";

```

<p>或者抛出一个内部异常，记录失败原因，快速失败。</p>

```java
if (company.getName() == null) {
    throw new RuntimeException();
}

```

<p><code class="language-plaintext highlighter-rouge">Optional</code> 类提供两个方法 <code class="language-plaintext highlighter-rouge">orElse</code> 与 <code class="language-plaintext highlighter-rouge">orElseThrow</code> ，可以方便完成上面转化。</p>

```java
// 设置默认值
String name=companyOpt.orElse(new Company("Unknown")).getName();

// 抛出异常
String name=companyOpt.orElseThrow(RuntimeException::new).getName();

```

<p>如果 <code class="language-plaintext highlighter-rouge">Optional</code> 为空，提供默认值或抛出异常。</p>

<h3 id="26optionalmap-与-optionalflatmap">2.6、Optional#map 与 Optional#flatMap</h3>

<p>熟悉 Java8 Stream 同学的应该了解，<code class="language-plaintext highlighter-rouge">Stream#map</code> 方法可以将当前对象转化为另外一个对象， <code class="language-plaintext highlighter-rouge">Optional#map</code> 方法也与之类似。</p>

```java
Optional<Company> optCompany = ...;
Optional<String> nameopt = optCompany.map(Company::getName);

```

<p>map 方法可以将原先 <code class="language-plaintext highlighter-rouge">Optional&lt;Company&gt;</code> 转变成 <code class="language-plaintext highlighter-rouge">Optional&lt;String&gt;</code> ，此时 Optional 内部对象变成 String 类型。如果转化之前 <code class="language-plaintext highlighter-rouge">Optional</code> 对象为空，则什么也不会发生。</p>

<p>另外 Optional 还有一个 <code class="language-plaintext highlighter-rouge">flatMap</code> 方法，两者区别见下图。</p>

<p><a href="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/mapvsflatmap-2b57bab4.png" class="fancybox fancybox.image" rel="group"><img src="http://www.justdojava.com/assets/images/2019/java/image_andyxh/20191013/mapvsflatmap-2b57bab4.png" alt=""></a></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Department#getCompany </code>返回对象为 <code class="language-plaintext highlighter-rouge">Optional&lt;Company&gt;</code></p>
</blockquote>

<h2 id="三代码重构">三、代码重构</h2>

<p>上面我们学习了 <code class="language-plaintext highlighter-rouge">Optional</code> 类主要 API ，下面我们使用 <code class="language-plaintext highlighter-rouge">Optional</code>  重构文章刚开头的代码。为了方便读者对比，将上面的代码复制了下来。</p>

<p>代码重构前：</p>

```java
if (staff != null) {
    Department department = staff.getDepartment();
    if (department != null) {
        Company company = department.getCompany();
        if (company != null) {
            return company.getName();
        }
    }
}
return "Unknown";

```

<p>首先我们需要将 <code class="language-plaintext highlighter-rouge">Staff </code>，<code class="language-plaintext highlighter-rouge">Department</code>  修改 getter 方法返回结果类型改成 <code class="language-plaintext highlighter-rouge">Optional</code>。</p>

```java
public class Staff {
    private Department department;
    public Optional<Department> getDepartment() {
        return Optional.ofNullable(department);
    }
    ...
}
public class Department {

    private Company company;
    public Optional<Company> getCompany() {
        return Optional.ofNullable(company);
    }
    ...
}

public class Company {
    private String name;
    public String getName() {
        return name;
    }
    ...
}

```

<p>然后综合使用 Optional API 重构代码如下：</p>

```java
Optional<Staff> staffOpt =...;
staffOpt
        .flatMap(Staff::getDepartment)
        .flatMap(Department::getCompany)
        .map(Company::getName)
        .orElse("Unknown");

```

<p>可以看到重构之后代码利用 <code class="language-plaintext highlighter-rouge">Optional</code>  的 Fluent Interface，以及 lambda 表达式，使代码更加流畅连贯，并且提高代码整体可读性。</p>

<h2 id="四帮助文章">四、帮助文章</h2>

<p>1、<a href="https://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html">Tired of Null Pointer Exceptions? Consider Using Java SE 8’s Optional!</a><br>
3、<a href="https://community.oracle.com/docs/DOC-991686">Optionals: Patterns and Good Practices</a><br>
3、Java8 in Action</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=如果要给 Java 所有异常弄个榜单，我会选择将 NullPointerException 放在榜首。这个异常潜伏在代码中，就像个遥控炸弹，不知道什么时候这个按钮会被突然按下（传入 null 对象）), {}, org.apache.catalina.session.StandardSessionFacade@ea89af]
2020-04-10 21:49:25.463 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 21:49:25.483 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:49:25.483 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:49:25.483 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:49:25.483 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:49:25.513 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:49:28.573 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:49:28.573 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:49:28.573 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:49:28.573 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:49:28.623 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:49:36.343 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 21:49:36.343 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:49:36.343 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 21:49:36.343 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:49:36.363 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 21:49:37.213 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 21:49:37.213 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:49:37.213 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 21:49:37.213 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:49:37.213 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 21:51:07.703 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/tags/-1
2020-04-10 21:51:07.703 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:51:07.703 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TagShowController.types
2020-04-10 21:51:07.703 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 21:51:07.743 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:tags
2020-04-10 21:51:11.668 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 21:51:11.669 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:51:11.670 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 21:51:11.674 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 21:51:11.716 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 21:51:14.724 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:51:14.724 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:51:14.724 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:51:14.724 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:51:14.754 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:52:31.338 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 21:52:31.338 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:52:31.338 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 21:52:31.338 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 21:52:31.378 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 21:52:36.358 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/tags/-1
2020-04-10 21:52:36.358 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:52:36.358 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TagShowController.types
2020-04-10 21:52:36.358 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 21:52:36.388 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:tags
2020-04-10 21:53:57.899 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:53:57.899 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:53:57.899 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:53:57.899 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:53:57.949 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:54:14.669 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:54:14.669 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:14.669 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:54:14.669 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:54:14.689 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:54:19.639 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/2/input
2020-04-10 21:54:19.639 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:19.639 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 21:54:19.639 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 21:54:19.669 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:54:34.469 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:54:34.469 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:34.469 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 21:54:34.479 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title=SpringBoot中.properties重点配置和pom.xml中依赖总结, content=#### application.properties和yml格式转换 
 [格式在线转换工具 ](https://www.toyaml.com/index.html)

**yml格式注意点：**
  大小写敏感
  使用缩进表示层级关系
  缩进时不允许使用Tab键，只允许使用空格
  缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
  kye-value的关系使用冒号代表，格式为key: value，
  注意冒号后面要加一个空格，不然解析不了
  其中#表示注释，从这个字符到行尾，都会被解析器忽略

**application.properties**

#### 指定tomcat的端口号，编码格式

```java
 sever.port=8088
 server.tomcat.uri-encoding=UTF-8
```

#### 覆盖默认静态资源配置

```java
spring.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/static/**  默认是/**  添加路径规则时不要忘记 /** 
```
   
> [SpringBoot静态资源访问笔记](https://blog.csdn.net/YOUNGljx/article/details/104687409)


#### 配置url项目访问路径

**注意点 参考** [Springboot 添加server.servlet.context-path相关使用总结](https://blog.csdn.net/qq_38322527/article/details/101691785) 

```java  
 #在springboot1.x中如下配置       #在springboot2.x中如下配置
 server.context-path=/项目名     server.servlet.context-path=/项目      
```

#### 修改进入SpringMVC DispatcherServlet的规则路径
  
```java
在springboot2.x中，这个配置是默认关闭的 低版本直接配置
  spring.mvc.pathmatch.use-suffix-pattern=true
  server.servlet.path=*.html 或*.do 或 *.action
```
    
##### Java配置方式 

```java
@Configuration
public class MyWebMvcConfigurer implements WebMvcConfigurer {
    @Override
    public void configurePathMatch(PathMatchConfigurer configurer) {
        //开启路径后缀匹配
        configurer.setUseRegisteredSuffixPatternMatch(true);
    }
}


@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
    /**
     * 设置匹配*.action后缀请求
     * @param dispatcherServlet
     * @return
     */
    @Bean
    public ServletRegistrationBean servletRegistrationBean(DispatcherServlet dispatcherServlet) {
        ServletRegistrationBean<DispatcherServlet> servletServletRegistrationBean = new ServletRegistrationBean<>(dispatcherServlet);
        servletServletRegistrationBean.addUrlMappings("*.action");
        return servletServletRegistrationBean;
    }
}
```

#### 设置日志级别 默认的日志框架 Logback
   
```java
#root日志以WARN级别输出
 logging.level.root=WARN    
#springframework.web日志以DEBUG级别输出
 logging.level.org.springframework.web=DEBUG
 
# 在当前磁盘的根路径下创建 spring 文件夹和里面的 log 文件夹；使用 spring.log 作为默认文件
logging.path=/spring/log
# 指定完整的文件名
#logging.file=D:/springboot.log

#logging.file.path=指定路径和文件名

#  在控制台输出的日志的格式
logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
# 指定文件中日志输出的格式
logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n
```
>  [springboot使用日志笔记](https://blog.csdn.net/YOUNGljx/article/details/105074630)

#### 数据源相关配置
   
 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源
```java 
  <!-- 引入mysql数据库连接驱动 -->
   <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
   </dependency>
    
   #配置数据源等相关 时区时间是本地时间
   spring.datasource.url=jdbc:mysql://localhost:3306/mysql1
   ?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8
    
   #注意新版本driver使用：com.mysql.cj.jdbc.Driver 否则会异常
   spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    
   spring.datasource.username=root
   spring.datasource.password=qwert
   spring.datasource.tomcat.initial-size=10
   spring.datasource.tomcat.max-active=20
   spring.datasource.tomcat.max-idle=8
   spring.datasource.tomcat.min-idle=8
```
##### 配置alibaba Druid数据源

 [Spring Boot 自定义数据源 DruidDataSource](https://blog.csdn.net/wangmx1993328/article/details/81865153)
[集成DataSource 与 Druid监控配置](https://www.cnblogs.com/yy3b2007com/p/8763077.html)

   ***未完待续***, firstPicture=http://pic4.zhimg.com/v2-9fa90a3009a4d4fcf1f7f07bef91b176_1200x500.jpg, flag=原创, views=null, appreciation=true, shareStatement=true, commentabled=false, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=1, description=SpringBoot中.properties或.yml重点配置和pom.xml中依赖总结), {}, org.apache.catalina.session.StandardSessionFacade@ea89af]
2020-04-10 21:54:34.489 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 21:54:34.509 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:54:34.509 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:34.509 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:54:34.509 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:54:34.529 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:54:36.429 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:54:36.429 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:36.429 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:54:36.429 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:54:36.479 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:54:50.589 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:54:50.589 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:50.589 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:54:50.589 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:54:50.629 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:54:54.027 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:54:54.029 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:54.031 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:54:54.032 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:54:54.070 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:54:57.768 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:54:57.768 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:54:57.768 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:54:57.768 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 1, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:54:57.798 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:55:03.118 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:55:03.128 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:55:03.128 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:55:03.128 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], {}]
2020-04-10 21:55:03.178 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:55:19.657 [ Thread-5 ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 1823 ] - {dataSource-1} closed
2020-04-10 21:55:22.057 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 50 ] - Starting BlogApplication on THINK-PC with PID 4696 (started by LIUJIAXU in D:\桌面\blog)
2020-04-10 21:55:22.057 [ restartedMain ] - [ DEBUG ] [ com.ljx.blog.BlogApplication : 53 ] - Running with Spring Boot v2.1.13.RELEASE, Spring v5.1.14.RELEASE
2020-04-10 21:55:22.057 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 652 ] - The following profiles are active: dev
2020-04-10 21:55:24.341 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Initializing ProtocolHandler ["http-nio-8082"]
2020-04-10 21:55:24.341 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardService : 173 ] - Starting service [Tomcat]
2020-04-10 21:55:24.341 [ restartedMain ] - [ INFO  ] [ org.apache.catalina.core.StandardEngine : 173 ] - Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-10 21:55:24.400 [ restartedMain ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring embedded WebApplicationContext
2020-04-10 21:55:24.430 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.config.DruidConfig : 45 ] - init Druid Servlet Configuration 
2020-04-10 21:55:25.010 [ restartedMain ] - [ INFO  ] [ org.hibernate.jpa.internal.util.LogHelper : 31 ] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-10 21:55:25.160 [ restartedMain ] - [ INFO  ] [ com.alibaba.druid.pool.DruidDataSource : 928 ] - {dataSource-2} inited
2020-04-10 21:55:25.160 [ restartedMain ] - [ INFO  ] [ org.hibernate.dialect.Dialect : 157 ] - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-10 21:55:27.040 [ restartedMain ] - [ INFO  ] [ o.h.hql.internal.QueryTranslatorFactoryInitiator : 47 ] - HHH000397: Using ASTQueryTranslatorFactory
2020-04-10 21:55:28.840 [ restartedMain ] - [ INFO  ] [ org.apache.coyote.http11.Http11NioProtocol : 173 ] - Starting ProtocolHandler ["http-nio-8082"]
2020-04-10 21:55:28.840 [ restartedMain ] - [ INFO  ] [ com.ljx.blog.BlogApplication : 59 ] - Started BlogApplication in 6.883 seconds (JVM running for 8835.322)
2020-04-10 21:55:28.890 [ http-nio-8082-exec-1 ] - [ INFO  ] [ o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] : 173 ] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-10 21:55:28.910 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:55:28.910 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:55:28.910 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:55:28.910 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 21:55:28.970 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 21:55:28.990 [ http-nio-8082-exec-1 ] - [ WARN  ] [ org.hibernate.orm.deprecation : 662 ] - HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-04-10 21:55:29.020 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 21:55:49.869 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/7
2020-04-10 21:55:49.869 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:55:49.869 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 21:55:49.869 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 21:55:49.919 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 21:55:50.968 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/7
2020-04-10 21:55:50.969 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:55:50.970 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 21:55:50.971 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[7, {}]
2020-04-10 21:55:51.033 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 21:56:02.928 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 21:56:02.928 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:56:02.928 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 21:56:02.928 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:56:02.948 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 21:56:03.848 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 21:56:03.848 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:56:03.848 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 21:56:03.848 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:56:03.848 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 21:56:27.889 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 21:56:27.889 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:56:27.889 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 21:56:27.889 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 21:56:27.909 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 21:57:47.392 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin
2020-04-10 21:57:47.392 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:57:47.392 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.loginPage
2020-04-10 21:57:47.392 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[]
2020-04-10 21:57:47.402 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/login
2020-04-10 21:57:53.252 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/login
2020-04-10 21:57:53.252 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:57:53.262 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.LoginController.login
2020-04-10 21:57:53.262 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[liujiaxu, ljx123, org.apache.catalina.session.StandardSessionFacade@c90b94, {}]
2020-04-10 21:57:53.302 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/index
2020-04-10 21:57:55.651 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:57:55.651 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:57:55.651 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:57:55.661 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:57:55.691 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:58:37.321 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/types
2020-04-10 21:58:37.321 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:58:37.331 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.TypeController.types
2020-04-10 21:58:37.331 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: id: DESC], {}]
2020-04-10 21:58:37.351 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/types
2020-04-10 21:58:47.733 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 21:58:47.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:58:47.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 21:58:47.743 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 21:58:47.763 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 21:58:58.262 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/11/input
2020-04-10 21:58:58.262 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:58:58.262 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 21:58:58.272 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 21:58:58.292 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 21:59:05.332 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 21:59:05.332 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 21:59:05.332 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 21:59:05.332 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 21:59:05.382 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:04:47.523 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 22:04:47.523 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:04:47.523 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:04:47.523 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:04:47.573 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:04:48.463 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 22:04:48.464 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:04:48.465 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:04:48.465 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:04:48.473 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:04:51.444 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 22:04:51.444 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:04:51.445 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:04:51.445 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:04:51.462 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:04:52.519 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 22:04:52.520 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:04:52.522 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:04:52.524 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:04:52.533 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:07:50.027 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 22:07:50.027 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:07:50.027 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:07:50.027 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:07:50.057 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:07:51.495 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 22:07:51.496 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:07:51.496 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:07:51.497 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:07:51.506 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:08:11.102 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 22:08:11.102 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:08:11.102 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:08:11.102 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:08:11.122 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:08:12.252 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 22:08:12.252 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:08:12.252 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:08:12.252 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:08:12.252 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:08:51.873 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 22:08:51.873 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:08:51.873 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:08:51.873 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 22:08:51.893 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:10:12.796 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 22:10:12.796 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:10:12.796 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:10:12.796 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:10:12.836 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:10:13.686 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 22:10:13.686 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:10:13.686 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:10:13.686 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 22:10:13.696 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:17:07.956 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:17:07.956 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:17:07.956 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:17:07.956 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:17:07.986 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:17:10.076 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 22:17:10.086 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:17:10.086 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 22:17:10.086 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 22:17:10.096 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 22:17:55.826 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/input
2020-04-10 22:17:55.826 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:17:55.826 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.input
2020-04-10 22:17:55.826 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[{}]
2020-04-10 22:17:55.846 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 22:21:31.015 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 22:21:31.015 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:21:31.015 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 22:21:31.015 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 22:21:31.085 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:22:19.714 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:22:19.714 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:22:19.714 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 22:22:19.714 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title= Java知识体系最强总结(2020版), content=

<p><strong>本人从事Java开发已多年，平时有记录问题解决方案和总结知识点的习惯，整理了一些有关Java的知识体系，这不是最终版，会不定期的更新</strong>。也算是记录自己在从事编程工作的成长足迹，通过博客可以促进博主与阅读者的共同进步，结交更多志同道合的朋友。<strong>特此分享给大家，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽</strong>。</p>
<p>整理的Java知识体系主要包括<strong>基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链</strong>等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识。<strong>千里之行始于足下</strong>，希望大家根据自己的薄弱点，查缺补漏，根据自己感兴趣的方面多学习，学的精通一点，从现在开始行动起来。<strong>路漫漫其修远兮，吾将上下而求索，不管编程开发的路有多么难走，多么艰辛，我们都将百折不挠，不遗余力地去追求和探索</strong>。</p>
<p><img src="https://img-blog.csdnimg.cn/2019121810082198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly90aGlua3dvbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=""></p>
<p></p><div class="toc"><h3><a name="t0"></a><a name="t0"></a>文章目录</h3><ul><ul><li><a href="#Java_10" rel="nofollow" target="_self">Java面试总结</a></li><li><a href="#_37" rel="nofollow" target="_self">基础知识</a></li><ul><li><a href="#Java_39" rel="nofollow" target="_self">Java概述</a></li><li><a href="#_51" rel="nofollow" target="_self">基础语法</a></li><li><a href="#_98" rel="nofollow" target="_self">面向对象</a></li><li><a href="#_114" rel="nofollow" target="_self">集合框架</a></li><li><a href="#IO_129" rel="nofollow" target="_self">IO流</a></li><li><a href="#_143" rel="nofollow" target="_self">网络编程</a></li><li><a href="#API_173" rel="nofollow" target="_self">常用API</a></li><li><a href="#_185" rel="nofollow" target="_self">常用工具类库</a></li><li><a href="#_198" rel="nofollow" target="_self">单元测试</a></li><li><a href="#_204" rel="nofollow" target="_self">异常</a></li><li><a href="#_217" rel="nofollow" target="_self">日志</a></li></ul><li><a href="#_233" rel="nofollow" target="_self">工具</a></li><ul><li><a href="#IDEA_235" rel="nofollow" target="_self">IDEA</a></li><li><a href="#Eclipse__STS_244" rel="nofollow" target="_self">Eclipse &amp; STS</a></li><li><a href="#Maven_252" rel="nofollow" target="_self">Maven</a></li><li><a href="#Docker_265" rel="nofollow" target="_self">Docker</a></li><li><a href="#Git_273" rel="nofollow" target="_self">Git</a></li><li><a href="#GitLab_286" rel="nofollow" target="_self">GitLab</a></li><li><a href="#GitKraken_290" rel="nofollow" target="_self">GitKraken</a></li><li><a href="#Navicat_294" rel="nofollow" target="_self">Navicat</a></li></ul><li><a href="#_298" rel="nofollow" target="_self">并发编程</a></li><ul><li><a href="#_300" rel="nofollow" target="_self">基础知识</a></li><li><a href="#_311" rel="nofollow" target="_self">并发理论</a></li><li><a href="#_322" rel="nofollow" target="_self">并发关键字</a></li><li><a href="#Lock_332" rel="nofollow" target="_self">Lock体系</a></li><li><a href="#_357" rel="nofollow" target="_self">并发容器</a></li><li><a href="#_371" rel="nofollow" target="_self">线程池</a></li><li><a href="#_382" rel="nofollow" target="_self">原子操作类</a></li><li><a href="#_390" rel="nofollow" target="_self">并发工具</a></li><li><a href="#_399" rel="nofollow" target="_self">并发实践</a></li></ul><li><a href="#_409" rel="nofollow" target="_self">数据结构与算法</a></li><ul><li><a href="#_411" rel="nofollow" target="_self">数据结构</a></li><li><a href="#_438" rel="nofollow" target="_self">算法</a></li><ul><li><a href="#_461" rel="nofollow" target="_self">排序算法</a></li></ul><li><a href="#LeetCode_479" rel="nofollow" target="_self">LeetCode</a></li></ul><li><a href="#_498" rel="nofollow" target="_self">数据库</a></li><ul><li><a href="#Oracle_500" rel="nofollow" target="_self">Oracle</a></li><li><a href="#MySQL_504" rel="nofollow" target="_self">MySQL</a></li><ul><li><a href="#_506" rel="nofollow" target="_self">数据库基础知识</a></li><li><a href="#_508" rel="nofollow" target="_self">数据类型</a></li><li><a href="#_510" rel="nofollow" target="_self">引擎</a></li><li><a href="#_512" rel="nofollow" target="_self">索引</a></li><li><a href="#_514" rel="nofollow" target="_self">三大范式</a></li><li><a href="#SQL_516" rel="nofollow" target="_self">常用SQL语句</a></li><li><a href="#_518" rel="nofollow" target="_self">存储过程与函数</a></li><li><a href="#_520" rel="nofollow" target="_self">视图</a></li><li><a href="#MySQL_522" rel="nofollow" target="_self">MySQL优化</a></li><li><a href="#_524" rel="nofollow" target="_self">事务</a></li><li><a href="#_526" rel="nofollow" target="_self">数据备份与还原</a></li></ul><li><a href="#Redis_530" rel="nofollow" target="_self">Redis</a></li></ul><li><a href="#Java_551" rel="nofollow" target="_self">Java虚拟机</a></li><ul><li><a href="#Java_553" rel="nofollow" target="_self">深入理解Java虚拟机</a></li></ul><li><a href="#_566" rel="nofollow" target="_self">架构设计</a></li><ul><li><a href="#_578" rel="nofollow" target="_self">设计模式</a></li><ul><li><a href="#_599" rel="nofollow" target="_self">创建型模式</a></li><li><a href="#_611" rel="nofollow" target="_self">结构型模式</a></li><li><a href="#_626" rel="nofollow" target="_self">行为型模式</a></li><li><a href="#J2EE_645" rel="nofollow" target="_self">J2EE模式</a></li><li><a href="#_660" rel="nofollow" target="_self">实践应用</a></li></ul></ul><li><a href="#_672" rel="nofollow" target="_self">应用框架</a></li><ul><li><a href="#Spring_745" rel="nofollow" target="_self">Spring</a></li><ul><li><a href="#Spring_756" rel="nofollow" target="_self">《Spring实战》读书笔记</a></li></ul><li><a href="#Spring_MVC_770" rel="nofollow" target="_self">Spring MVC</a></li><li><a href="#MyBatis_774" rel="nofollow" target="_self">MyBatis</a></li><li><a href="#Hibernate_796" rel="nofollow" target="_self">Hibernate</a></li><li><a href="#Shiro_800" rel="nofollow" target="_self">Shiro</a></li><li><a href="#Spring_Security_802" rel="nofollow" target="_self">Spring Security</a></li><li><a href="#Netty_806" rel="nofollow" target="_self">Netty</a></li><li><a href="#_810" rel="nofollow" target="_self">搜索引擎</a></li><ul><li><a href="#LuceneSolr_812" rel="nofollow" target="_self">Lucene/Solr</a></li><li><a href="#Elasticsearch_814" rel="nofollow" target="_self">Elasticsearch</a></li><li><a href="#ELK_816" rel="nofollow" target="_self">ELK</a></li></ul></ul><li><a href="#_826" rel="nofollow" target="_self">中间件</a></li><ul><li><a href="#_828" rel="nofollow" target="_self">消息中间件</a></li><ul><li><a href="#RabbitMQ_830" rel="nofollow" target="_self">RabbitMQ</a></li><li><a href="#RocketMQ_832" rel="nofollow" target="_self">RocketMQ</a></li><li><a href="#ActiveMQ_834" rel="nofollow" target="_self">ActiveMQ</a></li><li><a href="#Kafka_836" rel="nofollow" target="_self">Kafka</a></li></ul><li><a href="#_842" rel="nofollow" target="_self">远程过程调用中间件</a></li><ul><li><a href="#Dubbo_844" rel="nofollow" target="_self">Dubbo</a></li></ul><li><a href="#_850" rel="nofollow" target="_self">数据访问中间件</a></li><li><a href="#Web_858" rel="nofollow" target="_self">Web应用服务器</a></li><ul><li><a href="#Tomcat_860" rel="nofollow" target="_self">Tomcat</a></li><li><a href="#Nginx_876" rel="nofollow" target="_self">Nginx</a></li></ul><li><a href="#_880" rel="nofollow" target="_self">缓存</a></li><li><a href="#_892" rel="nofollow" target="_self">其他</a></li><ul><li><a href="#Zookeeper_894" rel="nofollow" target="_self">Zookeeper</a></li></ul></ul><li><a href="#_900" rel="nofollow" target="_self">微服务与分布式</a></li><ul><li><a href="#Spring_Boot_902" rel="nofollow" target="_self">Spring Boot</a></li><li><a href="#Spring_Cloud_911" rel="nofollow" target="_self">Spring Cloud</a></li><li><a href="#_938" rel="nofollow" target="_self">服务注册发现</a></li><li><a href="#_940" rel="nofollow" target="_self">服务配置</a></li><li><a href="#_942" rel="nofollow" target="_self">负载均衡</a></li><li><a href="#_944" rel="nofollow" target="_self">服务调用</a></li><li><a href="#_946" rel="nofollow" target="_self">服务限流</a></li><li><a href="#_948" rel="nofollow" target="_self">熔断降级</a></li><li><a href="#_950" rel="nofollow" target="_self">网关路由</a></li><li><a href="#_952" rel="nofollow" target="_self">服务权限</a></li><li><a href="#_954" rel="nofollow" target="_self">链路追踪</a></li><li><a href="#_956" rel="nofollow" target="_self">分布式事务</a></li><li><a href="#_958" rel="nofollow" target="_self">分布式缓存</a></li><li><a href="#_960" rel="nofollow" target="_self">分布式会话</a></li><li><a href="#_962" rel="nofollow" target="_self">日志收集</a></li><li><a href="#_964" rel="nofollow" target="_self">服务监控</a></li><li><a href="#_966" rel="nofollow" target="_self">消息驱动</a></li><li><a href="#_968" rel="nofollow" target="_self">数据处理流</a></li><li><a href="#_970" rel="nofollow" target="_self">自动化测试与部署</a></li><li><a href="#_972" rel="nofollow" target="_self">第三方支持</a></li><li><a href="#Zookeeper_974" rel="nofollow" target="_self">分布式协调服务Zookeeper</a></li></ul><li><a href="#_978" rel="nofollow" target="_self">程序员的一些思考</a></li><li><a href="#_987" rel="nofollow" target="_self">项目管理</a></li><ul><li><a href="#_989" rel="nofollow" target="_self">需求调研</a></li><li><a href="#_991" rel="nofollow" target="_self">项目管理</a></li><li><a href="#_993" rel="nofollow" target="_self">代码管理</a></li><li><a href="#_995" rel="nofollow" target="_self">文档管理</a></li><li><a href="#_997" rel="nofollow" target="_self">测试</a></li></ul><li><a href="#_1003" rel="nofollow" target="_self">运维</a></li><li><a href="#_1027" rel="nofollow" target="_self">操作系统</a></li><li><a href="#_1043" rel="nofollow" target="_self">推荐书籍</a></li><li><a href="#_1049" rel="nofollow" target="_self">云计算</a></li><li><a href="#_1055" rel="nofollow" target="_self">搜索引擎</a></li><li><a href="#_1061" rel="nofollow" target="_self">权限管理</a></li><li><a href="#_1067" rel="nofollow" target="_self">区块链</a></li></ul></ul></div><p></p>
<h2><a name="t1"></a><a name="t1"></a><a id="Java_10"></a>Java面试总结</h2>
<p>Java面试总结汇总，整理了包括Java基础知识，集合容器，并发编程，JVM，常用开源框架Spring，MyBatis，数据库，中间件等，包含了作为一个Java工程师在面试中需要用到或者可能用到的绝大部分知识。欢迎大家阅读，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽。文章持续更新中…</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java基础知识面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390612</a></td>
</tr>
<tr>
<td>2</td>
<td>Java集合容器面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588551" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588551</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390689" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390689</a></td>
</tr>
<tr>
<td>4</td>
<td>并发编程面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104863992" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104863992</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390752" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390752</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397516" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397516</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring MVC面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397427" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397427</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Boot面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397299" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397299</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397367" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397367</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/101292950" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/101292950</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/103522351" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/103522351</a></td>
</tr>
<tr>
<td>12</td>
<td>MySQL数据库面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104778621" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104778621</a></td>
</tr>
<tr>
<td>13</td>
<td>消息中间件MQ与RabbitMQ面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588612</a></td>
</tr>
<tr>
<td>14</td>
<td>Dubbo面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390006" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390006</a></td>
</tr>
<tr>
<td>15</td>
<td>Linux面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588679" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588679</a></td>
</tr>
<tr>
<td>16</td>
<td>Tomcat面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397665" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397665</a></td>
</tr>
<tr>
<td>17</td>
<td>ZooKeeper面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397719" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397719</a></td>
</tr>
<tr>
<td>18</td>
<td>Netty面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104391081" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104391081</a></td>
</tr>
</tbody>
</table></div><h2><a name="t2"></a><a name="t2"></a><a id="_37"></a>基础知识</h2>
<h3><a name="t3"></a><a name="t3"></a><a id="Java_39"></a>Java概述</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353575">https://blog.csdn.net/ThinkWon/article/details/94353575</a></td>
</tr>
<tr>
<td>2</td>
<td>Java发展历程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353653">https://blog.csdn.net/ThinkWon/article/details/94353653</a></td>
</tr>
<tr>
<td>3</td>
<td>Java语言特点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354013">https://blog.csdn.net/ThinkWon/article/details/94354013</a></td>
</tr>
<tr>
<td>4</td>
<td>JDK安装与环境变量配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353907">https://blog.csdn.net/ThinkWon/article/details/94353907</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM、JRE和JDK的关系</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101369973">https://blog.csdn.net/ThinkWon/article/details/101369973</a></td>
</tr>
</tbody>
</table></div><h3><a name="t4"></a><a name="t4"></a><a id="_51"></a>基础语法</h3>
<p>大部分已完成</p>
<p>待整理：</p>
<p>Java开发必会的反编译知识（附支持对Lambda进行反编译的工具）</p>
<p>一文读懂什么是Java中的自动拆装箱</p>
<p>Java的枚举类型用法介绍</p>
<p>类、枚举、接口、数组、可变参数</p>
<p>泛型、序列化</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java标识符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101637454">https://blog.csdn.net/ThinkWon/article/details/101637454</a></td>
</tr>
<tr>
<td>2</td>
<td>Java关键字(Java 8版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101642385">https://blog.csdn.net/ThinkWon/article/details/101642385</a></td>
</tr>
<tr>
<td>3</td>
<td>Java注释</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643185">https://blog.csdn.net/ThinkWon/article/details/101643185</a></td>
</tr>
<tr>
<td>4</td>
<td>Java访问修饰符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643412">https://blog.csdn.net/ThinkWon/article/details/101643412</a></td>
</tr>
<tr>
<td>5</td>
<td>Java分隔符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643617">https://blog.csdn.net/ThinkWon/article/details/101643617</a></td>
</tr>
<tr>
<td>6</td>
<td>Java转义字符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643769">https://blog.csdn.net/ThinkWon/article/details/101643769</a></td>
</tr>
<tr>
<td>7</td>
<td>Java进制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643936">https://blog.csdn.net/ThinkWon/article/details/101643936</a></td>
</tr>
<tr>
<td>8</td>
<td>Java流程控制语句</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645978">https://blog.csdn.net/ThinkWon/article/details/101645978</a></td>
</tr>
<tr>
<td>9</td>
<td>Java流程控制语句-顺序结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101644820">https://blog.csdn.net/ThinkWon/article/details/101644820</a></td>
</tr>
<tr>
<td>10</td>
<td>Java流程控制语句-分支结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645224">https://blog.csdn.net/ThinkWon/article/details/101645224</a></td>
</tr>
<tr>
<td>11</td>
<td>Java流程控制语句-循环结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645757">https://blog.csdn.net/ThinkWon/article/details/101645757</a></td>
</tr>
<tr>
<td>12</td>
<td>Java表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101648114">https://blog.csdn.net/ThinkWon/article/details/101648114</a></td>
</tr>
<tr>
<td>13</td>
<td>Java运算符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649002">https://blog.csdn.net/ThinkWon/article/details/101649002</a></td>
</tr>
<tr>
<td>14</td>
<td>Java变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649292">https://blog.csdn.net/ThinkWon/article/details/101649292</a></td>
</tr>
<tr>
<td>15</td>
<td>Java常量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649446">https://blog.csdn.net/ThinkWon/article/details/101649446</a></td>
</tr>
<tr>
<td>16</td>
<td>Java数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649568">https://blog.csdn.net/ThinkWon/article/details/101649568</a></td>
</tr>
<tr>
<td>17</td>
<td>Java反射</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100128361">https://blog.csdn.net/ThinkWon/article/details/100128361</a></td>
</tr>
<tr>
<td>18</td>
<td>Java语法糖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100103689">https://blog.csdn.net/ThinkWon/article/details/100103689</a></td>
</tr>
<tr>
<td>19</td>
<td>Java注解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100178709">https://blog.csdn.net/ThinkWon/article/details/100178709</a></td>
</tr>
<tr>
<td>20</td>
<td>JSON简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642585">https://blog.csdn.net/ThinkWon/article/details/100642585</a></td>
</tr>
<tr>
<td>21</td>
<td>Properties类简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667783">https://blog.csdn.net/ThinkWon/article/details/100667783</a></td>
</tr>
<tr>
<td>22</td>
<td>XML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642425">https://blog.csdn.net/ThinkWon/article/details/100642425</a></td>
</tr>
<tr>
<td>23</td>
<td>YML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642870">https://blog.csdn.net/ThinkWon/article/details/100642870</a></td>
</tr>
<tr>
<td>24</td>
<td>Java8新特性-Lambda表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642932">https://blog.csdn.net/ThinkWon/article/details/100642932</a></td>
</tr>
<tr>
<td>25</td>
<td>Java基础语法</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354151">https://blog.csdn.net/ThinkWon/article/details/94354151</a></td>
</tr>
</tbody>
</table></div><h3><a name="t5"></a><a name="t5"></a><a id="_98"></a>面向对象</h3>
<p>待整理：</p>
<p>抽象</p>
<p>继承、封装、多态</p>
<p>接口、抽象类、内部类</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>什么是面向对象</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667386">https://blog.csdn.net/ThinkWon/article/details/100667386</a></td>
</tr>
</tbody>
</table></div><h3><a name="t6"></a><a name="t6"></a><a id="_114"></a>集合框架</h3>
<p>迭代器、增强for、泛型</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java集合框架总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98844796">https://blog.csdn.net/ThinkWon/article/details/98844796</a></td>
</tr>
<tr>
<td>2</td>
<td>ArrayList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845119">https://blog.csdn.net/ThinkWon/article/details/98845119</a></td>
</tr>
<tr>
<td>3</td>
<td>HashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845487">https://blog.csdn.net/ThinkWon/article/details/98845487</a></td>
</tr>
<tr>
<td>4</td>
<td>LinkedHashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102574293">https://blog.csdn.net/ThinkWon/article/details/102574293</a></td>
</tr>
<tr>
<td>5</td>
<td>LinkedList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102573923">https://blog.csdn.net/ThinkWon/article/details/102573923</a></td>
</tr>
<tr>
<td>6</td>
<td>TreeMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571883">https://blog.csdn.net/ThinkWon/article/details/102571883</a></td>
</tr>
</tbody>
</table></div><h3><a name="t7"></a><a name="t7"></a><a id="IO_129"></a>IO流</h3>
<p>待整理：</p>
<p>File、递归</p>
<p>字节流、字节缓冲流</p>
<p>编码表、编码方式、转换流、序列化、序列化流、打印流、commons-io</p>
<h3><a name="t8"></a><a name="t8"></a><a id="_143"></a>网络编程</h3>
<p>网络概述、网络模型</p>
<p>Socket原理机制</p>
<p>UDP</p>
<p>TCP/IP</p>
<p>协议、OSI 七层协议、HTTP、HTTP2.0、HTTPS</p>
<p>网络安全</p>
<p>	XSS、CSRF、SQL注入、Hash Dos、脚本注入、漏洞扫描工具、验证码</p>
<p>	DDoS防范、用户隐私信息保护、序列化漏洞</p>
<p>	加密解密、对称加密、哈希算法、非对称加密</p>
<p>	服务安全、数据安全、数据备份</p>
<p>	网络隔离、登录跳板机、非外网分离</p>
<p>	认证、授权</p>
<h3><a name="t9"></a><a name="t9"></a><a id="API_173"></a>常用API</h3>
<p>Date、DateFormat、Calendar</p>
<p>String、StringBuffer、StringBuilder、正则表达式</p>
<p>Number、Radom、Math、System、包装类</p>
<p>Arrays、Collections</p>
<h3><a name="t10"></a><a name="t10"></a><a id="_185"></a>常用工具类库</h3>
<p>待整理：OkHttp、commons-lang3</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>HttpClient工具类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101391489">https://blog.csdn.net/ThinkWon/article/details/101391489</a></td>
</tr>
<tr>
<td>2</td>
<td>WGS84地球坐标系，GCJ02火星坐标系，BD09百度坐标系简介与转换</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392187">https://blog.csdn.net/ThinkWon/article/details/101392187</a></td>
</tr>
<tr>
<td>3</td>
<td>Lombok简介、使用、工作原理、优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392808">https://blog.csdn.net/ThinkWon/article/details/101392808</a></td>
</tr>
<tr>
<td>4</td>
<td>Java几种常用JSON库性能比较</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354358">https://blog.csdn.net/ThinkWon/article/details/94354358</a></td>
</tr>
</tbody>
</table></div><h3><a name="t11"></a><a name="t11"></a><a id="_198"></a>单元测试</h3>
<p>JUnit</p>
<h3><a name="t12"></a><a name="t12"></a><a id="_204"></a>异常</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java异常总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>2</td>
<td>Java异常架构与异常关键字</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101676779">https://blog.csdn.net/ThinkWon/article/details/101676779</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101677638">https://blog.csdn.net/ThinkWon/article/details/101677638</a></td>
</tr>
<tr>
<td>4</td>
<td>如何选择异常类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>5</td>
<td>Java异常常见面试题</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101681073">https://blog.csdn.net/ThinkWon/article/details/101681073</a></td>
</tr>
<tr>
<td>6</td>
<td>Java异常处理最佳实践</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94347002">https://blog.csdn.net/ThinkWon/article/details/94347002</a></td>
</tr>
</tbody>
</table></div><h3><a name="t13"></a><a name="t13"></a><a id="_217"></a>日志</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>常用日志框架Log4j，Logback，Log4j2性能比较与日志门面SLF4J简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101621135">https://blog.csdn.net/ThinkWon/article/details/101621135</a></td>
</tr>
<tr>
<td>2</td>
<td>日志作用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101619725">https://blog.csdn.net/ThinkWon/article/details/101619725</a></td>
</tr>
<tr>
<td>3</td>
<td>Apache Log4j2详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95043111">https://blog.csdn.net/ThinkWon/article/details/95043111</a></td>
</tr>
<tr>
<td>4</td>
<td>Log4j2同步日志，混合日志和异步日志配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625124">https://blog.csdn.net/ThinkWon/article/details/101625124</a></td>
</tr>
<tr>
<td>5</td>
<td>Log4j2配置文件详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101629302">https://blog.csdn.net/ThinkWon/article/details/101629302</a></td>
</tr>
<tr>
<td>6</td>
<td>Log4j2的Appenders配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625820">https://blog.csdn.net/ThinkWon/article/details/101625820</a></td>
</tr>
<tr>
<td>7</td>
<td>Log4j2的Filters配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101627162">https://blog.csdn.net/ThinkWon/article/details/101627162</a></td>
</tr>
<tr>
<td>8</td>
<td>Log4j2的Policy触发策略与Strategy滚动策略配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628222">https://blog.csdn.net/ThinkWon/article/details/101628222</a></td>
</tr>
<tr>
<td>9</td>
<td>Log4j2的Loggers配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628736">https://blog.csdn.net/ThinkWon/article/details/101628736</a></td>
</tr>
</tbody>
</table></div><h2><a name="t14"></a><a name="t14"></a><a id="_233"></a>工具</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="IDEA_235"></a>IDEA</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>IDEA常用配置和常用插件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101020481">https://blog.csdn.net/ThinkWon/article/details/101020481</a></td>
</tr>
<tr>
<td>2</td>
<td>IDEA中Maven依赖下载失败解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101312918">https://blog.csdn.net/ThinkWon/article/details/101312918</a></td>
</tr>
</tbody>
</table></div><h3><a name="t16"></a><a name="t16"></a><a id="Eclipse__STS_244"></a>Eclipse &amp; STS</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Eclipse &amp; Spring Tool Suite常用配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101025543">https://blog.csdn.net/ThinkWon/article/details/101025543</a></td>
</tr>
</tbody>
</table></div><h3><a name="t17"></a><a name="t17"></a><a id="Maven_252"></a>Maven</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Maven简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346090">https://blog.csdn.net/ThinkWon/article/details/94346090</a></td>
</tr>
<tr>
<td>2</td>
<td>Maven安装与配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346569">https://blog.csdn.net/ThinkWon/article/details/94346569</a></td>
</tr>
<tr>
<td>3</td>
<td>Maven依赖冲突</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483020">https://blog.csdn.net/ThinkWon/article/details/101483020</a></td>
</tr>
<tr>
<td>4</td>
<td>手动安装Maven依赖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483478">https://blog.csdn.net/ThinkWon/article/details/101483478</a></td>
</tr>
<tr>
<td>5</td>
<td>Maven部署jar包到远程仓库</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483769">https://blog.csdn.net/ThinkWon/article/details/101483769</a></td>
</tr>
<tr>
<td>6</td>
<td>Maven私服Nexus安装与使用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346681">https://blog.csdn.net/ThinkWon/article/details/94346681</a></td>
</tr>
</tbody>
</table></div><h3><a name="t18"></a><a name="t18"></a><a id="Docker_265"></a>Docker</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>使用Docker安装GitLab</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95042797">https://blog.csdn.net/ThinkWon/article/details/95042797</a></td>
</tr>
</tbody>
</table></div><h3><a name="t19"></a><a name="t19"></a><a id="Git_273"></a>Git</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Git简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346816">https://blog.csdn.net/ThinkWon/article/details/94346816</a></td>
</tr>
<tr>
<td>2</td>
<td>版本控制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449228">https://blog.csdn.net/ThinkWon/article/details/101449228</a></td>
</tr>
<tr>
<td>3</td>
<td>Git忽略文件.gitignore详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101447866">https://blog.csdn.net/ThinkWon/article/details/101447866</a></td>
</tr>
<tr>
<td>4</td>
<td>Git与SVN的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449611">https://blog.csdn.net/ThinkWon/article/details/101449611</a></td>
</tr>
<tr>
<td>5</td>
<td>常用Git命令</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101450420">https://blog.csdn.net/ThinkWon/article/details/101450420</a></td>
</tr>
<tr>
<td>6</td>
<td>Git，GitHub与GitLab的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101470086">https://blog.csdn.net/ThinkWon/article/details/101470086</a></td>
</tr>
</tbody>
</table></div><h3><a name="t20"></a><a name="t20"></a><a id="GitLab_286"></a>GitLab</h3>
<h3><a name="t21"></a><a name="t21"></a><a id="GitKraken_290"></a>GitKraken</h3>
<h3><a name="t22"></a><a name="t22"></a><a id="Navicat_294"></a>Navicat</h3>
<h2><a name="t23"></a><a name="t23"></a><a id="_298"></a>并发编程</h2>
<h3><a name="t24"></a><a name="t24"></a><a id="_300"></a>基础知识</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发编程的优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102020811">https://blog.csdn.net/ThinkWon/article/details/102020811</a></td>
</tr>
<tr>
<td>2</td>
<td>线程的状态和基本操作</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102027115">https://blog.csdn.net/ThinkWon/article/details/102027115</a></td>
</tr>
<tr>
<td>3</td>
<td>进程和线程的区别(超详细)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">https://blog.csdn.net/ThinkWon/article/details/102021274</a></td>
</tr>
<tr>
<td>4</td>
<td>创建线程的四种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021143">https://blog.csdn.net/ThinkWon/article/details/102021143</a></td>
</tr>
</tbody>
</table></div><h3><a name="t25"></a><a name="t25"></a><a id="_311"></a>并发理论</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java内存模型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073578">https://blog.csdn.net/ThinkWon/article/details/102073578</a></td>
</tr>
<tr>
<td>2</td>
<td>重排序与数据依赖性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073858">https://blog.csdn.net/ThinkWon/article/details/102073858</a></td>
</tr>
<tr>
<td>3</td>
<td>as-if-serial规则和happens-before规则的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074107">https://blog.csdn.net/ThinkWon/article/details/102074107</a></td>
</tr>
<tr>
<td>4</td>
<td>Java并发理论总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074440">https://blog.csdn.net/ThinkWon/article/details/102074440</a></td>
</tr>
</tbody>
</table></div><h3><a name="t26"></a><a name="t26"></a><a id="_322"></a>并发关键字</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java并发关键字-synchronized</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243189">https://blog.csdn.net/ThinkWon/article/details/102243189</a></td>
</tr>
<tr>
<td>2</td>
<td>Java并发关键字-volatile</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243670">https://blog.csdn.net/ThinkWon/article/details/102243670</a></td>
</tr>
<tr>
<td>3</td>
<td>Java并发关键字-final</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102244477">https://blog.csdn.net/ThinkWon/article/details/102244477</a></td>
</tr>
</tbody>
</table></div><h3><a name="t27"></a><a name="t27"></a><a id="Lock_332"></a>Lock体系</h3>
<p>待整理：</p>
<p>公平锁 &amp; 非公平锁</p>
<p>乐观锁 &amp; 悲观锁</p>
<p>可重入锁 &amp; 不可重入锁</p>
<p>互斥锁 &amp; 共享锁</p>
<p>死锁</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Lock简介与初识AQS</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102468837">https://blog.csdn.net/ThinkWon/article/details/102468837</a></td>
</tr>
<tr>
<td>2</td>
<td>AQS(AbstractQueuedSynchronizer)详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469112">https://blog.csdn.net/ThinkWon/article/details/102469112</a></td>
</tr>
<tr>
<td>3</td>
<td>ReentrantLock(重入锁)实现原理与公平锁非公平锁区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469388">https://blog.csdn.net/ThinkWon/article/details/102469388</a></td>
</tr>
<tr>
<td>4</td>
<td>读写锁ReentrantReadWriteLock源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469598">https://blog.csdn.net/ThinkWon/article/details/102469598</a></td>
</tr>
<tr>
<td>5</td>
<td>Condition源码分析与等待通知机制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469889">https://blog.csdn.net/ThinkWon/article/details/102469889</a></td>
</tr>
<tr>
<td>6</td>
<td>LockSupport详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469993">https://blog.csdn.net/ThinkWon/article/details/102469993</a></td>
</tr>
</tbody>
</table></div><h3><a name="t28"></a><a name="t28"></a><a id="_357"></a>并发容器</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102506447">https://blog.csdn.net/ThinkWon/article/details/102506447</a></td>
</tr>
<tr>
<td>2</td>
<td>并发容器之ConcurrentLinkedQueue详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508089">https://blog.csdn.net/ThinkWon/article/details/102508089</a></td>
</tr>
<tr>
<td>3</td>
<td>并发容器之CopyOnWriteArrayList详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508258">https://blog.csdn.net/ThinkWon/article/details/102508258</a></td>
</tr>
<tr>
<td>4</td>
<td>并发容器之ThreadLocal详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508381">https://blog.csdn.net/ThinkWon/article/details/102508381</a></td>
</tr>
<tr>
<td>5</td>
<td>ThreadLocal内存泄漏分析与解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508721">https://blog.csdn.net/ThinkWon/article/details/102508721</a></td>
</tr>
<tr>
<td>6</td>
<td>并发容器之BlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508901">https://blog.csdn.net/ThinkWon/article/details/102508901</a></td>
</tr>
<tr>
<td>7</td>
<td>并发容器之ArrayBlockingQueue与LinkedBlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508971">https://blog.csdn.net/ThinkWon/article/details/102508971</a></td>
</tr>
</tbody>
</table></div><h3><a name="t29"></a><a name="t29"></a><a id="_371"></a>线程池</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>线程池ThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541900">https://blog.csdn.net/ThinkWon/article/details/102541900</a></td>
</tr>
<tr>
<td>2</td>
<td>Executors类创建四种常见线程池</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541990">https://blog.csdn.net/ThinkWon/article/details/102541990</a></td>
</tr>
<tr>
<td>3</td>
<td>线程池之ScheduledThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542299">https://blog.csdn.net/ThinkWon/article/details/102542299</a></td>
</tr>
<tr>
<td>4</td>
<td>FutureTask详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542404">https://blog.csdn.net/ThinkWon/article/details/102542404</a></td>
</tr>
</tbody>
</table></div><h3><a name="t30"></a><a name="t30"></a><a id="_382"></a>原子操作类</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>原子操作类总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556910">https://blog.csdn.net/ThinkWon/article/details/102556910</a></td>
</tr>
</tbody>
</table></div><h3><a name="t31"></a><a name="t31"></a><a id="_390"></a>并发工具</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发工具之CountDownLatch与CyclicBarrier</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556958">https://blog.csdn.net/ThinkWon/article/details/102556958</a></td>
</tr>
<tr>
<td>2</td>
<td>并发工具之Semaphore与Exchanger</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557034">https://blog.csdn.net/ThinkWon/article/details/102557034</a></td>
</tr>
</tbody>
</table></div><h3><a name="t32"></a><a name="t32"></a><a id="_399"></a>并发实践</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>实现生产者消费者的三种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557126">https://blog.csdn.net/ThinkWon/article/details/102557126</a></td>
</tr>
</tbody>
</table></div><h2><a name="t33"></a><a name="t33"></a><a id="_409"></a>数据结构与算法</h2>
<h3><a name="t34"></a><a name="t34"></a><a id="_411"></a>数据结构</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>红黑树详细分析(图文详解)，看了都说好</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571535">https://blog.csdn.net/ThinkWon/article/details/102571535</a></td>
</tr>
</tbody>
</table></div><pre class="prettyprint"><code class="prism language-sh has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、数组

2、栈
3、队列
4、链表
5、树
	二叉树
    完全二叉树
    平衡二叉树
    二叉查找树（BST）
    红黑树
    B，B+，B*树
    LSM 树

字段是不是数据结构

<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li></ul></pre>
<h3><a name="t35"></a><a name="t35"></a><a id="_438"></a>算法</h3>
<p>语言只是编程工具，算法才是编程之魂！</p>
<pre class="prettyprint"><code class="prism language-text has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、排序算法：快速排序、归并排序、计数排序
2、搜索算法：回溯、递归、剪枝
3、图论：最短路径、最小生成树、网络流建模
4、动态规划：背包问题、最长子序列、计数问题
5、基础技巧：分治、倍增、二分法、贪心算法


宽度优先搜索
深度优先搜索
广度优先
双指针
扫描线

朴素贝叶斯
推荐算法

<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li></ul></pre>
<h4><a id="_461"></a>排序算法</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>史上最全经典排序算法总结(Java实现)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95616819">https://blog.csdn.net/ThinkWon/article/details/95616819</a></td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序（Bubble Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534473">https://blog.csdn.net/ThinkWon/article/details/101534473</a></td>
</tr>
<tr>
<td>3</td>
<td>选择排序（Selection Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534721">https://blog.csdn.net/ThinkWon/article/details/101534721</a></td>
</tr>
<tr>
<td>4</td>
<td>插入排序（Insertion Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101537804">https://blog.csdn.net/ThinkWon/article/details/101537804</a></td>
</tr>
<tr>
<td>5</td>
<td>希尔排序（Shell Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538166">https://blog.csdn.net/ThinkWon/article/details/101538166</a></td>
</tr>
<tr>
<td>6</td>
<td>归并排序（Merge Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538756">https://blog.csdn.net/ThinkWon/article/details/101538756</a></td>
</tr>
<tr>
<td>7</td>
<td>快速排序（Quick Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543580">https://blog.csdn.net/ThinkWon/article/details/101543580</a></td>
</tr>
<tr>
<td>8</td>
<td>堆排序（Heap Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543941">https://blog.csdn.net/ThinkWon/article/details/101543941</a></td>
</tr>
<tr>
<td>9</td>
<td>计数排序（Counting Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544159">https://blog.csdn.net/ThinkWon/article/details/101544159</a></td>
</tr>
<tr>
<td>10</td>
<td>桶排序（Bucket Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544356">https://blog.csdn.net/ThinkWon/article/details/101544356</a></td>
</tr>
<tr>
<td>11</td>
<td>基数排序（Radix Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101545529">https://blog.csdn.net/ThinkWon/article/details/101545529</a></td>
</tr>
</tbody>
</table></div><h3><a name="t36"></a><a name="t36"></a><a id="LeetCode_479"></a>LeetCode</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>LeetCode第1题 两数之和(Two Sum)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113049">https://blog.csdn.net/ThinkWon/article/details/103113049</a></td>
</tr>
<tr>
<td>2</td>
<td>LeetCode第3题 无重复字符的最长子串(Longest Substring Without Repeating Characters)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113969">https://blog.csdn.net/ThinkWon/article/details/103113969</a></td>
</tr>
<tr>
<td>3</td>
<td>LeetCode第7题 整数反转(Reverse Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113167">https://blog.csdn.net/ThinkWon/article/details/103113167</a></td>
</tr>
<tr>
<td>4</td>
<td>LeetCode第9题 回文数(Palindrome Number)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113151">https://blog.csdn.net/ThinkWon/article/details/103113151</a></td>
</tr>
<tr>
<td>5</td>
<td>LeetCode第13题 罗马数字转整数(Roman to Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113519">https://blog.csdn.net/ThinkWon/article/details/103113519</a></td>
</tr>
<tr>
<td>6</td>
<td>LeetCode第14题 最长公共前缀(Longest Common Prefix)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113700">https://blog.csdn.net/ThinkWon/article/details/103113700</a></td>
</tr>
<tr>
<td>7</td>
<td>LeetCode第20题 有效的括号(Valid Parentheses)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113848">https://blog.csdn.net/ThinkWon/article/details/103113848</a></td>
</tr>
<tr>
<td>8</td>
<td>LeetCode第26题 删除排序数组中的重复项(Remove Duplicates from Sorted Array)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113097">https://blog.csdn.net/ThinkWon/article/details/103113097</a></td>
</tr>
</tbody>
</table></div><h2><a name="t37"></a><a name="t37"></a><a id="_498"></a>数据库</h2>
<h3><a name="t38"></a><a name="t38"></a><a id="Oracle_500"></a>Oracle</h3>
<h3><a name="t39"></a><a name="t39"></a><a id="MySQL_504"></a>MySQL</h3>
<h4><a id="_506"></a>数据库基础知识</h4>
<h4><a id="_508"></a>数据类型</h4>
<h4><a id="_510"></a>引擎</h4>
<h4><a id="_512"></a>索引</h4>
<h4><a id="_514"></a>三大范式</h4>
<h4><a id="SQL_516"></a>常用SQL语句</h4>
<h4><a id="_518"></a>存储过程与函数</h4>
<h4><a id="_520"></a>视图</h4>
<h4><a id="MySQL_522"></a>MySQL优化</h4>
<h4><a id="_524"></a>事务</h4>
<h4><a id="_526"></a>数据备份与还原</h4>
<h3><a name="t40"></a><a name="t40"></a><a id="Redis_530"></a>Redis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Redis总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/99999584">https://blog.csdn.net/ThinkWon/article/details/99999584</a></td>
</tr>
<tr>
<td>2</td>
<td>Redis使用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521497">https://blog.csdn.net/ThinkWon/article/details/101521497</a></td>
</tr>
<tr>
<td>3</td>
<td>Redis数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521724">https://blog.csdn.net/ThinkWon/article/details/101521724</a></td>
</tr>
<tr>
<td>4</td>
<td>Redis持久化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522209">https://blog.csdn.net/ThinkWon/article/details/101522209</a></td>
</tr>
<tr>
<td>5</td>
<td>Redis过期键的删除策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522970">https://blog.csdn.net/ThinkWon/article/details/101522970</a></td>
</tr>
<tr>
<td>6</td>
<td>Redis数据淘汰策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530624">https://blog.csdn.net/ThinkWon/article/details/101530624</a></td>
</tr>
<tr>
<td>7</td>
<td>Redis与Memcached的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530406">https://blog.csdn.net/ThinkWon/article/details/101530406</a></td>
</tr>
<tr>
<td>8</td>
<td>Redis常见面试题(精简版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></td>
</tr>
<tr>
<td>9</td>
<td>Redis中缓存雪崩、缓存穿透等问题的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103402008">https://blog.csdn.net/ThinkWon/article/details/103402008</a></td>
</tr>
<tr>
<td>10</td>
<td>阿里云Redis开发规范学习总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103400250">https://blog.csdn.net/ThinkWon/article/details/103400250</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis开发常用规范</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401781">https://blog.csdn.net/ThinkWon/article/details/103401781</a></td>
</tr>
<tr>
<td>12</td>
<td>这可能是最中肯的Redis规范了</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401978">https://blog.csdn.net/ThinkWon/article/details/103401978</a></td>
</tr>
</tbody>
</table></div><h2><a name="t41"></a><a name="t41"></a><a id="Java_551"></a>Java虚拟机</h2>
<h3><a name="t42"></a><a name="t42"></a><a id="Java_553"></a>深入理解Java虚拟机</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>深入理解Java虚拟机-走近Java</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103804387">https://blog.csdn.net/ThinkWon/article/details/103804387</a></td>
</tr>
<tr>
<td>2</td>
<td>深入理解Java虚拟机-Java内存区域与内存溢出异常</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103827387">https://blog.csdn.net/ThinkWon/article/details/103827387</a></td>
</tr>
<tr>
<td>3</td>
<td>深入理解Java虚拟机-垃圾回收器与内存分配策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103831676">https://blog.csdn.net/ThinkWon/article/details/103831676</a></td>
</tr>
<tr>
<td>4</td>
<td>深入理解Java虚拟机-虚拟机执行子系统</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835168">https://blog.csdn.net/ThinkWon/article/details/103835168</a></td>
</tr>
<tr>
<td>5</td>
<td>深入理解Java虚拟机-程序编译与代码优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835883">https://blog.csdn.net/ThinkWon/article/details/103835883</a></td>
</tr>
<tr>
<td>6</td>
<td>深入理解Java虚拟机-高效并发</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103836167">https://blog.csdn.net/ThinkWon/article/details/103836167</a></td>
</tr>
</tbody>
</table></div><h2><a name="t43"></a><a name="t43"></a><a id="_566"></a>架构设计</h2>
<p>高可用架构</p>
<p>高并发架构</p>
<p>可伸缩架构</p>
<p>集群</p>
<h3><a name="t44"></a><a name="t44"></a><a id="_578"></a>设计模式</h3>
<p>常用设计模式</p>
<p>创建型：<br>
单例模式、工厂模式、抽象工厂模式</p>
<p>结构型：<br>
适配器模式、外观模式、代理模式、装饰器模式</p>
<p>行为型：<br>
观察者模式、策略模式、模板模式</p>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>设计模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/96829572">https://blog.csdn.net/ThinkWon/article/details/96829572</a></td>
</tr>
</tbody>
</table></div><h4><a id="_599"></a>创建型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抽象工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382584">https://blog.csdn.net/ThinkWon/article/details/101382584</a></td>
</tr>
<tr>
<td>2</td>
<td>单例模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382855">https://blog.csdn.net/ThinkWon/article/details/101382855</a></td>
</tr>
<tr>
<td>3</td>
<td>工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383285">https://blog.csdn.net/ThinkWon/article/details/101383285</a></td>
</tr>
<tr>
<td>4</td>
<td>建造者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383401">https://blog.csdn.net/ThinkWon/article/details/101383401</a></td>
</tr>
<tr>
<td>5</td>
<td>原型模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383491">https://blog.csdn.net/ThinkWon/article/details/101383491</a></td>
</tr>
</tbody>
</table></div><h4><a id="_611"></a>结构型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>代理模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384436">https://blog.csdn.net/ThinkWon/article/details/101384436</a></td>
</tr>
<tr>
<td>2</td>
<td>过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384514">https://blog.csdn.net/ThinkWon/article/details/101384514</a></td>
</tr>
<tr>
<td>3</td>
<td>桥接模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384584">https://blog.csdn.net/ThinkWon/article/details/101384584</a></td>
</tr>
<tr>
<td>4</td>
<td>适配器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384619">https://blog.csdn.net/ThinkWon/article/details/101384619</a></td>
</tr>
<tr>
<td>5</td>
<td>外观模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384676">https://blog.csdn.net/ThinkWon/article/details/101384676</a></td>
</tr>
<tr>
<td>6</td>
<td>享元模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384716">https://blog.csdn.net/ThinkWon/article/details/101384716</a></td>
</tr>
<tr>
<td>7</td>
<td>装饰器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384753">https://blog.csdn.net/ThinkWon/article/details/101384753</a></td>
</tr>
<tr>
<td>8</td>
<td>组合模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384786">https://blog.csdn.net/ThinkWon/article/details/101384786</a></td>
</tr>
</tbody>
</table></div><h4><a id="_626"></a>行为型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>备忘录模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383582">https://blog.csdn.net/ThinkWon/article/details/101383582</a></td>
</tr>
<tr>
<td>2</td>
<td>策略模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383647">https://blog.csdn.net/ThinkWon/article/details/101383647</a></td>
</tr>
<tr>
<td>3</td>
<td>迭代器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383722">https://blog.csdn.net/ThinkWon/article/details/101383722</a></td>
</tr>
<tr>
<td>4</td>
<td>访问者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383780">https://blog.csdn.net/ThinkWon/article/details/101383780</a></td>
</tr>
<tr>
<td>5</td>
<td>观察者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383872">https://blog.csdn.net/ThinkWon/article/details/101383872</a></td>
</tr>
<tr>
<td>6</td>
<td>解释器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383930">https://blog.csdn.net/ThinkWon/article/details/101383930</a></td>
</tr>
<tr>
<td>7</td>
<td>空对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384001">https://blog.csdn.net/ThinkWon/article/details/101384001</a></td>
</tr>
<tr>
<td>8</td>
<td>命令模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384090">https://blog.csdn.net/ThinkWon/article/details/101384090</a></td>
</tr>
<tr>
<td>9</td>
<td>模板模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384138">https://blog.csdn.net/ThinkWon/article/details/101384138</a></td>
</tr>
<tr>
<td>10</td>
<td>责任链模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384195">https://blog.csdn.net/ThinkWon/article/details/101384195</a></td>
</tr>
<tr>
<td>11</td>
<td>中介者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384251">https://blog.csdn.net/ThinkWon/article/details/101384251</a></td>
</tr>
<tr>
<td>12</td>
<td>状态模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384315">https://blog.csdn.net/ThinkWon/article/details/101384315</a></td>
</tr>
</tbody>
</table></div><h4><a id="J2EE_645"></a>J2EE模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MVC模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101381701">https://blog.csdn.net/ThinkWon/article/details/101381701</a></td>
</tr>
<tr>
<td>2</td>
<td>传输对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382134">https://blog.csdn.net/ThinkWon/article/details/101382134</a></td>
</tr>
<tr>
<td>3</td>
<td>服务定位器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382179">https://blog.csdn.net/ThinkWon/article/details/101382179</a></td>
</tr>
<tr>
<td>4</td>
<td>拦截过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382210">https://blog.csdn.net/ThinkWon/article/details/101382210</a></td>
</tr>
<tr>
<td>5</td>
<td>前端控制器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382247">https://blog.csdn.net/ThinkWon/article/details/101382247</a></td>
</tr>
<tr>
<td>6</td>
<td>数据访问对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382287">https://blog.csdn.net/ThinkWon/article/details/101382287</a></td>
</tr>
<tr>
<td>7</td>
<td>业务代表模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382356">https://blog.csdn.net/ThinkWon/article/details/101382356</a></td>
</tr>
<tr>
<td>8</td>
<td>组合实体模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382390">https://blog.csdn.net/ThinkWon/article/details/101382390</a></td>
</tr>
</tbody>
</table></div><h4><a id="_660"></a>实践应用</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102924813">https://blog.csdn.net/ThinkWon/article/details/102924813</a></td>
</tr>
</tbody>
</table></div><h2><a name="t45"></a><a name="t45"></a><a id="_672"></a>应用框架</h2>
<p>如何学习一个框架或者技术</p>
<ul>
<li>
<p>是什么，简介，概述</p>
</li>
<li>
<p>有什么用，用途，使用场景</p>
</li>
<li>
<p>怎么用，在实际开发中的应用，注意事项</p>
</li>
<li>
<p>优缺点</p>
</li>
<li>
<p>框架原理，工作流程，工作原理</p>
</li>
<li>
<p>常见面试题</p>
</li>
<li>
<p>源码分析，核心类，核心方法，设计模式</p>
</li>
<li>
<p>发布博客，在开发和实践中，博客反馈中持续改进</p>
</li>
<li>
<p>与同事朋友交流，技术论坛，技术分享中持续丰富知识</p>
</li>
</ul>
<p>常用框架</p>
<ul>
<li>
<p>集成开发工具（IDE）：Eclipse、MyEclipse、Spring Tool Suite（STS）、Intellij IDEA、NetBeans、JBuilder、JCreator</p>
</li>
<li>
<p>JAVA服务器：tomcat、jboss、websphere、weblogic、resin、jetty、apusic、apache</p>
</li>
<li>
<p>负载均衡：nginx、lvs</p>
</li>
<li>
<p>web层框架：Spring MVC、Struts2、Struts1、Google Web Toolkit（GWT）、JQWEB</p>
</li>
<li>
<p>服务层框架：Spring、EJB</p>
</li>
<li>
<p>持久层框架：Hibernate、MyBatis、JPA、TopLink</p>
</li>
<li>
<p>数据库：Oracle、MySql、MSSQL、Redis</p>
</li>
<li>
<p>项目构建：maven、ant</p>
</li>
<li>
<p>持续集成：Jenkins</p>
</li>
<li>
<p>版本控制：SVN、CVS、VSS、GIT</p>
</li>
<li>
<p>私服：Nexus</p>
</li>
<li>
<p>消息组件：IBM MQ、RabbitMQ、ActiveMQ、RocketMq</p>
</li>
<li>
<p>日志框架：Commons Logging、log4j 、slf4j、IOC</p>
</li>
<li>
<p>缓存框架：memcache、redis、ehcache、jboss cache</p>
</li>
<li>
<p>RPC框架：Hessian、Dubbo</p>
</li>
<li>
<p>规则引擎：Drools</p>
</li>
<li>
<p>工作流：Activiti</p>
</li>
<li>
<p>批处理：Spring Batch</p>
</li>
<li>
<p>通用查询框架：Query DSL</p>
</li>
<li>
<p>JAVA安全框架：shiro、Spring Security</p>
</li>
<li>
<p>代码静态检查工具：FindBugs、PMD</p>
</li>
<li>
<p>Linux操作系统：CentOS、Ubuntu、SUSE Linux、</p>
</li>
<li>
<p>常用工具：PLSQL Developer（Oracle）、Navicat（MySql）、FileZilla（FTP）、Xshell（SSH）、putty（SSH）、SecureCRT（SSH）、jd-gui（反编译）</p>
</li>
</ul>
<h3><a name="t46"></a><a name="t46"></a><a id="Spring_745"></a>Spring</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring简介、设计理念、优缺点、应用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810748">https://blog.csdn.net/ThinkWon/article/details/102810748</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring模块组成(框架组成、整体架构、体系架构、体系结构)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810819">https://blog.csdn.net/ThinkWon/article/details/102810819</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring容器中bean的生命周期</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102866432">https://blog.csdn.net/ThinkWon/article/details/102866432</a></td>
</tr>
<tr>
<td>4</td>
<td>控制反转(IoC)与依赖注入(DI)详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102912332">https://blog.csdn.net/ThinkWon/article/details/102912332</a></td>
</tr>
</tbody>
</table></div><h4><a id="Spring_756"></a>《Spring实战》读书笔记</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>《Spring实战》读书笔记-第1章 Spring之旅</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103097364">https://blog.csdn.net/ThinkWon/article/details/103097364</a></td>
</tr>
<tr>
<td>2</td>
<td>《Spring实战》读书笔记-第2章 装配Bean</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103527675">https://blog.csdn.net/ThinkWon/article/details/103527675</a></td>
</tr>
<tr>
<td>3</td>
<td>《Spring实战》读书笔记-第3章 高级装配</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103536621">https://blog.csdn.net/ThinkWon/article/details/103536621</a></td>
</tr>
<tr>
<td>4</td>
<td>《Spring实战》读书笔记-第4章 面向切面的Spring</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103541166">https://blog.csdn.net/ThinkWon/article/details/103541166</a></td>
</tr>
<tr>
<td>5</td>
<td>《Spring实战》读书笔记-第5章 构建Spring Web应用程序</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103550083">https://blog.csdn.net/ThinkWon/article/details/103550083</a></td>
</tr>
<tr>
<td>6</td>
<td>《Spring实战》读书笔记-第6章 渲染Web视图</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103559672">https://blog.csdn.net/ThinkWon/article/details/103559672</a></td>
</tr>
<tr>
<td>7</td>
<td>《Spring实战》读书笔记-第7章 Spring MVC的高级技术</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103562467">https://blog.csdn.net/ThinkWon/article/details/103562467</a></td>
</tr>
</tbody>
</table></div><h3><a name="t47"></a><a name="t47"></a><a id="Spring_MVC_770"></a>Spring MVC</h3>
<h3><a name="t48"></a><a name="t48"></a><a id="MyBatis_774"></a>MyBatis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MyBatis官方文档</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887995">https://blog.csdn.net/ThinkWon/article/details/100887995</a></td>
</tr>
<tr>
<td>2</td>
<td>MyBatis官方文档-简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887076">https://blog.csdn.net/ThinkWon/article/details/100887076</a></td>
</tr>
<tr>
<td>3</td>
<td>MyBatis官方文档-入门</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887176">https://blog.csdn.net/ThinkWon/article/details/100887176</a></td>
</tr>
<tr>
<td>4</td>
<td>MyBatis官方文档-XML 配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887349">https://blog.csdn.net/ThinkWon/article/details/100887349</a></td>
</tr>
<tr>
<td>5</td>
<td>MyBatis官方文档-XML 映射文件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887478">https://blog.csdn.net/ThinkWon/article/details/100887478</a></td>
</tr>
<tr>
<td>6</td>
<td>MyBatis官方文档-动态 SQL</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887702">https://blog.csdn.net/ThinkWon/article/details/100887702</a></td>
</tr>
<tr>
<td>7</td>
<td>MyBatis官方文档-Java API</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887746">https://blog.csdn.net/ThinkWon/article/details/100887746</a></td>
</tr>
<tr>
<td>8</td>
<td>MyBatis官方文档-SQL 语句构建器类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887821">https://blog.csdn.net/ThinkWon/article/details/100887821</a></td>
</tr>
<tr>
<td>9</td>
<td>MyBatis官方文档-日志</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887951">https://blog.csdn.net/ThinkWon/article/details/100887951</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis功能架构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101295025">https://blog.csdn.net/ThinkWon/article/details/101295025</a></td>
</tr>
<tr>
<td>11</td>
<td>MyBatis工作原理</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293609">https://blog.csdn.net/ThinkWon/article/details/101293609</a></td>
</tr>
<tr>
<td>12</td>
<td>MyBatis核心类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293216">https://blog.csdn.net/ThinkWon/article/details/101293216</a></td>
</tr>
<tr>
<td>13</td>
<td>MyBatis面试宝典</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101292950">https://blog.csdn.net/ThinkWon/article/details/101292950</a></td>
</tr>
<tr>
<td>14</td>
<td>MyBatis实现一对一，一对多关联查询</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101322334">https://blog.csdn.net/ThinkWon/article/details/101322334</a></td>
</tr>
<tr>
<td>15</td>
<td>MyBatis缓存</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101351212">https://blog.csdn.net/ThinkWon/article/details/101351212</a></td>
</tr>
</tbody>
</table></div><h3><a name="t49"></a><a name="t49"></a><a id="Hibernate_796"></a>Hibernate</h3>
<h3><a name="t50"></a><a name="t50"></a><a id="Shiro_800"></a>Shiro</h3>
<h3><a name="t51"></a><a name="t51"></a><a id="Spring_Security_802"></a>Spring Security</h3>
<h3><a name="t52"></a><a name="t52"></a><a id="Netty_806"></a>Netty</h3>
<h3><a name="t53"></a><a name="t53"></a><a id="_810"></a>搜索引擎</h3>
<h4><a id="LuceneSolr_812"></a>Lucene/Solr</h4>
<h4><a id="Elasticsearch_814"></a>Elasticsearch</h4>
<h4><a id="ELK_816"></a>ELK</h4>
<h2><a name="t54"></a><a name="t54"></a><a id="_826"></a>中间件</h2>
<h3><a name="t55"></a><a name="t55"></a><a id="_828"></a>消息中间件</h3>
<h4><a id="RabbitMQ_830"></a>RabbitMQ</h4>
<h4><a id="RocketMQ_832"></a>RocketMQ</h4>
<h4><a id="ActiveMQ_834"></a>ActiveMQ</h4>
<h4><a id="Kafka_836"></a>Kafka</h4>
<h3><a name="t56"></a><a name="t56"></a><a id="_842"></a>远程过程调用中间件</h3>
<h4><a id="Dubbo_844"></a>Dubbo</h4>
<h3><a name="t57"></a><a name="t57"></a><a id="_850"></a>数据访问中间件</h3>
<p>Sharding JDBC</p>
<p>MyCat</p>
<h3><a name="t58"></a><a name="t58"></a><a id="Web_858"></a>Web应用服务器</h3>
<h4><a id="Tomcat_860"></a>Tomcat</h4>
<p>待整理：Tomcat各组件作用	Tomcat集群	Tomcat面试题</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Win10安装Tomcat服务器与配置环境变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622905">https://blog.csdn.net/ThinkWon/article/details/102622905</a></td>
</tr>
<tr>
<td>2</td>
<td>Linux(CentOS7)安装Tomcat与设置Tomcat为开机启动项</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102717537">https://blog.csdn.net/ThinkWon/article/details/102717537</a></td>
</tr>
<tr>
<td>3</td>
<td>Tomcat与JDK版本对应关系，Tomcat各版本特性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622738">https://blog.csdn.net/ThinkWon/article/details/102622738</a></td>
</tr>
<tr>
<td>4</td>
<td>Tomcat目录结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102619466">https://blog.csdn.net/ThinkWon/article/details/102619466</a></td>
</tr>
<tr>
<td>5</td>
<td>Tomcat乱码与端口占用的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622824">https://blog.csdn.net/ThinkWon/article/details/102622824</a></td>
</tr>
<tr>
<td>6</td>
<td>Tomcat系统架构与请求处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102676442">https://blog.csdn.net/ThinkWon/article/details/102676442</a></td>
</tr>
<tr>
<td>7</td>
<td>史上最强Tomcat8性能优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102744033">https://blog.csdn.net/ThinkWon/article/details/102744033</a></td>
</tr>
</tbody>
</table></div><h4><a id="Nginx_876"></a>Nginx</h4>
<h3><a name="t59"></a><a name="t59"></a><a id="_880"></a>缓存</h3>
<p>本地缓存</p>
<p>客户端缓存</p>
<p>服务端缓存</p>
<p>	web缓存，Redis，Memcached，Ehcache</p>
<h3><a name="t60"></a><a name="t60"></a><a id="_892"></a>其他</h3>
<h4><a id="Zookeeper_894"></a>Zookeeper</h4>
<h2><a name="t61"></a><a name="t61"></a><a id="_900"></a>微服务与分布式</h2>
<h3><a name="t62"></a><a name="t62"></a><a id="Spring_Boot_902"></a>Spring Boot</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>application.yml与bootstrap.yml的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100007093">https://blog.csdn.net/ThinkWon/article/details/100007093</a></td>
</tr>
<tr>
<td>2</td>
<td>一分钟了解约定优于配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101703815">https://blog.csdn.net/ThinkWon/article/details/101703815</a></td>
</tr>
</tbody>
</table></div><h3><a name="t63"></a><a name="t63"></a><a id="Spring_Cloud_911"></a>Spring Cloud</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring Cloud入门-十分钟了解Spring Cloud</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103715146">https://blog.csdn.net/ThinkWon/article/details/103715146</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring Cloud入门-Eureka服务注册与发现(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring Cloud入门-Ribbon服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></td>
</tr>
<tr>
<td>4</td>
<td>Spring Cloud入门-Hystrix断路器(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></td>
</tr>
<tr>
<td>5</td>
<td>Spring Cloud入门-Hystrix Dashboard与Turbine断路器监控(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103734664">https://blog.csdn.net/ThinkWon/article/details/103734664</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring Cloud入门-OpenFeign服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring Cloud入门-Zuul服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103738851">https://blog.csdn.net/ThinkWon/article/details/103738851</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Cloud入门-Config分布式配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103739628">https://blog.csdn.net/ThinkWon/article/details/103739628</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud入门-Bus消息总线(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753372">https://blog.csdn.net/ThinkWon/article/details/103753372</a></td>
</tr>
<tr>
<td>10</td>
<td>Spring Cloud入门-Sleuth服务链路跟踪(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753896">https://blog.csdn.net/ThinkWon/article/details/103753896</a></td>
</tr>
<tr>
<td>11</td>
<td>Spring Cloud入门-Consul服务注册发现与配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103756139">https://blog.csdn.net/ThinkWon/article/details/103756139</a></td>
</tr>
<tr>
<td>12</td>
<td>Spring Cloud入门-Gateway服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></td>
</tr>
<tr>
<td>13</td>
<td>Spring Cloud入门-Admin服务监控中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103758697">https://blog.csdn.net/ThinkWon/article/details/103758697</a></td>
</tr>
<tr>
<td>14</td>
<td>Spring Cloud入门-Oauth2授权的使用(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103761687">https://blog.csdn.net/ThinkWon/article/details/103761687</a></td>
</tr>
<tr>
<td>15</td>
<td>Spring Cloud入门-Oauth2授权之JWT集成(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103763364">https://blog.csdn.net/ThinkWon/article/details/103763364</a></td>
</tr>
<tr>
<td>16</td>
<td>Spring Cloud入门-Oauth2授权之基于JWT完成单点登录(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103766368">https://blog.csdn.net/ThinkWon/article/details/103766368</a></td>
</tr>
<tr>
<td>17</td>
<td>Spring Cloud入门-Nacos实现注册和配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103769680">https://blog.csdn.net/ThinkWon/article/details/103769680</a></td>
</tr>
<tr>
<td>18</td>
<td>Spring Cloud入门-Sentinel实现服务限流、熔断与降级(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103770879">https://blog.csdn.net/ThinkWon/article/details/103770879</a></td>
</tr>
<tr>
<td>19</td>
<td>Spring Cloud入门-Seata处理分布式事务问题(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786102">https://blog.csdn.net/ThinkWon/article/details/103786102</a></td>
</tr>
<tr>
<td>20</td>
<td>Spring Cloud入门-汇总篇(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786588">https://blog.csdn.net/ThinkWon/article/details/103786588</a></td>
</tr>
</tbody>
</table></div><h3><a name="t64"></a><a name="t64"></a><a id="_938"></a>服务注册发现</h3>
<h3><a name="t65"></a><a name="t65"></a><a id="_940"></a>服务配置</h3>
<h3><a name="t66"></a><a name="t66"></a><a id="_942"></a>负载均衡</h3>
<h3><a name="t67"></a><a name="t67"></a><a id="_944"></a>服务调用</h3>
<h3><a name="t68"></a><a name="t68"></a><a id="_946"></a>服务限流</h3>
<h3><a name="t69"></a><a name="t69"></a><a id="_948"></a>熔断降级</h3>
<h3><a name="t70"></a><a name="t70"></a><a id="_950"></a>网关路由</h3>
<h3><a name="t71"></a><a name="t71"></a><a id="_952"></a>服务权限</h3>
<h3><a name="t72"></a><a name="t72"></a><a id="_954"></a>链路追踪</h3>
<h3><a name="t73"></a><a name="t73"></a><a id="_956"></a>分布式事务</h3>
<h3><a name="t74"></a><a name="t74"></a><a id="_958"></a>分布式缓存</h3>
<h3><a name="t75"></a><a name="t75"></a><a id="_960"></a>分布式会话</h3>
<h3><a name="t76"></a><a name="t76"></a><a id="_962"></a>日志收集</h3>
<h3><a name="t77"></a><a name="t77"></a><a id="_964"></a>服务监控</h3>
<h3><a name="t78"></a><a name="t78"></a><a id="_966"></a>消息驱动</h3>
<h3><a name="t79"></a><a name="t79"></a><a id="_968"></a>数据处理流</h3>
<h3><a name="t80"></a><a name="t80"></a><a id="_970"></a>自动化测试与部署</h3>
<h3><a name="t81"></a><a name="t81"></a><a id="_972"></a>第三方支持</h3>
<h3><a name="t82"></a><a name="t82"></a><a id="Zookeeper_974"></a>分布式协调服务Zookeeper</h3>
<h2><a name="t83"></a><a name="t83"></a><a id="_978"></a>程序员的一些思考</h2>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>程序员写个人技术博客的价值与意义</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102980571">https://blog.csdn.net/ThinkWon/article/details/102980571</a></td>
</tr>
<tr>
<td>2</td>
<td>Java知识体系最强总结(2020版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></td>
</tr>
</tbody>
</table></div><h2><a name="t84"></a><a name="t84"></a><a id="_987"></a>项目管理</h2>
<h3><a name="t85"></a><a name="t85"></a><a id="_989"></a>需求调研</h3>
<h3><a name="t86"></a><a name="t86"></a><a id="_991"></a>项目管理</h3>
<h3><a name="t87"></a><a name="t87"></a><a id="_993"></a>代码管理</h3>
<h3><a name="t88"></a><a name="t88"></a><a id="_995"></a>文档管理</h3>
<h3><a name="t89"></a><a name="t89"></a><a id="_997"></a>测试</h3>
<h2><a name="t90"></a><a name="t90"></a><a id="_1003"></a>运维</h2>
<p>常规监控</p>
<p>APM</p>
<p>持续集成(CI/CD)：Jenkins，环境分离</p>
<p>自动化运维：Ansible，puppet，chef</p>
<p>测试：TDD 理论，单元测试，压力测试，全链路压测，A/B 、灰度、蓝绿测试</p>
<p>虚拟化：KVM，Xen，OpenVZ</p>
<p>容器技术：Docker</p>
<p>云技术：OpenStack</p>
<p>DevOps</p>
<p>文档管理</p>
<h2><a name="t91"></a><a name="t91"></a><a id="_1027"></a>操作系统</h2>
<p>计算机操作系统</p>
<p>计算机原理</p>
<p>Linux</p>
<p>CPU</p>
<p>进程，线程，协程</p>
<h2><a name="t92"></a><a name="t92"></a><a id="_1043"></a>推荐书籍</h2>
<h2><a name="t93"></a><a name="t93"></a><a id="_1049"></a>云计算</h2>
<p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p>
<h2><a name="t94"></a><a name="t94"></a><a id="_1055"></a>搜索引擎</h2>
<p>Solr、Lucene、Nutch、Elasticsearch</p>
<h2><a name="t95"></a><a name="t95"></a><a id="_1061"></a>权限管理</h2>
<p>Shiro、Spring Security</p>
<h2><a name="t96"></a><a name="t96"></a><a id="_1067"></a>区块链</h2>
<p>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=整理的Java知识体系主要包括基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识
), {}, org.apache.catalina.session.StandardSessionFacade@c90b94]
2020-04-10 22:22:19.784 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 22:22:19.864 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:22:19.864 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:22:19.864 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:22:19.864 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:22:19.894 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:22:24.944 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 22:22:24.944 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:22:24.944 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 22:22:24.944 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 22:22:25.004 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:23:18.658 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:23:18.658 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:23:18.668 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:23:18.668 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:23:18.688 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:23:19.644 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:23:19.645 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:23:19.647 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:23:19.649 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:23:19.656 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:29:36.981 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:29:36.981 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:29:36.991 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:29:36.991 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:29:37.031 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:29:39.411 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/12/input
2020-04-10 22:29:39.411 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:29:39.421 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 22:29:39.421 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:29:39.441 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 22:32:04.647 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:32:04.647 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:32:04.647 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 22:32:04.647 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title= Java知识体系最强总结(2020版), content=
<p><strong>本人从事Java开发已多年，平时有记录问题解决方案和总结知识点的习惯，整理了一些有关Java的知识体系，这不是最终版，会不定期的更新</strong>。也算是记录自己在从事编程工作的成长足迹，通过博客可以促进博主与阅读者的共同进步，结交更多志同道合的朋友。<strong>特此分享给大家，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽</strong>。</p>
<p>整理的Java知识体系主要包括<strong>基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链</strong>等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识。<strong>千里之行始于足下</strong>，希望大家根据自己的薄弱点，查缺补漏，根据自己感兴趣的方面多学习，学的精通一点，从现在开始行动起来。<strong>路漫漫其修远兮，吾将上下而求索，不管编程开发的路有多么难走，多么艰辛，我们都将百折不挠，不遗余力地去追求和探索</strong>。</p>
<p><img src="https://img-blog.csdnimg.cn/2019121810082198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly90aGlua3dvbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=""></p>
<p></p><div class="toc"><h3><a name="t0"></a><a name="t0"></a>文章目录</h3><ul><ul><li><a href="#Java_10" rel="nofollow" target="_self">Java面试总结</a></li><li><a href="#_37" rel="nofollow" target="_self">基础知识</a></li><ul><li><a href="#Java_39" rel="nofollow" target="_self">Java概述</a></li><li><a href="#_51" rel="nofollow" target="_self">基础语法</a></li><li><a href="#_98" rel="nofollow" target="_self">面向对象</a></li><li><a href="#_114" rel="nofollow" target="_self">集合框架</a></li><li><a href="#IO_129" rel="nofollow" target="_self">IO流</a></li><li><a href="#_143" rel="nofollow" target="_self">网络编程</a></li><li><a href="#API_173" rel="nofollow" target="_self">常用API</a></li><li><a href="#_185" rel="nofollow" target="_self">常用工具类库</a></li><li><a href="#_198" rel="nofollow" target="_self">单元测试</a></li><li><a href="#_204" rel="nofollow" target="_self">异常</a></li><li><a href="#_217" rel="nofollow" target="_self">日志</a></li></ul><li><a href="#_233" rel="nofollow" target="_self">工具</a></li><ul><li><a href="#IDEA_235" rel="nofollow" target="_self">IDEA</a></li><li><a href="#Eclipse__STS_244" rel="nofollow" target="_self">Eclipse &amp; STS</a></li><li><a href="#Maven_252" rel="nofollow" target="_self">Maven</a></li><li><a href="#Docker_265" rel="nofollow" target="_self">Docker</a></li><li><a href="#Git_273" rel="nofollow" target="_self">Git</a></li><li><a href="#GitLab_286" rel="nofollow" target="_self">GitLab</a></li><li><a href="#GitKraken_290" rel="nofollow" target="_self">GitKraken</a></li><li><a href="#Navicat_294" rel="nofollow" target="_self">Navicat</a></li></ul><li><a href="#_298" rel="nofollow" target="_self">并发编程</a></li><ul><li><a href="#_300" rel="nofollow" target="_self">基础知识</a></li><li><a href="#_311" rel="nofollow" target="_self">并发理论</a></li><li><a href="#_322" rel="nofollow" target="_self">并发关键字</a></li><li><a href="#Lock_332" rel="nofollow" target="_self">Lock体系</a></li><li><a href="#_357" rel="nofollow" target="_self">并发容器</a></li><li><a href="#_371" rel="nofollow" target="_self">线程池</a></li><li><a href="#_382" rel="nofollow" target="_self">原子操作类</a></li><li><a href="#_390" rel="nofollow" target="_self">并发工具</a></li><li><a href="#_399" rel="nofollow" target="_self">并发实践</a></li></ul><li><a href="#_409" rel="nofollow" target="_self">数据结构与算法</a></li><ul><li><a href="#_411" rel="nofollow" target="_self">数据结构</a></li><li><a href="#_438" rel="nofollow" target="_self">算法</a></li><ul><li><a href="#_461" rel="nofollow" target="_self">排序算法</a></li></ul><li><a href="#LeetCode_479" rel="nofollow" target="_self">LeetCode</a></li></ul><li><a href="#_498" rel="nofollow" target="_self">数据库</a></li><ul><li><a href="#Oracle_500" rel="nofollow" target="_self">Oracle</a></li><li><a href="#MySQL_504" rel="nofollow" target="_self">MySQL</a></li><ul><li><a href="#_506" rel="nofollow" target="_self">数据库基础知识</a></li><li><a href="#_508" rel="nofollow" target="_self">数据类型</a></li><li><a href="#_510" rel="nofollow" target="_self">引擎</a></li><li><a href="#_512" rel="nofollow" target="_self">索引</a></li><li><a href="#_514" rel="nofollow" target="_self">三大范式</a></li><li><a href="#SQL_516" rel="nofollow" target="_self">常用SQL语句</a></li><li><a href="#_518" rel="nofollow" target="_self">存储过程与函数</a></li><li><a href="#_520" rel="nofollow" target="_self">视图</a></li><li><a href="#MySQL_522" rel="nofollow" target="_self">MySQL优化</a></li><li><a href="#_524" rel="nofollow" target="_self">事务</a></li><li><a href="#_526" rel="nofollow" target="_self">数据备份与还原</a></li></ul><li><a href="#Redis_530" rel="nofollow" target="_self">Redis</a></li></ul><li><a href="#Java_551" rel="nofollow" target="_self">Java虚拟机</a></li><ul><li><a href="#Java_553" rel="nofollow" target="_self">深入理解Java虚拟机</a></li></ul><li><a href="#_566" rel="nofollow" target="_self">架构设计</a></li><ul><li><a href="#_578" rel="nofollow" target="_self">设计模式</a></li><ul><li><a href="#_599" rel="nofollow" target="_self">创建型模式</a></li><li><a href="#_611" rel="nofollow" target="_self">结构型模式</a></li><li><a href="#_626" rel="nofollow" target="_self">行为型模式</a></li><li><a href="#J2EE_645" rel="nofollow" target="_self">J2EE模式</a></li><li><a href="#_660" rel="nofollow" target="_self">实践应用</a></li></ul></ul><li><a href="#_672" rel="nofollow" target="_self">应用框架</a></li><ul><li><a href="#Spring_745" rel="nofollow" target="_self">Spring</a></li><ul><li><a href="#Spring_756" rel="nofollow" target="_self">《Spring实战》读书笔记</a></li></ul><li><a href="#Spring_MVC_770" rel="nofollow" target="_self">Spring MVC</a></li><li><a href="#MyBatis_774" rel="nofollow" target="_self">MyBatis</a></li><li><a href="#Hibernate_796" rel="nofollow" target="_self">Hibernate</a></li><li><a href="#Shiro_800" rel="nofollow" target="_self">Shiro</a></li><li><a href="#Spring_Security_802" rel="nofollow" target="_self">Spring Security</a></li><li><a href="#Netty_806" rel="nofollow" target="_self">Netty</a></li><li><a href="#_810" rel="nofollow" target="_self">搜索引擎</a></li><ul><li><a href="#LuceneSolr_812" rel="nofollow" target="_self">Lucene/Solr</a></li><li><a href="#Elasticsearch_814" rel="nofollow" target="_self">Elasticsearch</a></li><li><a href="#ELK_816" rel="nofollow" target="_self">ELK</a></li></ul></ul><li><a href="#_826" rel="nofollow" target="_self">中间件</a></li><ul><li><a href="#_828" rel="nofollow" target="_self">消息中间件</a></li><ul><li><a href="#RabbitMQ_830" rel="nofollow" target="_self">RabbitMQ</a></li><li><a href="#RocketMQ_832" rel="nofollow" target="_self">RocketMQ</a></li><li><a href="#ActiveMQ_834" rel="nofollow" target="_self">ActiveMQ</a></li><li><a href="#Kafka_836" rel="nofollow" target="_self">Kafka</a></li></ul><li><a href="#_842" rel="nofollow" target="_self">远程过程调用中间件</a></li><ul><li><a href="#Dubbo_844" rel="nofollow" target="_self">Dubbo</a></li></ul><li><a href="#_850" rel="nofollow" target="_self">数据访问中间件</a></li><li><a href="#Web_858" rel="nofollow" target="_self">Web应用服务器</a></li><ul><li><a href="#Tomcat_860" rel="nofollow" target="_self">Tomcat</a></li><li><a href="#Nginx_876" rel="nofollow" target="_self">Nginx</a></li></ul><li><a href="#_880" rel="nofollow" target="_self">缓存</a></li><li><a href="#_892" rel="nofollow" target="_self">其他</a></li><ul><li><a href="#Zookeeper_894" rel="nofollow" target="_self">Zookeeper</a></li></ul></ul><li><a href="#_900" rel="nofollow" target="_self">微服务与分布式</a></li><ul><li><a href="#Spring_Boot_902" rel="nofollow" target="_self">Spring Boot</a></li><li><a href="#Spring_Cloud_911" rel="nofollow" target="_self">Spring Cloud</a></li><li><a href="#_938" rel="nofollow" target="_self">服务注册发现</a></li><li><a href="#_940" rel="nofollow" target="_self">服务配置</a></li><li><a href="#_942" rel="nofollow" target="_self">负载均衡</a></li><li><a href="#_944" rel="nofollow" target="_self">服务调用</a></li><li><a href="#_946" rel="nofollow" target="_self">服务限流</a></li><li><a href="#_948" rel="nofollow" target="_self">熔断降级</a></li><li><a href="#_950" rel="nofollow" target="_self">网关路由</a></li><li><a href="#_952" rel="nofollow" target="_self">服务权限</a></li><li><a href="#_954" rel="nofollow" target="_self">链路追踪</a></li><li><a href="#_956" rel="nofollow" target="_self">分布式事务</a></li><li><a href="#_958" rel="nofollow" target="_self">分布式缓存</a></li><li><a href="#_960" rel="nofollow" target="_self">分布式会话</a></li><li><a href="#_962" rel="nofollow" target="_self">日志收集</a></li><li><a href="#_964" rel="nofollow" target="_self">服务监控</a></li><li><a href="#_966" rel="nofollow" target="_self">消息驱动</a></li><li><a href="#_968" rel="nofollow" target="_self">数据处理流</a></li><li><a href="#_970" rel="nofollow" target="_self">自动化测试与部署</a></li><li><a href="#_972" rel="nofollow" target="_self">第三方支持</a></li><li><a href="#Zookeeper_974" rel="nofollow" target="_self">分布式协调服务Zookeeper</a></li></ul><li><a href="#_978" rel="nofollow" target="_self">程序员的一些思考</a></li><li><a href="#_987" rel="nofollow" target="_self">项目管理</a></li><ul><li><a href="#_989" rel="nofollow" target="_self">需求调研</a></li><li><a href="#_991" rel="nofollow" target="_self">项目管理</a></li><li><a href="#_993" rel="nofollow" target="_self">代码管理</a></li><li><a href="#_995" rel="nofollow" target="_self">文档管理</a></li><li><a href="#_997" rel="nofollow" target="_self">测试</a></li></ul><li><a href="#_1003" rel="nofollow" target="_self">运维</a></li><li><a href="#_1027" rel="nofollow" target="_self">操作系统</a></li><li><a href="#_1043" rel="nofollow" target="_self">推荐书籍</a></li><li><a href="#_1049" rel="nofollow" target="_self">云计算</a></li><li><a href="#_1055" rel="nofollow" target="_self">搜索引擎</a></li><li><a href="#_1061" rel="nofollow" target="_self">权限管理</a></li><li><a href="#_1067" rel="nofollow" target="_self">区块链</a></li></ul></ul></div><p></p>
<h2><a name="t1"></a><a name="t1"></a><a id="Java_10"></a>Java面试总结</h2>
<p>Java面试总结汇总，整理了包括Java基础知识，集合容器，并发编程，JVM，常用开源框架Spring，MyBatis，数据库，中间件等，包含了作为一个Java工程师在面试中需要用到或者可能用到的绝大部分知识。欢迎大家阅读，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽。文章持续更新中…</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java基础知识面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390612</a></td>
</tr>
<tr>
<td>2</td>
<td>Java集合容器面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588551" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588551</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390689" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390689</a></td>
</tr>
<tr>
<td>4</td>
<td>并发编程面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104863992" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104863992</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390752" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390752</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397516" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397516</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring MVC面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397427" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397427</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Boot面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397299" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397299</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397367" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397367</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/101292950" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/101292950</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/103522351" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/103522351</a></td>
</tr>
<tr>
<td>12</td>
<td>MySQL数据库面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104778621" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104778621</a></td>
</tr>
<tr>
<td>13</td>
<td>消息中间件MQ与RabbitMQ面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588612</a></td>
</tr>
<tr>
<td>14</td>
<td>Dubbo面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390006" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390006</a></td>
</tr>
<tr>
<td>15</td>
<td>Linux面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588679" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588679</a></td>
</tr>
<tr>
<td>16</td>
<td>Tomcat面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397665" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397665</a></td>
</tr>
<tr>
<td>17</td>
<td>ZooKeeper面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397719" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397719</a></td>
</tr>
<tr>
<td>18</td>
<td>Netty面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104391081" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104391081</a></td>
</tr>
</tbody>
</table></div><h2><a name="t2"></a><a name="t2"></a><a id="_37"></a>基础知识</h2>
<h3><a name="t3"></a><a name="t3"></a><a id="Java_39"></a>Java概述</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353575">https://blog.csdn.net/ThinkWon/article/details/94353575</a></td>
</tr>
<tr>
<td>2</td>
<td>Java发展历程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353653">https://blog.csdn.net/ThinkWon/article/details/94353653</a></td>
</tr>
<tr>
<td>3</td>
<td>Java语言特点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354013">https://blog.csdn.net/ThinkWon/article/details/94354013</a></td>
</tr>
<tr>
<td>4</td>
<td>JDK安装与环境变量配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353907">https://blog.csdn.net/ThinkWon/article/details/94353907</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM、JRE和JDK的关系</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101369973">https://blog.csdn.net/ThinkWon/article/details/101369973</a></td>
</tr>
</tbody>
</table></div><h3><a name="t4"></a><a name="t4"></a><a id="_51"></a>基础语法</h3>
<p>大部分已完成</p>
<p>待整理：</p>
<p>Java开发必会的反编译知识（附支持对Lambda进行反编译的工具）</p>
<p>一文读懂什么是Java中的自动拆装箱</p>
<p>Java的枚举类型用法介绍</p>
<p>类、枚举、接口、数组、可变参数</p>
<p>泛型、序列化</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java标识符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101637454">https://blog.csdn.net/ThinkWon/article/details/101637454</a></td>
</tr>
<tr>
<td>2</td>
<td>Java关键字(Java 8版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101642385">https://blog.csdn.net/ThinkWon/article/details/101642385</a></td>
</tr>
<tr>
<td>3</td>
<td>Java注释</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643185">https://blog.csdn.net/ThinkWon/article/details/101643185</a></td>
</tr>
<tr>
<td>4</td>
<td>Java访问修饰符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643412">https://blog.csdn.net/ThinkWon/article/details/101643412</a></td>
</tr>
<tr>
<td>5</td>
<td>Java分隔符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643617">https://blog.csdn.net/ThinkWon/article/details/101643617</a></td>
</tr>
<tr>
<td>6</td>
<td>Java转义字符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643769">https://blog.csdn.net/ThinkWon/article/details/101643769</a></td>
</tr>
<tr>
<td>7</td>
<td>Java进制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643936">https://blog.csdn.net/ThinkWon/article/details/101643936</a></td>
</tr>
<tr>
<td>8</td>
<td>Java流程控制语句</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645978">https://blog.csdn.net/ThinkWon/article/details/101645978</a></td>
</tr>
<tr>
<td>9</td>
<td>Java流程控制语句-顺序结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101644820">https://blog.csdn.net/ThinkWon/article/details/101644820</a></td>
</tr>
<tr>
<td>10</td>
<td>Java流程控制语句-分支结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645224">https://blog.csdn.net/ThinkWon/article/details/101645224</a></td>
</tr>
<tr>
<td>11</td>
<td>Java流程控制语句-循环结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645757">https://blog.csdn.net/ThinkWon/article/details/101645757</a></td>
</tr>
<tr>
<td>12</td>
<td>Java表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101648114">https://blog.csdn.net/ThinkWon/article/details/101648114</a></td>
</tr>
<tr>
<td>13</td>
<td>Java运算符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649002">https://blog.csdn.net/ThinkWon/article/details/101649002</a></td>
</tr>
<tr>
<td>14</td>
<td>Java变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649292">https://blog.csdn.net/ThinkWon/article/details/101649292</a></td>
</tr>
<tr>
<td>15</td>
<td>Java常量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649446">https://blog.csdn.net/ThinkWon/article/details/101649446</a></td>
</tr>
<tr>
<td>16</td>
<td>Java数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649568">https://blog.csdn.net/ThinkWon/article/details/101649568</a></td>
</tr>
<tr>
<td>17</td>
<td>Java反射</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100128361">https://blog.csdn.net/ThinkWon/article/details/100128361</a></td>
</tr>
<tr>
<td>18</td>
<td>Java语法糖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100103689">https://blog.csdn.net/ThinkWon/article/details/100103689</a></td>
</tr>
<tr>
<td>19</td>
<td>Java注解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100178709">https://blog.csdn.net/ThinkWon/article/details/100178709</a></td>
</tr>
<tr>
<td>20</td>
<td>JSON简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642585">https://blog.csdn.net/ThinkWon/article/details/100642585</a></td>
</tr>
<tr>
<td>21</td>
<td>Properties类简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667783">https://blog.csdn.net/ThinkWon/article/details/100667783</a></td>
</tr>
<tr>
<td>22</td>
<td>XML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642425">https://blog.csdn.net/ThinkWon/article/details/100642425</a></td>
</tr>
<tr>
<td>23</td>
<td>YML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642870">https://blog.csdn.net/ThinkWon/article/details/100642870</a></td>
</tr>
<tr>
<td>24</td>
<td>Java8新特性-Lambda表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642932">https://blog.csdn.net/ThinkWon/article/details/100642932</a></td>
</tr>
<tr>
<td>25</td>
<td>Java基础语法</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354151">https://blog.csdn.net/ThinkWon/article/details/94354151</a></td>
</tr>
</tbody>
</table></div><h3><a name="t5"></a><a name="t5"></a><a id="_98"></a>面向对象</h3>
<p>待整理：</p>
<p>抽象</p>
<p>继承、封装、多态</p>
<p>接口、抽象类、内部类</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>什么是面向对象</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667386">https://blog.csdn.net/ThinkWon/article/details/100667386</a></td>
</tr>
</tbody>
</table></div><h3><a name="t6"></a><a name="t6"></a><a id="_114"></a>集合框架</h3>
<p>迭代器、增强for、泛型</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java集合框架总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98844796">https://blog.csdn.net/ThinkWon/article/details/98844796</a></td>
</tr>
<tr>
<td>2</td>
<td>ArrayList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845119">https://blog.csdn.net/ThinkWon/article/details/98845119</a></td>
</tr>
<tr>
<td>3</td>
<td>HashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845487">https://blog.csdn.net/ThinkWon/article/details/98845487</a></td>
</tr>
<tr>
<td>4</td>
<td>LinkedHashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102574293">https://blog.csdn.net/ThinkWon/article/details/102574293</a></td>
</tr>
<tr>
<td>5</td>
<td>LinkedList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102573923">https://blog.csdn.net/ThinkWon/article/details/102573923</a></td>
</tr>
<tr>
<td>6</td>
<td>TreeMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571883">https://blog.csdn.net/ThinkWon/article/details/102571883</a></td>
</tr>
</tbody>
</table></div><h3><a name="t7"></a><a name="t7"></a><a id="IO_129"></a>IO流</h3>
<p>待整理：</p>
<p>File、递归</p>
<p>字节流、字节缓冲流</p>
<p>编码表、编码方式、转换流、序列化、序列化流、打印流、commons-io</p>
<h3><a name="t8"></a><a name="t8"></a><a id="_143"></a>网络编程</h3>
<p>网络概述、网络模型</p>
<p>Socket原理机制</p>
<p>UDP</p>
<p>TCP/IP</p>
<p>协议、OSI 七层协议、HTTP、HTTP2.0、HTTPS</p>
<p>网络安全</p>
<p>	XSS、CSRF、SQL注入、Hash Dos、脚本注入、漏洞扫描工具、验证码</p>
<p>	DDoS防范、用户隐私信息保护、序列化漏洞</p>
<p>	加密解密、对称加密、哈希算法、非对称加密</p>
<p>	服务安全、数据安全、数据备份</p>
<p>	网络隔离、登录跳板机、非外网分离</p>
<p>	认证、授权</p>
<h3><a name="t9"></a><a name="t9"></a><a id="API_173"></a>常用API</h3>
<p>Date、DateFormat、Calendar</p>
<p>String、StringBuffer、StringBuilder、正则表达式</p>
<p>Number、Radom、Math、System、包装类</p>
<p>Arrays、Collections</p>
<h3><a name="t10"></a><a name="t10"></a><a id="_185"></a>常用工具类库</h3>
<p>待整理：OkHttp、commons-lang3</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>HttpClient工具类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101391489">https://blog.csdn.net/ThinkWon/article/details/101391489</a></td>
</tr>
<tr>
<td>2</td>
<td>WGS84地球坐标系，GCJ02火星坐标系，BD09百度坐标系简介与转换</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392187">https://blog.csdn.net/ThinkWon/article/details/101392187</a></td>
</tr>
<tr>
<td>3</td>
<td>Lombok简介、使用、工作原理、优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392808">https://blog.csdn.net/ThinkWon/article/details/101392808</a></td>
</tr>
<tr>
<td>4</td>
<td>Java几种常用JSON库性能比较</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354358">https://blog.csdn.net/ThinkWon/article/details/94354358</a></td>
</tr>
</tbody>
</table></div><h3><a name="t11"></a><a name="t11"></a><a id="_198"></a>单元测试</h3>
<p>JUnit</p>
<h3><a name="t12"></a><a name="t12"></a><a id="_204"></a>异常</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java异常总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>2</td>
<td>Java异常架构与异常关键字</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101676779">https://blog.csdn.net/ThinkWon/article/details/101676779</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101677638">https://blog.csdn.net/ThinkWon/article/details/101677638</a></td>
</tr>
<tr>
<td>4</td>
<td>如何选择异常类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>5</td>
<td>Java异常常见面试题</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101681073">https://blog.csdn.net/ThinkWon/article/details/101681073</a></td>
</tr>
<tr>
<td>6</td>
<td>Java异常处理最佳实践</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94347002">https://blog.csdn.net/ThinkWon/article/details/94347002</a></td>
</tr>
</tbody>
</table></div><h3><a name="t13"></a><a name="t13"></a><a id="_217"></a>日志</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>常用日志框架Log4j，Logback，Log4j2性能比较与日志门面SLF4J简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101621135">https://blog.csdn.net/ThinkWon/article/details/101621135</a></td>
</tr>
<tr>
<td>2</td>
<td>日志作用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101619725">https://blog.csdn.net/ThinkWon/article/details/101619725</a></td>
</tr>
<tr>
<td>3</td>
<td>Apache Log4j2详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95043111">https://blog.csdn.net/ThinkWon/article/details/95043111</a></td>
</tr>
<tr>
<td>4</td>
<td>Log4j2同步日志，混合日志和异步日志配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625124">https://blog.csdn.net/ThinkWon/article/details/101625124</a></td>
</tr>
<tr>
<td>5</td>
<td>Log4j2配置文件详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101629302">https://blog.csdn.net/ThinkWon/article/details/101629302</a></td>
</tr>
<tr>
<td>6</td>
<td>Log4j2的Appenders配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625820">https://blog.csdn.net/ThinkWon/article/details/101625820</a></td>
</tr>
<tr>
<td>7</td>
<td>Log4j2的Filters配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101627162">https://blog.csdn.net/ThinkWon/article/details/101627162</a></td>
</tr>
<tr>
<td>8</td>
<td>Log4j2的Policy触发策略与Strategy滚动策略配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628222">https://blog.csdn.net/ThinkWon/article/details/101628222</a></td>
</tr>
<tr>
<td>9</td>
<td>Log4j2的Loggers配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628736">https://blog.csdn.net/ThinkWon/article/details/101628736</a></td>
</tr>
</tbody>
</table></div><h2><a name="t14"></a><a name="t14"></a><a id="_233"></a>工具</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="IDEA_235"></a>IDEA</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>IDEA常用配置和常用插件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101020481">https://blog.csdn.net/ThinkWon/article/details/101020481</a></td>
</tr>
<tr>
<td>2</td>
<td>IDEA中Maven依赖下载失败解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101312918">https://blog.csdn.net/ThinkWon/article/details/101312918</a></td>
</tr>
</tbody>
</table></div><h3><a name="t16"></a><a name="t16"></a><a id="Eclipse__STS_244"></a>Eclipse &amp; STS</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Eclipse &amp; Spring Tool Suite常用配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101025543">https://blog.csdn.net/ThinkWon/article/details/101025543</a></td>
</tr>
</tbody>
</table></div><h3><a name="t17"></a><a name="t17"></a><a id="Maven_252"></a>Maven</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Maven简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346090">https://blog.csdn.net/ThinkWon/article/details/94346090</a></td>
</tr>
<tr>
<td>2</td>
<td>Maven安装与配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346569">https://blog.csdn.net/ThinkWon/article/details/94346569</a></td>
</tr>
<tr>
<td>3</td>
<td>Maven依赖冲突</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483020">https://blog.csdn.net/ThinkWon/article/details/101483020</a></td>
</tr>
<tr>
<td>4</td>
<td>手动安装Maven依赖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483478">https://blog.csdn.net/ThinkWon/article/details/101483478</a></td>
</tr>
<tr>
<td>5</td>
<td>Maven部署jar包到远程仓库</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483769">https://blog.csdn.net/ThinkWon/article/details/101483769</a></td>
</tr>
<tr>
<td>6</td>
<td>Maven私服Nexus安装与使用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346681">https://blog.csdn.net/ThinkWon/article/details/94346681</a></td>
</tr>
</tbody>
</table></div><h3><a name="t18"></a><a name="t18"></a><a id="Docker_265"></a>Docker</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>使用Docker安装GitLab</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95042797">https://blog.csdn.net/ThinkWon/article/details/95042797</a></td>
</tr>
</tbody>
</table></div><h3><a name="t19"></a><a name="t19"></a><a id="Git_273"></a>Git</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Git简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346816">https://blog.csdn.net/ThinkWon/article/details/94346816</a></td>
</tr>
<tr>
<td>2</td>
<td>版本控制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449228">https://blog.csdn.net/ThinkWon/article/details/101449228</a></td>
</tr>
<tr>
<td>3</td>
<td>Git忽略文件.gitignore详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101447866">https://blog.csdn.net/ThinkWon/article/details/101447866</a></td>
</tr>
<tr>
<td>4</td>
<td>Git与SVN的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449611">https://blog.csdn.net/ThinkWon/article/details/101449611</a></td>
</tr>
<tr>
<td>5</td>
<td>常用Git命令</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101450420">https://blog.csdn.net/ThinkWon/article/details/101450420</a></td>
</tr>
<tr>
<td>6</td>
<td>Git，GitHub与GitLab的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101470086">https://blog.csdn.net/ThinkWon/article/details/101470086</a></td>
</tr>
</tbody>
</table></div><h3><a name="t20"></a><a name="t20"></a><a id="GitLab_286"></a>GitLab</h3>
<h3><a name="t21"></a><a name="t21"></a><a id="GitKraken_290"></a>GitKraken</h3>
<h3><a name="t22"></a><a name="t22"></a><a id="Navicat_294"></a>Navicat</h3>
<h2><a name="t23"></a><a name="t23"></a><a id="_298"></a>并发编程</h2>
<h3><a name="t24"></a><a name="t24"></a><a id="_300"></a>基础知识</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发编程的优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102020811">https://blog.csdn.net/ThinkWon/article/details/102020811</a></td>
</tr>
<tr>
<td>2</td>
<td>线程的状态和基本操作</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102027115">https://blog.csdn.net/ThinkWon/article/details/102027115</a></td>
</tr>
<tr>
<td>3</td>
<td>进程和线程的区别(超详细)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">https://blog.csdn.net/ThinkWon/article/details/102021274</a></td>
</tr>
<tr>
<td>4</td>
<td>创建线程的四种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021143">https://blog.csdn.net/ThinkWon/article/details/102021143</a></td>
</tr>
</tbody>
</table></div><h3><a name="t25"></a><a name="t25"></a><a id="_311"></a>并发理论</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java内存模型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073578">https://blog.csdn.net/ThinkWon/article/details/102073578</a></td>
</tr>
<tr>
<td>2</td>
<td>重排序与数据依赖性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073858">https://blog.csdn.net/ThinkWon/article/details/102073858</a></td>
</tr>
<tr>
<td>3</td>
<td>as-if-serial规则和happens-before规则的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074107">https://blog.csdn.net/ThinkWon/article/details/102074107</a></td>
</tr>
<tr>
<td>4</td>
<td>Java并发理论总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074440">https://blog.csdn.net/ThinkWon/article/details/102074440</a></td>
</tr>
</tbody>
</table></div><h3><a name="t26"></a><a name="t26"></a><a id="_322"></a>并发关键字</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java并发关键字-synchronized</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243189">https://blog.csdn.net/ThinkWon/article/details/102243189</a></td>
</tr>
<tr>
<td>2</td>
<td>Java并发关键字-volatile</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243670">https://blog.csdn.net/ThinkWon/article/details/102243670</a></td>
</tr>
<tr>
<td>3</td>
<td>Java并发关键字-final</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102244477">https://blog.csdn.net/ThinkWon/article/details/102244477</a></td>
</tr>
</tbody>
</table></div><h3><a name="t27"></a><a name="t27"></a><a id="Lock_332"></a>Lock体系</h3>
<p>待整理：</p>
<p>公平锁 &amp; 非公平锁</p>
<p>乐观锁 &amp; 悲观锁</p>
<p>可重入锁 &amp; 不可重入锁</p>
<p>互斥锁 &amp; 共享锁</p>
<p>死锁</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Lock简介与初识AQS</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102468837">https://blog.csdn.net/ThinkWon/article/details/102468837</a></td>
</tr>
<tr>
<td>2</td>
<td>AQS(AbstractQueuedSynchronizer)详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469112">https://blog.csdn.net/ThinkWon/article/details/102469112</a></td>
</tr>
<tr>
<td>3</td>
<td>ReentrantLock(重入锁)实现原理与公平锁非公平锁区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469388">https://blog.csdn.net/ThinkWon/article/details/102469388</a></td>
</tr>
<tr>
<td>4</td>
<td>读写锁ReentrantReadWriteLock源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469598">https://blog.csdn.net/ThinkWon/article/details/102469598</a></td>
</tr>
<tr>
<td>5</td>
<td>Condition源码分析与等待通知机制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469889">https://blog.csdn.net/ThinkWon/article/details/102469889</a></td>
</tr>
<tr>
<td>6</td>
<td>LockSupport详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469993">https://blog.csdn.net/ThinkWon/article/details/102469993</a></td>
</tr>
</tbody>
</table></div><h3><a name="t28"></a><a name="t28"></a><a id="_357"></a>并发容器</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102506447">https://blog.csdn.net/ThinkWon/article/details/102506447</a></td>
</tr>
<tr>
<td>2</td>
<td>并发容器之ConcurrentLinkedQueue详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508089">https://blog.csdn.net/ThinkWon/article/details/102508089</a></td>
</tr>
<tr>
<td>3</td>
<td>并发容器之CopyOnWriteArrayList详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508258">https://blog.csdn.net/ThinkWon/article/details/102508258</a></td>
</tr>
<tr>
<td>4</td>
<td>并发容器之ThreadLocal详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508381">https://blog.csdn.net/ThinkWon/article/details/102508381</a></td>
</tr>
<tr>
<td>5</td>
<td>ThreadLocal内存泄漏分析与解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508721">https://blog.csdn.net/ThinkWon/article/details/102508721</a></td>
</tr>
<tr>
<td>6</td>
<td>并发容器之BlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508901">https://blog.csdn.net/ThinkWon/article/details/102508901</a></td>
</tr>
<tr>
<td>7</td>
<td>并发容器之ArrayBlockingQueue与LinkedBlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508971">https://blog.csdn.net/ThinkWon/article/details/102508971</a></td>
</tr>
</tbody>
</table></div><h3><a name="t29"></a><a name="t29"></a><a id="_371"></a>线程池</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>线程池ThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541900">https://blog.csdn.net/ThinkWon/article/details/102541900</a></td>
</tr>
<tr>
<td>2</td>
<td>Executors类创建四种常见线程池</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541990">https://blog.csdn.net/ThinkWon/article/details/102541990</a></td>
</tr>
<tr>
<td>3</td>
<td>线程池之ScheduledThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542299">https://blog.csdn.net/ThinkWon/article/details/102542299</a></td>
</tr>
<tr>
<td>4</td>
<td>FutureTask详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542404">https://blog.csdn.net/ThinkWon/article/details/102542404</a></td>
</tr>
</tbody>
</table></div><h3><a name="t30"></a><a name="t30"></a><a id="_382"></a>原子操作类</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>原子操作类总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556910">https://blog.csdn.net/ThinkWon/article/details/102556910</a></td>
</tr>
</tbody>
</table></div><h3><a name="t31"></a><a name="t31"></a><a id="_390"></a>并发工具</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发工具之CountDownLatch与CyclicBarrier</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556958">https://blog.csdn.net/ThinkWon/article/details/102556958</a></td>
</tr>
<tr>
<td>2</td>
<td>并发工具之Semaphore与Exchanger</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557034">https://blog.csdn.net/ThinkWon/article/details/102557034</a></td>
</tr>
</tbody>
</table></div><h3><a name="t32"></a><a name="t32"></a><a id="_399"></a>并发实践</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>实现生产者消费者的三种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557126">https://blog.csdn.net/ThinkWon/article/details/102557126</a></td>
</tr>
</tbody>
</table></div><h2><a name="t33"></a><a name="t33"></a><a id="_409"></a>数据结构与算法</h2>
<h3><a name="t34"></a><a name="t34"></a><a id="_411"></a>数据结构</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>红黑树详细分析(图文详解)，看了都说好</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571535">https://blog.csdn.net/ThinkWon/article/details/102571535</a></td>
</tr>
</tbody>
</table></div><pre class="prettyprint"><code class="prism language-sh has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、数组

2、栈
3、队列
4、链表
5、树
	二叉树
    完全二叉树
    平衡二叉树
    二叉查找树（BST）
    红黑树
    B，B+，B*树
    LSM 树

字段是不是数据结构


<h3><a name="t35"></a><a name="t35"></a><a id="_438"></a>算法</h3>
<p>语言只是编程工具，算法才是编程之魂！</p>
<pre class="prettyprint"><code class="prism language-text has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、排序算法：快速排序、归并排序、计数排序
2、搜索算法：回溯、递归、剪枝
3、图论：最短路径、最小生成树、网络流建模
4、动态规划：背包问题、最长子序列、计数问题
5、基础技巧：分治、倍增、二分法、贪心算法


宽度优先搜索
深度优先搜索
广度优先
双指针
扫描线

朴素贝叶斯
推荐算法

<h4><a id="_461"></a>排序算法</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>史上最全经典排序算法总结(Java实现)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95616819">https://blog.csdn.net/ThinkWon/article/details/95616819</a></td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序（Bubble Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534473">https://blog.csdn.net/ThinkWon/article/details/101534473</a></td>
</tr>
<tr>
<td>3</td>
<td>选择排序（Selection Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534721">https://blog.csdn.net/ThinkWon/article/details/101534721</a></td>
</tr>
<tr>
<td>4</td>
<td>插入排序（Insertion Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101537804">https://blog.csdn.net/ThinkWon/article/details/101537804</a></td>
</tr>
<tr>
<td>5</td>
<td>希尔排序（Shell Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538166">https://blog.csdn.net/ThinkWon/article/details/101538166</a></td>
</tr>
<tr>
<td>6</td>
<td>归并排序（Merge Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538756">https://blog.csdn.net/ThinkWon/article/details/101538756</a></td>
</tr>
<tr>
<td>7</td>
<td>快速排序（Quick Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543580">https://blog.csdn.net/ThinkWon/article/details/101543580</a></td>
</tr>
<tr>
<td>8</td>
<td>堆排序（Heap Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543941">https://blog.csdn.net/ThinkWon/article/details/101543941</a></td>
</tr>
<tr>
<td>9</td>
<td>计数排序（Counting Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544159">https://blog.csdn.net/ThinkWon/article/details/101544159</a></td>
</tr>
<tr>
<td>10</td>
<td>桶排序（Bucket Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544356">https://blog.csdn.net/ThinkWon/article/details/101544356</a></td>
</tr>
<tr>
<td>11</td>
<td>基数排序（Radix Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101545529">https://blog.csdn.net/ThinkWon/article/details/101545529</a></td>
</tr>
</tbody>
</table></div><h3><a name="t36"></a><a name="t36"></a><a id="LeetCode_479"></a>LeetCode</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>LeetCode第1题 两数之和(Two Sum)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113049">https://blog.csdn.net/ThinkWon/article/details/103113049</a></td>
</tr>
<tr>
<td>2</td>
<td>LeetCode第3题 无重复字符的最长子串(Longest Substring Without Repeating Characters)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113969">https://blog.csdn.net/ThinkWon/article/details/103113969</a></td>
</tr>
<tr>
<td>3</td>
<td>LeetCode第7题 整数反转(Reverse Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113167">https://blog.csdn.net/ThinkWon/article/details/103113167</a></td>
</tr>
<tr>
<td>4</td>
<td>LeetCode第9题 回文数(Palindrome Number)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113151">https://blog.csdn.net/ThinkWon/article/details/103113151</a></td>
</tr>
<tr>
<td>5</td>
<td>LeetCode第13题 罗马数字转整数(Roman to Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113519">https://blog.csdn.net/ThinkWon/article/details/103113519</a></td>
</tr>
<tr>
<td>6</td>
<td>LeetCode第14题 最长公共前缀(Longest Common Prefix)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113700">https://blog.csdn.net/ThinkWon/article/details/103113700</a></td>
</tr>
<tr>
<td>7</td>
<td>LeetCode第20题 有效的括号(Valid Parentheses)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113848">https://blog.csdn.net/ThinkWon/article/details/103113848</a></td>
</tr>
<tr>
<td>8</td>
<td>LeetCode第26题 删除排序数组中的重复项(Remove Duplicates from Sorted Array)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113097">https://blog.csdn.net/ThinkWon/article/details/103113097</a></td>
</tr>
</tbody>
</table></div><h2><a name="t37"></a><a name="t37"></a><a id="_498"></a>数据库</h2>
<h3><a name="t38"></a><a name="t38"></a><a id="Oracle_500"></a>Oracle</h3>
<h3><a name="t39"></a><a name="t39"></a><a id="MySQL_504"></a>MySQL</h3>
<h4><a id="_506"></a>数据库基础知识</h4>
<h4><a id="_508"></a>数据类型</h4>
<h4><a id="_510"></a>引擎</h4>
<h4><a id="_512"></a>索引</h4>
<h4><a id="_514"></a>三大范式</h4>
<h4><a id="SQL_516"></a>常用SQL语句</h4>
<h4><a id="_518"></a>存储过程与函数</h4>
<h4><a id="_520"></a>视图</h4>
<h4><a id="MySQL_522"></a>MySQL优化</h4>
<h4><a id="_524"></a>事务</h4>
<h4><a id="_526"></a>数据备份与还原</h4>
<h3><a name="t40"></a><a name="t40"></a><a id="Redis_530"></a>Redis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Redis总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/99999584">https://blog.csdn.net/ThinkWon/article/details/99999584</a></td>
</tr>
<tr>
<td>2</td>
<td>Redis使用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521497">https://blog.csdn.net/ThinkWon/article/details/101521497</a></td>
</tr>
<tr>
<td>3</td>
<td>Redis数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521724">https://blog.csdn.net/ThinkWon/article/details/101521724</a></td>
</tr>
<tr>
<td>4</td>
<td>Redis持久化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522209">https://blog.csdn.net/ThinkWon/article/details/101522209</a></td>
</tr>
<tr>
<td>5</td>
<td>Redis过期键的删除策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522970">https://blog.csdn.net/ThinkWon/article/details/101522970</a></td>
</tr>
<tr>
<td>6</td>
<td>Redis数据淘汰策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530624">https://blog.csdn.net/ThinkWon/article/details/101530624</a></td>
</tr>
<tr>
<td>7</td>
<td>Redis与Memcached的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530406">https://blog.csdn.net/ThinkWon/article/details/101530406</a></td>
</tr>
<tr>
<td>8</td>
<td>Redis常见面试题(精简版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></td>
</tr>
<tr>
<td>9</td>
<td>Redis中缓存雪崩、缓存穿透等问题的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103402008">https://blog.csdn.net/ThinkWon/article/details/103402008</a></td>
</tr>
<tr>
<td>10</td>
<td>阿里云Redis开发规范学习总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103400250">https://blog.csdn.net/ThinkWon/article/details/103400250</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis开发常用规范</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401781">https://blog.csdn.net/ThinkWon/article/details/103401781</a></td>
</tr>
<tr>
<td>12</td>
<td>这可能是最中肯的Redis规范了</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401978">https://blog.csdn.net/ThinkWon/article/details/103401978</a></td>
</tr>
</tbody>
</table></div><h2><a name="t41"></a><a name="t41"></a><a id="Java_551"></a>Java虚拟机</h2>
<h3><a name="t42"></a><a name="t42"></a><a id="Java_553"></a>深入理解Java虚拟机</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>深入理解Java虚拟机-走近Java</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103804387">https://blog.csdn.net/ThinkWon/article/details/103804387</a></td>
</tr>
<tr>
<td>2</td>
<td>深入理解Java虚拟机-Java内存区域与内存溢出异常</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103827387">https://blog.csdn.net/ThinkWon/article/details/103827387</a></td>
</tr>
<tr>
<td>3</td>
<td>深入理解Java虚拟机-垃圾回收器与内存分配策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103831676">https://blog.csdn.net/ThinkWon/article/details/103831676</a></td>
</tr>
<tr>
<td>4</td>
<td>深入理解Java虚拟机-虚拟机执行子系统</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835168">https://blog.csdn.net/ThinkWon/article/details/103835168</a></td>
</tr>
<tr>
<td>5</td>
<td>深入理解Java虚拟机-程序编译与代码优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835883">https://blog.csdn.net/ThinkWon/article/details/103835883</a></td>
</tr>
<tr>
<td>6</td>
<td>深入理解Java虚拟机-高效并发</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103836167">https://blog.csdn.net/ThinkWon/article/details/103836167</a></td>
</tr>
</tbody>
</table></div><h2><a name="t43"></a><a name="t43"></a><a id="_566"></a>架构设计</h2>
<p>高可用架构</p>
<p>高并发架构</p>
<p>可伸缩架构</p>
<p>集群</p>
<h3><a name="t44"></a><a name="t44"></a><a id="_578"></a>设计模式</h3>
<p>常用设计模式</p>
<p>创建型：<br>
单例模式、工厂模式、抽象工厂模式</p>
<p>结构型：<br>
适配器模式、外观模式、代理模式、装饰器模式</p>
<p>行为型：<br>
观察者模式、策略模式、模板模式</p>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>设计模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/96829572">https://blog.csdn.net/ThinkWon/article/details/96829572</a></td>
</tr>
</tbody>
</table></div><h4><a id="_599"></a>创建型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抽象工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382584">https://blog.csdn.net/ThinkWon/article/details/101382584</a></td>
</tr>
<tr>
<td>2</td>
<td>单例模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382855">https://blog.csdn.net/ThinkWon/article/details/101382855</a></td>
</tr>
<tr>
<td>3</td>
<td>工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383285">https://blog.csdn.net/ThinkWon/article/details/101383285</a></td>
</tr>
<tr>
<td>4</td>
<td>建造者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383401">https://blog.csdn.net/ThinkWon/article/details/101383401</a></td>
</tr>
<tr>
<td>5</td>
<td>原型模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383491">https://blog.csdn.net/ThinkWon/article/details/101383491</a></td>
</tr>
</tbody>
</table></div><h4><a id="_611"></a>结构型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>代理模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384436">https://blog.csdn.net/ThinkWon/article/details/101384436</a></td>
</tr>
<tr>
<td>2</td>
<td>过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384514">https://blog.csdn.net/ThinkWon/article/details/101384514</a></td>
</tr>
<tr>
<td>3</td>
<td>桥接模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384584">https://blog.csdn.net/ThinkWon/article/details/101384584</a></td>
</tr>
<tr>
<td>4</td>
<td>适配器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384619">https://blog.csdn.net/ThinkWon/article/details/101384619</a></td>
</tr>
<tr>
<td>5</td>
<td>外观模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384676">https://blog.csdn.net/ThinkWon/article/details/101384676</a></td>
</tr>
<tr>
<td>6</td>
<td>享元模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384716">https://blog.csdn.net/ThinkWon/article/details/101384716</a></td>
</tr>
<tr>
<td>7</td>
<td>装饰器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384753">https://blog.csdn.net/ThinkWon/article/details/101384753</a></td>
</tr>
<tr>
<td>8</td>
<td>组合模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384786">https://blog.csdn.net/ThinkWon/article/details/101384786</a></td>
</tr>
</tbody>
</table></div><h4><a id="_626"></a>行为型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>备忘录模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383582">https://blog.csdn.net/ThinkWon/article/details/101383582</a></td>
</tr>
<tr>
<td>2</td>
<td>策略模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383647">https://blog.csdn.net/ThinkWon/article/details/101383647</a></td>
</tr>
<tr>
<td>3</td>
<td>迭代器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383722">https://blog.csdn.net/ThinkWon/article/details/101383722</a></td>
</tr>
<tr>
<td>4</td>
<td>访问者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383780">https://blog.csdn.net/ThinkWon/article/details/101383780</a></td>
</tr>
<tr>
<td>5</td>
<td>观察者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383872">https://blog.csdn.net/ThinkWon/article/details/101383872</a></td>
</tr>
<tr>
<td>6</td>
<td>解释器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383930">https://blog.csdn.net/ThinkWon/article/details/101383930</a></td>
</tr>
<tr>
<td>7</td>
<td>空对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384001">https://blog.csdn.net/ThinkWon/article/details/101384001</a></td>
</tr>
<tr>
<td>8</td>
<td>命令模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384090">https://blog.csdn.net/ThinkWon/article/details/101384090</a></td>
</tr>
<tr>
<td>9</td>
<td>模板模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384138">https://blog.csdn.net/ThinkWon/article/details/101384138</a></td>
</tr>
<tr>
<td>10</td>
<td>责任链模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384195">https://blog.csdn.net/ThinkWon/article/details/101384195</a></td>
</tr>
<tr>
<td>11</td>
<td>中介者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384251">https://blog.csdn.net/ThinkWon/article/details/101384251</a></td>
</tr>
<tr>
<td>12</td>
<td>状态模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384315">https://blog.csdn.net/ThinkWon/article/details/101384315</a></td>
</tr>
</tbody>
</table></div><h4><a id="J2EE_645"></a>J2EE模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MVC模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101381701">https://blog.csdn.net/ThinkWon/article/details/101381701</a></td>
</tr>
<tr>
<td>2</td>
<td>传输对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382134">https://blog.csdn.net/ThinkWon/article/details/101382134</a></td>
</tr>
<tr>
<td>3</td>
<td>服务定位器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382179">https://blog.csdn.net/ThinkWon/article/details/101382179</a></td>
</tr>
<tr>
<td>4</td>
<td>拦截过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382210">https://blog.csdn.net/ThinkWon/article/details/101382210</a></td>
</tr>
<tr>
<td>5</td>
<td>前端控制器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382247">https://blog.csdn.net/ThinkWon/article/details/101382247</a></td>
</tr>
<tr>
<td>6</td>
<td>数据访问对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382287">https://blog.csdn.net/ThinkWon/article/details/101382287</a></td>
</tr>
<tr>
<td>7</td>
<td>业务代表模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382356">https://blog.csdn.net/ThinkWon/article/details/101382356</a></td>
</tr>
<tr>
<td>8</td>
<td>组合实体模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382390">https://blog.csdn.net/ThinkWon/article/details/101382390</a></td>
</tr>
</tbody>
</table></div><h4><a id="_660"></a>实践应用</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102924813">https://blog.csdn.net/ThinkWon/article/details/102924813</a></td>
</tr>
</tbody>
</table></div><h2><a name="t45"></a><a name="t45"></a><a id="_672"></a>应用框架</h2>
<p>如何学习一个框架或者技术</p>
<ul>
<li>
<p>是什么，简介，概述</p>
</li>
<li>
<p>有什么用，用途，使用场景</p>
</li>
<li>
<p>怎么用，在实际开发中的应用，注意事项</p>
</li>
<li>
<p>优缺点</p>
</li>
<li>
<p>框架原理，工作流程，工作原理</p>
</li>
<li>
<p>常见面试题</p>
</li>
<li>
<p>源码分析，核心类，核心方法，设计模式</p>
</li>
<li>
<p>发布博客，在开发和实践中，博客反馈中持续改进</p>
</li>
<li>
<p>与同事朋友交流，技术论坛，技术分享中持续丰富知识</p>
</li>
</ul>
<p>常用框架</p>
<ul>
<li>
<p>集成开发工具（IDE）：Eclipse、MyEclipse、Spring Tool Suite（STS）、Intellij IDEA、NetBeans、JBuilder、JCreator</p>
</li>
<li>
<p>JAVA服务器：tomcat、jboss、websphere、weblogic、resin、jetty、apusic、apache</p>
</li>
<li>
<p>负载均衡：nginx、lvs</p>
</li>
<li>
<p>web层框架：Spring MVC、Struts2、Struts1、Google Web Toolkit（GWT）、JQWEB</p>
</li>
<li>
<p>服务层框架：Spring、EJB</p>
</li>
<li>
<p>持久层框架：Hibernate、MyBatis、JPA、TopLink</p>
</li>
<li>
<p>数据库：Oracle、MySql、MSSQL、Redis</p>
</li>
<li>
<p>项目构建：maven、ant</p>
</li>
<li>
<p>持续集成：Jenkins</p>
</li>
<li>
<p>版本控制：SVN、CVS、VSS、GIT</p>
</li>
<li>
<p>私服：Nexus</p>
</li>
<li>
<p>消息组件：IBM MQ、RabbitMQ、ActiveMQ、RocketMq</p>
</li>
<li>
<p>日志框架：Commons Logging、log4j 、slf4j、IOC</p>
</li>
<li>
<p>缓存框架：memcache、redis、ehcache、jboss cache</p>
</li>
<li>
<p>RPC框架：Hessian、Dubbo</p>
</li>
<li>
<p>规则引擎：Drools</p>
</li>
<li>
<p>工作流：Activiti</p>
</li>
<li>
<p>批处理：Spring Batch</p>
</li>
<li>
<p>通用查询框架：Query DSL</p>
</li>
<li>
<p>JAVA安全框架：shiro、Spring Security</p>
</li>
<li>
<p>代码静态检查工具：FindBugs、PMD</p>
</li>
<li>
<p>Linux操作系统：CentOS、Ubuntu、SUSE Linux、</p>
</li>
<li>
<p>常用工具：PLSQL Developer（Oracle）、Navicat（MySql）、FileZilla（FTP）、Xshell（SSH）、putty（SSH）、SecureCRT（SSH）、jd-gui（反编译）</p>
</li>
</ul>
<h3><a name="t46"></a><a name="t46"></a><a id="Spring_745"></a>Spring</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring简介、设计理念、优缺点、应用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810748">https://blog.csdn.net/ThinkWon/article/details/102810748</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring模块组成(框架组成、整体架构、体系架构、体系结构)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810819">https://blog.csdn.net/ThinkWon/article/details/102810819</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring容器中bean的生命周期</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102866432">https://blog.csdn.net/ThinkWon/article/details/102866432</a></td>
</tr>
<tr>
<td>4</td>
<td>控制反转(IoC)与依赖注入(DI)详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102912332">https://blog.csdn.net/ThinkWon/article/details/102912332</a></td>
</tr>
</tbody>
</table></div><h4><a id="Spring_756"></a>《Spring实战》读书笔记</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>《Spring实战》读书笔记-第1章 Spring之旅</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103097364">https://blog.csdn.net/ThinkWon/article/details/103097364</a></td>
</tr>
<tr>
<td>2</td>
<td>《Spring实战》读书笔记-第2章 装配Bean</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103527675">https://blog.csdn.net/ThinkWon/article/details/103527675</a></td>
</tr>
<tr>
<td>3</td>
<td>《Spring实战》读书笔记-第3章 高级装配</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103536621">https://blog.csdn.net/ThinkWon/article/details/103536621</a></td>
</tr>
<tr>
<td>4</td>
<td>《Spring实战》读书笔记-第4章 面向切面的Spring</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103541166">https://blog.csdn.net/ThinkWon/article/details/103541166</a></td>
</tr>
<tr>
<td>5</td>
<td>《Spring实战》读书笔记-第5章 构建Spring Web应用程序</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103550083">https://blog.csdn.net/ThinkWon/article/details/103550083</a></td>
</tr>
<tr>
<td>6</td>
<td>《Spring实战》读书笔记-第6章 渲染Web视图</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103559672">https://blog.csdn.net/ThinkWon/article/details/103559672</a></td>
</tr>
<tr>
<td>7</td>
<td>《Spring实战》读书笔记-第7章 Spring MVC的高级技术</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103562467">https://blog.csdn.net/ThinkWon/article/details/103562467</a></td>
</tr>
</tbody>
</table></div><h3><a name="t47"></a><a name="t47"></a><a id="Spring_MVC_770"></a>Spring MVC</h3>
<h3><a name="t48"></a><a name="t48"></a><a id="MyBatis_774"></a>MyBatis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MyBatis官方文档</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887995">https://blog.csdn.net/ThinkWon/article/details/100887995</a></td>
</tr>
<tr>
<td>2</td>
<td>MyBatis官方文档-简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887076">https://blog.csdn.net/ThinkWon/article/details/100887076</a></td>
</tr>
<tr>
<td>3</td>
<td>MyBatis官方文档-入门</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887176">https://blog.csdn.net/ThinkWon/article/details/100887176</a></td>
</tr>
<tr>
<td>4</td>
<td>MyBatis官方文档-XML 配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887349">https://blog.csdn.net/ThinkWon/article/details/100887349</a></td>
</tr>
<tr>
<td>5</td>
<td>MyBatis官方文档-XML 映射文件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887478">https://blog.csdn.net/ThinkWon/article/details/100887478</a></td>
</tr>
<tr>
<td>6</td>
<td>MyBatis官方文档-动态 SQL</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887702">https://blog.csdn.net/ThinkWon/article/details/100887702</a></td>
</tr>
<tr>
<td>7</td>
<td>MyBatis官方文档-Java API</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887746">https://blog.csdn.net/ThinkWon/article/details/100887746</a></td>
</tr>
<tr>
<td>8</td>
<td>MyBatis官方文档-SQL 语句构建器类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887821">https://blog.csdn.net/ThinkWon/article/details/100887821</a></td>
</tr>
<tr>
<td>9</td>
<td>MyBatis官方文档-日志</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887951">https://blog.csdn.net/ThinkWon/article/details/100887951</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis功能架构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101295025">https://blog.csdn.net/ThinkWon/article/details/101295025</a></td>
</tr>
<tr>
<td>11</td>
<td>MyBatis工作原理</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293609">https://blog.csdn.net/ThinkWon/article/details/101293609</a></td>
</tr>
<tr>
<td>12</td>
<td>MyBatis核心类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293216">https://blog.csdn.net/ThinkWon/article/details/101293216</a></td>
</tr>
<tr>
<td>13</td>
<td>MyBatis面试宝典</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101292950">https://blog.csdn.net/ThinkWon/article/details/101292950</a></td>
</tr>
<tr>
<td>14</td>
<td>MyBatis实现一对一，一对多关联查询</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101322334">https://blog.csdn.net/ThinkWon/article/details/101322334</a></td>
</tr>
<tr>
<td>15</td>
<td>MyBatis缓存</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101351212">https://blog.csdn.net/ThinkWon/article/details/101351212</a></td>
</tr>
</tbody>
</table></div><h3><a name="t49"></a><a name="t49"></a><a id="Hibernate_796"></a>Hibernate</h3>
<h3><a name="t50"></a><a name="t50"></a><a id="Shiro_800"></a>Shiro</h3>
<h3><a name="t51"></a><a name="t51"></a><a id="Spring_Security_802"></a>Spring Security</h3>
<h3><a name="t52"></a><a name="t52"></a><a id="Netty_806"></a>Netty</h3>
<h3><a name="t53"></a><a name="t53"></a><a id="_810"></a>搜索引擎</h3>
<h4><a id="LuceneSolr_812"></a>Lucene/Solr</h4>
<h4><a id="Elasticsearch_814"></a>Elasticsearch</h4>
<h4><a id="ELK_816"></a>ELK</h4>
<h2><a name="t54"></a><a name="t54"></a><a id="_826"></a>中间件</h2>
<h3><a name="t55"></a><a name="t55"></a><a id="_828"></a>消息中间件</h3>
<h4><a id="RabbitMQ_830"></a>RabbitMQ</h4>
<h4><a id="RocketMQ_832"></a>RocketMQ</h4>
<h4><a id="ActiveMQ_834"></a>ActiveMQ</h4>
<h4><a id="Kafka_836"></a>Kafka</h4>
<h3><a name="t56"></a><a name="t56"></a><a id="_842"></a>远程过程调用中间件</h3>
<h4><a id="Dubbo_844"></a>Dubbo</h4>
<h3><a name="t57"></a><a name="t57"></a><a id="_850"></a>数据访问中间件</h3>
<p>Sharding JDBC</p>
<p>MyCat</p>
<h3><a name="t58"></a><a name="t58"></a><a id="Web_858"></a>Web应用服务器</h3>
<h4><a id="Tomcat_860"></a>Tomcat</h4>
<p>待整理：Tomcat各组件作用	Tomcat集群	Tomcat面试题</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Win10安装Tomcat服务器与配置环境变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622905">https://blog.csdn.net/ThinkWon/article/details/102622905</a></td>
</tr>
<tr>
<td>2</td>
<td>Linux(CentOS7)安装Tomcat与设置Tomcat为开机启动项</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102717537">https://blog.csdn.net/ThinkWon/article/details/102717537</a></td>
</tr>
<tr>
<td>3</td>
<td>Tomcat与JDK版本对应关系，Tomcat各版本特性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622738">https://blog.csdn.net/ThinkWon/article/details/102622738</a></td>
</tr>
<tr>
<td>4</td>
<td>Tomcat目录结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102619466">https://blog.csdn.net/ThinkWon/article/details/102619466</a></td>
</tr>
<tr>
<td>5</td>
<td>Tomcat乱码与端口占用的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622824">https://blog.csdn.net/ThinkWon/article/details/102622824</a></td>
</tr>
<tr>
<td>6</td>
<td>Tomcat系统架构与请求处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102676442">https://blog.csdn.net/ThinkWon/article/details/102676442</a></td>
</tr>
<tr>
<td>7</td>
<td>史上最强Tomcat8性能优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102744033">https://blog.csdn.net/ThinkWon/article/details/102744033</a></td>
</tr>
</tbody>
</table></div><h4><a id="Nginx_876"></a>Nginx</h4>
<h3><a name="t59"></a><a name="t59"></a><a id="_880"></a>缓存</h3>
<p>本地缓存</p>
<p>客户端缓存</p>
<p>服务端缓存</p>
<p>	web缓存，Redis，Memcached，Ehcache</p>
<h3><a name="t60"></a><a name="t60"></a><a id="_892"></a>其他</h3>
<h4><a id="Zookeeper_894"></a>Zookeeper</h4>
<h2><a name="t61"></a><a name="t61"></a><a id="_900"></a>微服务与分布式</h2>
<h3><a name="t62"></a><a name="t62"></a><a id="Spring_Boot_902"></a>Spring Boot</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>application.yml与bootstrap.yml的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100007093">https://blog.csdn.net/ThinkWon/article/details/100007093</a></td>
</tr>
<tr>
<td>2</td>
<td>一分钟了解约定优于配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101703815">https://blog.csdn.net/ThinkWon/article/details/101703815</a></td>
</tr>
</tbody>
</table></div><h3><a name="t63"></a><a name="t63"></a><a id="Spring_Cloud_911"></a>Spring Cloud</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring Cloud入门-十分钟了解Spring Cloud</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103715146">https://blog.csdn.net/ThinkWon/article/details/103715146</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring Cloud入门-Eureka服务注册与发现(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring Cloud入门-Ribbon服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></td>
</tr>
<tr>
<td>4</td>
<td>Spring Cloud入门-Hystrix断路器(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></td>
</tr>
<tr>
<td>5</td>
<td>Spring Cloud入门-Hystrix Dashboard与Turbine断路器监控(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103734664">https://blog.csdn.net/ThinkWon/article/details/103734664</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring Cloud入门-OpenFeign服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring Cloud入门-Zuul服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103738851">https://blog.csdn.net/ThinkWon/article/details/103738851</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Cloud入门-Config分布式配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103739628">https://blog.csdn.net/ThinkWon/article/details/103739628</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud入门-Bus消息总线(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753372">https://blog.csdn.net/ThinkWon/article/details/103753372</a></td>
</tr>
<tr>
<td>10</td>
<td>Spring Cloud入门-Sleuth服务链路跟踪(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753896">https://blog.csdn.net/ThinkWon/article/details/103753896</a></td>
</tr>
<tr>
<td>11</td>
<td>Spring Cloud入门-Consul服务注册发现与配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103756139">https://blog.csdn.net/ThinkWon/article/details/103756139</a></td>
</tr>
<tr>
<td>12</td>
<td>Spring Cloud入门-Gateway服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></td>
</tr>
<tr>
<td>13</td>
<td>Spring Cloud入门-Admin服务监控中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103758697">https://blog.csdn.net/ThinkWon/article/details/103758697</a></td>
</tr>
<tr>
<td>14</td>
<td>Spring Cloud入门-Oauth2授权的使用(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103761687">https://blog.csdn.net/ThinkWon/article/details/103761687</a></td>
</tr>
<tr>
<td>15</td>
<td>Spring Cloud入门-Oauth2授权之JWT集成(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103763364">https://blog.csdn.net/ThinkWon/article/details/103763364</a></td>
</tr>
<tr>
<td>16</td>
<td>Spring Cloud入门-Oauth2授权之基于JWT完成单点登录(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103766368">https://blog.csdn.net/ThinkWon/article/details/103766368</a></td>
</tr>
<tr>
<td>17</td>
<td>Spring Cloud入门-Nacos实现注册和配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103769680">https://blog.csdn.net/ThinkWon/article/details/103769680</a></td>
</tr>
<tr>
<td>18</td>
<td>Spring Cloud入门-Sentinel实现服务限流、熔断与降级(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103770879">https://blog.csdn.net/ThinkWon/article/details/103770879</a></td>
</tr>
<tr>
<td>19</td>
<td>Spring Cloud入门-Seata处理分布式事务问题(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786102">https://blog.csdn.net/ThinkWon/article/details/103786102</a></td>
</tr>
<tr>
<td>20</td>
<td>Spring Cloud入门-汇总篇(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786588">https://blog.csdn.net/ThinkWon/article/details/103786588</a></td>
</tr>
</tbody>
</table></div><h3><a name="t64"></a><a name="t64"></a><a id="_938"></a>服务注册发现</h3>
<h3><a name="t65"></a><a name="t65"></a><a id="_940"></a>服务配置</h3>
<h3><a name="t66"></a><a name="t66"></a><a id="_942"></a>负载均衡</h3>
<h3><a name="t67"></a><a name="t67"></a><a id="_944"></a>服务调用</h3>
<h3><a name="t68"></a><a name="t68"></a><a id="_946"></a>服务限流</h3>
<h3><a name="t69"></a><a name="t69"></a><a id="_948"></a>熔断降级</h3>
<h3><a name="t70"></a><a name="t70"></a><a id="_950"></a>网关路由</h3>
<h3><a name="t71"></a><a name="t71"></a><a id="_952"></a>服务权限</h3>
<h3><a name="t72"></a><a name="t72"></a><a id="_954"></a>链路追踪</h3>
<h3><a name="t73"></a><a name="t73"></a><a id="_956"></a>分布式事务</h3>
<h3><a name="t74"></a><a name="t74"></a><a id="_958"></a>分布式缓存</h3>
<h3><a name="t75"></a><a name="t75"></a><a id="_960"></a>分布式会话</h3>
<h3><a name="t76"></a><a name="t76"></a><a id="_962"></a>日志收集</h3>
<h3><a name="t77"></a><a name="t77"></a><a id="_964"></a>服务监控</h3>
<h3><a name="t78"></a><a name="t78"></a><a id="_966"></a>消息驱动</h3>
<h3><a name="t79"></a><a name="t79"></a><a id="_968"></a>数据处理流</h3>
<h3><a name="t80"></a><a name="t80"></a><a id="_970"></a>自动化测试与部署</h3>
<h3><a name="t81"></a><a name="t81"></a><a id="_972"></a>第三方支持</h3>
<h3><a name="t82"></a><a name="t82"></a><a id="Zookeeper_974"></a>分布式协调服务Zookeeper</h3>
<h2><a name="t83"></a><a name="t83"></a><a id="_978"></a>程序员的一些思考</h2>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>程序员写个人技术博客的价值与意义</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102980571">https://blog.csdn.net/ThinkWon/article/details/102980571</a></td>
</tr>
<tr>
<td>2</td>
<td>Java知识体系最强总结(2020版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></td>
</tr>
</tbody>
</table></div><h2><a name="t84"></a><a name="t84"></a><a id="_987"></a>项目管理</h2>
<h3><a name="t85"></a><a name="t85"></a><a id="_989"></a>需求调研</h3>
<h3><a name="t86"></a><a name="t86"></a><a id="_991"></a>项目管理</h3>
<h3><a name="t87"></a><a name="t87"></a><a id="_993"></a>代码管理</h3>
<h3><a name="t88"></a><a name="t88"></a><a id="_995"></a>文档管理</h3>
<h3><a name="t89"></a><a name="t89"></a><a id="_997"></a>测试</h3>
<h2><a name="t90"></a><a name="t90"></a><a id="_1003"></a>运维</h2>
<p>常规监控</p>
<p>APM</p>
<p>持续集成(CI/CD)：Jenkins，环境分离</p>
<p>自动化运维：Ansible，puppet，chef</p>
<p>测试：TDD 理论，单元测试，压力测试，全链路压测，A/B 、灰度、蓝绿测试</p>
<p>虚拟化：KVM，Xen，OpenVZ</p>
<p>容器技术：Docker</p>
<p>云技术：OpenStack</p>
<p>DevOps</p>
<p>文档管理</p>
<h2><a name="t91"></a><a name="t91"></a><a id="_1027"></a>操作系统</h2>
<p>计算机操作系统</p>
<p>计算机原理</p>
<p>Linux</p>
<p>CPU</p>
<p>进程，线程，协程</p>
<h2><a name="t92"></a><a name="t92"></a><a id="_1043"></a>推荐书籍</h2>
<h2><a name="t93"></a><a name="t93"></a><a id="_1049"></a>云计算</h2>
<p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p>
<h2><a name="t94"></a><a name="t94"></a><a id="_1055"></a>搜索引擎</h2>
<p>Solr、Lucene、Nutch、Elasticsearch</p>
<h2><a name="t95"></a><a name="t95"></a><a id="_1061"></a>权限管理</h2>
<p>Shiro、Spring Security</p>
<h2><a name="t96"></a><a name="t96"></a><a id="_1067"></a>区块链</h2>
<p>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=整理的Java知识体系主要包括基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识
), {}, org.apache.catalina.session.StandardSessionFacade@c90b94]
2020-04-10 22:32:04.747 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 22:32:04.757 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:32:04.757 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:32:04.757 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:32:04.757 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:32:04.777 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:32:07.847 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 22:32:07.847 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:32:07.847 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 22:32:07.847 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 22:32:07.897 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:32:11.518 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:32:11.518 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:32:11.518 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:32:11.518 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:32:11.548 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:32:12.620 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:32:12.620 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:32:12.622 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:32:12.623 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:32:12.627 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:33:30.787 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:33:30.787 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:33:30.787 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 22:33:30.787 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title= Java知识体系最强总结(2020版), content=
<p><strong>本人从事Java开发已多年，平时有记录问题解决方案和总结知识点的习惯，整理了一些有关Java的知识体系，这不是最终版，会不定期的更新</strong>。也算是记录自己在从事编程工作的成长足迹，通过博客可以促进博主与阅读者的共同进步，结交更多志同道合的朋友。<strong>特此分享给大家，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽</strong>。</p>
<p>整理的Java知识体系主要包括<strong>基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链</strong>等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识。<strong>千里之行始于足下</strong>，希望大家根据自己的薄弱点，查缺补漏，根据自己感兴趣的方面多学习，学的精通一点，从现在开始行动起来。<strong>路漫漫其修远兮，吾将上下而求索，不管编程开发的路有多么难走，多么艰辛，我们都将百折不挠，不遗余力地去追求和探索</strong>。</p>
<p><img src="https://img-blog.csdnimg.cn/2019121810082198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly90aGlua3dvbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=""></p>
<p></p><div class="toc"><h3><a name="t0"></a><a name="t0"></a>文章目录</h3><ul><ul><li><a href="#Java_10" rel="nofollow" target="_self">Java面试总结</a></li><li><a href="#_37" rel="nofollow" target="_self">基础知识</a></li><ul><li><a href="#Java_39" rel="nofollow" target="_self">Java概述</a></li><li><a href="#_51" rel="nofollow" target="_self">基础语法</a></li><li><a href="#_98" rel="nofollow" target="_self">面向对象</a></li><li><a href="#_114" rel="nofollow" target="_self">集合框架</a></li><li><a href="#IO_129" rel="nofollow" target="_self">IO流</a></li><li><a href="#_143" rel="nofollow" target="_self">网络编程</a></li><li><a href="#API_173" rel="nofollow" target="_self">常用API</a></li><li><a href="#_185" rel="nofollow" target="_self">常用工具类库</a></li><li><a href="#_198" rel="nofollow" target="_self">单元测试</a></li><li><a href="#_204" rel="nofollow" target="_self">异常</a></li><li><a href="#_217" rel="nofollow" target="_self">日志</a></li></ul><li><a href="#_233" rel="nofollow" target="_self">工具</a></li><ul><li><a href="#IDEA_235" rel="nofollow" target="_self">IDEA</a></li><li><a href="#Eclipse__STS_244" rel="nofollow" target="_self">Eclipse &amp; STS</a></li><li><a href="#Maven_252" rel="nofollow" target="_self">Maven</a></li><li><a href="#Docker_265" rel="nofollow" target="_self">Docker</a></li><li><a href="#Git_273" rel="nofollow" target="_self">Git</a></li><li><a href="#GitLab_286" rel="nofollow" target="_self">GitLab</a></li><li><a href="#GitKraken_290" rel="nofollow" target="_self">GitKraken</a></li><li><a href="#Navicat_294" rel="nofollow" target="_self">Navicat</a></li></ul><li><a href="#_298" rel="nofollow" target="_self">并发编程</a></li><ul><li><a href="#_300" rel="nofollow" target="_self">基础知识</a></li><li><a href="#_311" rel="nofollow" target="_self">并发理论</a></li><li><a href="#_322" rel="nofollow" target="_self">并发关键字</a></li><li><a href="#Lock_332" rel="nofollow" target="_self">Lock体系</a></li><li><a href="#_357" rel="nofollow" target="_self">并发容器</a></li><li><a href="#_371" rel="nofollow" target="_self">线程池</a></li><li><a href="#_382" rel="nofollow" target="_self">原子操作类</a></li><li><a href="#_390" rel="nofollow" target="_self">并发工具</a></li><li><a href="#_399" rel="nofollow" target="_self">并发实践</a></li></ul><li><a href="#_409" rel="nofollow" target="_self">数据结构与算法</a></li><ul><li><a href="#_411" rel="nofollow" target="_self">数据结构</a></li><li><a href="#_438" rel="nofollow" target="_self">算法</a></li><ul><li><a href="#_461" rel="nofollow" target="_self">排序算法</a></li></ul><li><a href="#LeetCode_479" rel="nofollow" target="_self">LeetCode</a></li></ul><li><a href="#_498" rel="nofollow" target="_self">数据库</a></li><ul><li><a href="#Oracle_500" rel="nofollow" target="_self">Oracle</a></li><li><a href="#MySQL_504" rel="nofollow" target="_self">MySQL</a></li><ul><li><a href="#_506" rel="nofollow" target="_self">数据库基础知识</a></li><li><a href="#_508" rel="nofollow" target="_self">数据类型</a></li><li><a href="#_510" rel="nofollow" target="_self">引擎</a></li><li><a href="#_512" rel="nofollow" target="_self">索引</a></li><li><a href="#_514" rel="nofollow" target="_self">三大范式</a></li><li><a href="#SQL_516" rel="nofollow" target="_self">常用SQL语句</a></li><li><a href="#_518" rel="nofollow" target="_self">存储过程与函数</a></li><li><a href="#_520" rel="nofollow" target="_self">视图</a></li><li><a href="#MySQL_522" rel="nofollow" target="_self">MySQL优化</a></li><li><a href="#_524" rel="nofollow" target="_self">事务</a></li><li><a href="#_526" rel="nofollow" target="_self">数据备份与还原</a></li></ul><li><a href="#Redis_530" rel="nofollow" target="_self">Redis</a></li></ul><li><a href="#Java_551" rel="nofollow" target="_self">Java虚拟机</a></li><ul><li><a href="#Java_553" rel="nofollow" target="_self">深入理解Java虚拟机</a></li></ul><li><a href="#_566" rel="nofollow" target="_self">架构设计</a></li><ul><li><a href="#_578" rel="nofollow" target="_self">设计模式</a></li><ul><li><a href="#_599" rel="nofollow" target="_self">创建型模式</a></li><li><a href="#_611" rel="nofollow" target="_self">结构型模式</a></li><li><a href="#_626" rel="nofollow" target="_self">行为型模式</a></li><li><a href="#J2EE_645" rel="nofollow" target="_self">J2EE模式</a></li><li><a href="#_660" rel="nofollow" target="_self">实践应用</a></li></ul></ul><li><a href="#_672" rel="nofollow" target="_self">应用框架</a></li><ul><li><a href="#Spring_745" rel="nofollow" target="_self">Spring</a></li><ul><li><a href="#Spring_756" rel="nofollow" target="_self">《Spring实战》读书笔记</a></li></ul><li><a href="#Spring_MVC_770" rel="nofollow" target="_self">Spring MVC</a></li><li><a href="#MyBatis_774" rel="nofollow" target="_self">MyBatis</a></li><li><a href="#Hibernate_796" rel="nofollow" target="_self">Hibernate</a></li><li><a href="#Shiro_800" rel="nofollow" target="_self">Shiro</a></li><li><a href="#Spring_Security_802" rel="nofollow" target="_self">Spring Security</a></li><li><a href="#Netty_806" rel="nofollow" target="_self">Netty</a></li><li><a href="#_810" rel="nofollow" target="_self">搜索引擎</a></li><ul><li><a href="#LuceneSolr_812" rel="nofollow" target="_self">Lucene/Solr</a></li><li><a href="#Elasticsearch_814" rel="nofollow" target="_self">Elasticsearch</a></li><li><a href="#ELK_816" rel="nofollow" target="_self">ELK</a></li></ul></ul><li><a href="#_826" rel="nofollow" target="_self">中间件</a></li><ul><li><a href="#_828" rel="nofollow" target="_self">消息中间件</a></li><ul><li><a href="#RabbitMQ_830" rel="nofollow" target="_self">RabbitMQ</a></li><li><a href="#RocketMQ_832" rel="nofollow" target="_self">RocketMQ</a></li><li><a href="#ActiveMQ_834" rel="nofollow" target="_self">ActiveMQ</a></li><li><a href="#Kafka_836" rel="nofollow" target="_self">Kafka</a></li></ul><li><a href="#_842" rel="nofollow" target="_self">远程过程调用中间件</a></li><ul><li><a href="#Dubbo_844" rel="nofollow" target="_self">Dubbo</a></li></ul><li><a href="#_850" rel="nofollow" target="_self">数据访问中间件</a></li><li><a href="#Web_858" rel="nofollow" target="_self">Web应用服务器</a></li><ul><li><a href="#Tomcat_860" rel="nofollow" target="_self">Tomcat</a></li><li><a href="#Nginx_876" rel="nofollow" target="_self">Nginx</a></li></ul><li><a href="#_880" rel="nofollow" target="_self">缓存</a></li><li><a href="#_892" rel="nofollow" target="_self">其他</a></li><ul><li><a href="#Zookeeper_894" rel="nofollow" target="_self">Zookeeper</a></li></ul></ul><li><a href="#_900" rel="nofollow" target="_self">微服务与分布式</a></li><ul><li><a href="#Spring_Boot_902" rel="nofollow" target="_self">Spring Boot</a></li><li><a href="#Spring_Cloud_911" rel="nofollow" target="_self">Spring Cloud</a></li><li><a href="#_938" rel="nofollow" target="_self">服务注册发现</a></li><li><a href="#_940" rel="nofollow" target="_self">服务配置</a></li><li><a href="#_942" rel="nofollow" target="_self">负载均衡</a></li><li><a href="#_944" rel="nofollow" target="_self">服务调用</a></li><li><a href="#_946" rel="nofollow" target="_self">服务限流</a></li><li><a href="#_948" rel="nofollow" target="_self">熔断降级</a></li><li><a href="#_950" rel="nofollow" target="_self">网关路由</a></li><li><a href="#_952" rel="nofollow" target="_self">服务权限</a></li><li><a href="#_954" rel="nofollow" target="_self">链路追踪</a></li><li><a href="#_956" rel="nofollow" target="_self">分布式事务</a></li><li><a href="#_958" rel="nofollow" target="_self">分布式缓存</a></li><li><a href="#_960" rel="nofollow" target="_self">分布式会话</a></li><li><a href="#_962" rel="nofollow" target="_self">日志收集</a></li><li><a href="#_964" rel="nofollow" target="_self">服务监控</a></li><li><a href="#_966" rel="nofollow" target="_self">消息驱动</a></li><li><a href="#_968" rel="nofollow" target="_self">数据处理流</a></li><li><a href="#_970" rel="nofollow" target="_self">自动化测试与部署</a></li><li><a href="#_972" rel="nofollow" target="_self">第三方支持</a></li><li><a href="#Zookeeper_974" rel="nofollow" target="_self">分布式协调服务Zookeeper</a></li></ul><li><a href="#_978" rel="nofollow" target="_self">程序员的一些思考</a></li><li><a href="#_987" rel="nofollow" target="_self">项目管理</a></li><ul><li><a href="#_989" rel="nofollow" target="_self">需求调研</a></li><li><a href="#_991" rel="nofollow" target="_self">项目管理</a></li><li><a href="#_993" rel="nofollow" target="_self">代码管理</a></li><li><a href="#_995" rel="nofollow" target="_self">文档管理</a></li><li><a href="#_997" rel="nofollow" target="_self">测试</a></li></ul><li><a href="#_1003" rel="nofollow" target="_self">运维</a></li><li><a href="#_1027" rel="nofollow" target="_self">操作系统</a></li><li><a href="#_1043" rel="nofollow" target="_self">推荐书籍</a></li><li><a href="#_1049" rel="nofollow" target="_self">云计算</a></li><li><a href="#_1055" rel="nofollow" target="_self">搜索引擎</a></li><li><a href="#_1061" rel="nofollow" target="_self">权限管理</a></li><li><a href="#_1067" rel="nofollow" target="_self">区块链</a></li></ul></ul></div><p></p>
<h2><a name="t1"></a><a name="t1"></a><a id="Java_10"></a>Java面试总结</h2>
<p>Java面试总结汇总，整理了包括Java基础知识，集合容器，并发编程，JVM，常用开源框架Spring，MyBatis，数据库，中间件等，包含了作为一个Java工程师在面试中需要用到或者可能用到的绝大部分知识。欢迎大家阅读，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽。文章持续更新中…</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java基础知识面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390612</a></td>
</tr>
<tr>
<td>2</td>
<td>Java集合容器面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588551" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588551</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390689" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390689</a></td>
</tr>
<tr>
<td>4</td>
<td>并发编程面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104863992" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104863992</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390752" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390752</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397516" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397516</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring MVC面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397427" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397427</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Boot面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397299" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397299</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397367" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397367</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/101292950" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/101292950</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/103522351" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/103522351</a></td>
</tr>
<tr>
<td>12</td>
<td>MySQL数据库面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104778621" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104778621</a></td>
</tr>
<tr>
<td>13</td>
<td>消息中间件MQ与RabbitMQ面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588612</a></td>
</tr>
<tr>
<td>14</td>
<td>Dubbo面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390006" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390006</a></td>
</tr>
<tr>
<td>15</td>
<td>Linux面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588679" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588679</a></td>
</tr>
<tr>
<td>16</td>
<td>Tomcat面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397665" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397665</a></td>
</tr>
<tr>
<td>17</td>
<td>ZooKeeper面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397719" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397719</a></td>
</tr>
<tr>
<td>18</td>
<td>Netty面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104391081" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104391081</a></td>
</tr>
</tbody>
</table></div><h2><a name="t2"></a><a name="t2"></a><a id="_37"></a>基础知识</h2>
<h3><a name="t3"></a><a name="t3"></a><a id="Java_39"></a>Java概述</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353575">https://blog.csdn.net/ThinkWon/article/details/94353575</a></td>
</tr>
<tr>
<td>2</td>
<td>Java发展历程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353653">https://blog.csdn.net/ThinkWon/article/details/94353653</a></td>
</tr>
<tr>
<td>3</td>
<td>Java语言特点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354013">https://blog.csdn.net/ThinkWon/article/details/94354013</a></td>
</tr>
<tr>
<td>4</td>
<td>JDK安装与环境变量配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353907">https://blog.csdn.net/ThinkWon/article/details/94353907</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM、JRE和JDK的关系</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101369973">https://blog.csdn.net/ThinkWon/article/details/101369973</a></td>
</tr>
</tbody>
</table></div><h3><a name="t4"></a><a name="t4"></a><a id="_51"></a>基础语法</h3>
<p>大部分已完成</p>
<p>待整理：</p>
<p>Java开发必会的反编译知识（附支持对Lambda进行反编译的工具）</p>
<p>一文读懂什么是Java中的自动拆装箱</p>
<p>Java的枚举类型用法介绍</p>
<p>类、枚举、接口、数组、可变参数</p>
<p>泛型、序列化</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java标识符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101637454">https://blog.csdn.net/ThinkWon/article/details/101637454</a></td>
</tr>
<tr>
<td>2</td>
<td>Java关键字(Java 8版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101642385">https://blog.csdn.net/ThinkWon/article/details/101642385</a></td>
</tr>
<tr>
<td>3</td>
<td>Java注释</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643185">https://blog.csdn.net/ThinkWon/article/details/101643185</a></td>
</tr>
<tr>
<td>4</td>
<td>Java访问修饰符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643412">https://blog.csdn.net/ThinkWon/article/details/101643412</a></td>
</tr>
<tr>
<td>5</td>
<td>Java分隔符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643617">https://blog.csdn.net/ThinkWon/article/details/101643617</a></td>
</tr>
<tr>
<td>6</td>
<td>Java转义字符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643769">https://blog.csdn.net/ThinkWon/article/details/101643769</a></td>
</tr>
<tr>
<td>7</td>
<td>Java进制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643936">https://blog.csdn.net/ThinkWon/article/details/101643936</a></td>
</tr>
<tr>
<td>8</td>
<td>Java流程控制语句</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645978">https://blog.csdn.net/ThinkWon/article/details/101645978</a></td>
</tr>
<tr>
<td>9</td>
<td>Java流程控制语句-顺序结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101644820">https://blog.csdn.net/ThinkWon/article/details/101644820</a></td>
</tr>
<tr>
<td>10</td>
<td>Java流程控制语句-分支结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645224">https://blog.csdn.net/ThinkWon/article/details/101645224</a></td>
</tr>
<tr>
<td>11</td>
<td>Java流程控制语句-循环结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645757">https://blog.csdn.net/ThinkWon/article/details/101645757</a></td>
</tr>
<tr>
<td>12</td>
<td>Java表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101648114">https://blog.csdn.net/ThinkWon/article/details/101648114</a></td>
</tr>
<tr>
<td>13</td>
<td>Java运算符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649002">https://blog.csdn.net/ThinkWon/article/details/101649002</a></td>
</tr>
<tr>
<td>14</td>
<td>Java变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649292">https://blog.csdn.net/ThinkWon/article/details/101649292</a></td>
</tr>
<tr>
<td>15</td>
<td>Java常量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649446">https://blog.csdn.net/ThinkWon/article/details/101649446</a></td>
</tr>
<tr>
<td>16</td>
<td>Java数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649568">https://blog.csdn.net/ThinkWon/article/details/101649568</a></td>
</tr>
<tr>
<td>17</td>
<td>Java反射</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100128361">https://blog.csdn.net/ThinkWon/article/details/100128361</a></td>
</tr>
<tr>
<td>18</td>
<td>Java语法糖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100103689">https://blog.csdn.net/ThinkWon/article/details/100103689</a></td>
</tr>
<tr>
<td>19</td>
<td>Java注解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100178709">https://blog.csdn.net/ThinkWon/article/details/100178709</a></td>
</tr>
<tr>
<td>20</td>
<td>JSON简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642585">https://blog.csdn.net/ThinkWon/article/details/100642585</a></td>
</tr>
<tr>
<td>21</td>
<td>Properties类简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667783">https://blog.csdn.net/ThinkWon/article/details/100667783</a></td>
</tr>
<tr>
<td>22</td>
<td>XML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642425">https://blog.csdn.net/ThinkWon/article/details/100642425</a></td>
</tr>
<tr>
<td>23</td>
<td>YML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642870">https://blog.csdn.net/ThinkWon/article/details/100642870</a></td>
</tr>
<tr>
<td>24</td>
<td>Java8新特性-Lambda表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642932">https://blog.csdn.net/ThinkWon/article/details/100642932</a></td>
</tr>
<tr>
<td>25</td>
<td>Java基础语法</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354151">https://blog.csdn.net/ThinkWon/article/details/94354151</a></td>
</tr>
</tbody>
</table></div><h3><a name="t5"></a><a name="t5"></a><a id="_98"></a>面向对象</h3>
<p>待整理：</p>
<p>抽象</p>
<p>继承、封装、多态</p>
<p>接口、抽象类、内部类</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>什么是面向对象</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667386">https://blog.csdn.net/ThinkWon/article/details/100667386</a></td>
</tr>
</tbody>
</table></div><h3><a name="t6"></a><a name="t6"></a><a id="_114"></a>集合框架</h3>
<p>迭代器、增强for、泛型</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java集合框架总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98844796">https://blog.csdn.net/ThinkWon/article/details/98844796</a></td>
</tr>
<tr>
<td>2</td>
<td>ArrayList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845119">https://blog.csdn.net/ThinkWon/article/details/98845119</a></td>
</tr>
<tr>
<td>3</td>
<td>HashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845487">https://blog.csdn.net/ThinkWon/article/details/98845487</a></td>
</tr>
<tr>
<td>4</td>
<td>LinkedHashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102574293">https://blog.csdn.net/ThinkWon/article/details/102574293</a></td>
</tr>
<tr>
<td>5</td>
<td>LinkedList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102573923">https://blog.csdn.net/ThinkWon/article/details/102573923</a></td>
</tr>
<tr>
<td>6</td>
<td>TreeMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571883">https://blog.csdn.net/ThinkWon/article/details/102571883</a></td>
</tr>
</tbody>
</table></div><h3><a name="t7"></a><a name="t7"></a><a id="IO_129"></a>IO流</h3>
<p>待整理：</p>
<p>File、递归</p>
<p>字节流、字节缓冲流</p>
<p>编码表、编码方式、转换流、序列化、序列化流、打印流、commons-io</p>
<h3><a name="t8"></a><a name="t8"></a><a id="_143"></a>网络编程</h3>
<p>网络概述、网络模型</p>
<p>Socket原理机制</p>
<p>UDP</p>
<p>TCP/IP</p>
<p>协议、OSI 七层协议、HTTP、HTTP2.0、HTTPS</p>
<p>网络安全</p>
<p>	XSS、CSRF、SQL注入、Hash Dos、脚本注入、漏洞扫描工具、验证码</p>
<p>	DDoS防范、用户隐私信息保护、序列化漏洞</p>
<p>	加密解密、对称加密、哈希算法、非对称加密</p>
<p>	服务安全、数据安全、数据备份</p>
<p>	网络隔离、登录跳板机、非外网分离</p>
<p>	认证、授权</p>
<h3><a name="t9"></a><a name="t9"></a><a id="API_173"></a>常用API</h3>
<p>Date、DateFormat、Calendar</p>
<p>String、StringBuffer、StringBuilder、正则表达式</p>
<p>Number、Radom、Math、System、包装类</p>
<p>Arrays、Collections</p>
<h3><a name="t10"></a><a name="t10"></a><a id="_185"></a>常用工具类库</h3>
<p>待整理：OkHttp、commons-lang3</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>HttpClient工具类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101391489">https://blog.csdn.net/ThinkWon/article/details/101391489</a></td>
</tr>
<tr>
<td>2</td>
<td>WGS84地球坐标系，GCJ02火星坐标系，BD09百度坐标系简介与转换</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392187">https://blog.csdn.net/ThinkWon/article/details/101392187</a></td>
</tr>
<tr>
<td>3</td>
<td>Lombok简介、使用、工作原理、优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392808">https://blog.csdn.net/ThinkWon/article/details/101392808</a></td>
</tr>
<tr>
<td>4</td>
<td>Java几种常用JSON库性能比较</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354358">https://blog.csdn.net/ThinkWon/article/details/94354358</a></td>
</tr>
</tbody>
</table></div><h3><a name="t11"></a><a name="t11"></a><a id="_198"></a>单元测试</h3>
<p>JUnit</p>
<h3><a name="t12"></a><a name="t12"></a><a id="_204"></a>异常</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java异常总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>2</td>
<td>Java异常架构与异常关键字</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101676779">https://blog.csdn.net/ThinkWon/article/details/101676779</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101677638">https://blog.csdn.net/ThinkWon/article/details/101677638</a></td>
</tr>
<tr>
<td>4</td>
<td>如何选择异常类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>5</td>
<td>Java异常常见面试题</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101681073">https://blog.csdn.net/ThinkWon/article/details/101681073</a></td>
</tr>
<tr>
<td>6</td>
<td>Java异常处理最佳实践</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94347002">https://blog.csdn.net/ThinkWon/article/details/94347002</a></td>
</tr>
</tbody>
</table></div><h3><a name="t13"></a><a name="t13"></a><a id="_217"></a>日志</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>常用日志框架Log4j，Logback，Log4j2性能比较与日志门面SLF4J简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101621135">https://blog.csdn.net/ThinkWon/article/details/101621135</a></td>
</tr>
<tr>
<td>2</td>
<td>日志作用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101619725">https://blog.csdn.net/ThinkWon/article/details/101619725</a></td>
</tr>
<tr>
<td>3</td>
<td>Apache Log4j2详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95043111">https://blog.csdn.net/ThinkWon/article/details/95043111</a></td>
</tr>
<tr>
<td>4</td>
<td>Log4j2同步日志，混合日志和异步日志配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625124">https://blog.csdn.net/ThinkWon/article/details/101625124</a></td>
</tr>
<tr>
<td>5</td>
<td>Log4j2配置文件详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101629302">https://blog.csdn.net/ThinkWon/article/details/101629302</a></td>
</tr>
<tr>
<td>6</td>
<td>Log4j2的Appenders配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625820">https://blog.csdn.net/ThinkWon/article/details/101625820</a></td>
</tr>
<tr>
<td>7</td>
<td>Log4j2的Filters配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101627162">https://blog.csdn.net/ThinkWon/article/details/101627162</a></td>
</tr>
<tr>
<td>8</td>
<td>Log4j2的Policy触发策略与Strategy滚动策略配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628222">https://blog.csdn.net/ThinkWon/article/details/101628222</a></td>
</tr>
<tr>
<td>9</td>
<td>Log4j2的Loggers配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628736">https://blog.csdn.net/ThinkWon/article/details/101628736</a></td>
</tr>
</tbody>
</table></div><h2><a name="t14"></a><a name="t14"></a><a id="_233"></a>工具</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="IDEA_235"></a>IDEA</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>IDEA常用配置和常用插件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101020481">https://blog.csdn.net/ThinkWon/article/details/101020481</a></td>
</tr>
<tr>
<td>2</td>
<td>IDEA中Maven依赖下载失败解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101312918">https://blog.csdn.net/ThinkWon/article/details/101312918</a></td>
</tr>
</tbody>
</table></div><h3><a name="t16"></a><a name="t16"></a><a id="Eclipse__STS_244"></a>Eclipse &amp; STS</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Eclipse &amp; Spring Tool Suite常用配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101025543">https://blog.csdn.net/ThinkWon/article/details/101025543</a></td>
</tr>
</tbody>
</table></div><h3><a name="t17"></a><a name="t17"></a><a id="Maven_252"></a>Maven</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Maven简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346090">https://blog.csdn.net/ThinkWon/article/details/94346090</a></td>
</tr>
<tr>
<td>2</td>
<td>Maven安装与配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346569">https://blog.csdn.net/ThinkWon/article/details/94346569</a></td>
</tr>
<tr>
<td>3</td>
<td>Maven依赖冲突</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483020">https://blog.csdn.net/ThinkWon/article/details/101483020</a></td>
</tr>
<tr>
<td>4</td>
<td>手动安装Maven依赖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483478">https://blog.csdn.net/ThinkWon/article/details/101483478</a></td>
</tr>
<tr>
<td>5</td>
<td>Maven部署jar包到远程仓库</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483769">https://blog.csdn.net/ThinkWon/article/details/101483769</a></td>
</tr>
<tr>
<td>6</td>
<td>Maven私服Nexus安装与使用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346681">https://blog.csdn.net/ThinkWon/article/details/94346681</a></td>
</tr>
</tbody>
</table></div><h3><a name="t18"></a><a name="t18"></a><a id="Docker_265"></a>Docker</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>使用Docker安装GitLab</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95042797">https://blog.csdn.net/ThinkWon/article/details/95042797</a></td>
</tr>
</tbody>
</table></div><h3><a name="t19"></a><a name="t19"></a><a id="Git_273"></a>Git</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Git简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346816">https://blog.csdn.net/ThinkWon/article/details/94346816</a></td>
</tr>
<tr>
<td>2</td>
<td>版本控制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449228">https://blog.csdn.net/ThinkWon/article/details/101449228</a></td>
</tr>
<tr>
<td>3</td>
<td>Git忽略文件.gitignore详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101447866">https://blog.csdn.net/ThinkWon/article/details/101447866</a></td>
</tr>
<tr>
<td>4</td>
<td>Git与SVN的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449611">https://blog.csdn.net/ThinkWon/article/details/101449611</a></td>
</tr>
<tr>
<td>5</td>
<td>常用Git命令</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101450420">https://blog.csdn.net/ThinkWon/article/details/101450420</a></td>
</tr>
<tr>
<td>6</td>
<td>Git，GitHub与GitLab的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101470086">https://blog.csdn.net/ThinkWon/article/details/101470086</a></td>
</tr>
</tbody>
</table></div><h3><a name="t20"></a><a name="t20"></a><a id="GitLab_286"></a>GitLab</h3>
<h3><a name="t21"></a><a name="t21"></a><a id="GitKraken_290"></a>GitKraken</h3>
<h3><a name="t22"></a><a name="t22"></a><a id="Navicat_294"></a>Navicat</h3>
<h2><a name="t23"></a><a name="t23"></a><a id="_298"></a>并发编程</h2>
<h3><a name="t24"></a><a name="t24"></a><a id="_300"></a>基础知识</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发编程的优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102020811">https://blog.csdn.net/ThinkWon/article/details/102020811</a></td>
</tr>
<tr>
<td>2</td>
<td>线程的状态和基本操作</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102027115">https://blog.csdn.net/ThinkWon/article/details/102027115</a></td>
</tr>
<tr>
<td>3</td>
<td>进程和线程的区别(超详细)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">https://blog.csdn.net/ThinkWon/article/details/102021274</a></td>
</tr>
<tr>
<td>4</td>
<td>创建线程的四种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021143">https://blog.csdn.net/ThinkWon/article/details/102021143</a></td>
</tr>
</tbody>
</table></div><h3><a name="t25"></a><a name="t25"></a><a id="_311"></a>并发理论</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java内存模型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073578">https://blog.csdn.net/ThinkWon/article/details/102073578</a></td>
</tr>
<tr>
<td>2</td>
<td>重排序与数据依赖性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073858">https://blog.csdn.net/ThinkWon/article/details/102073858</a></td>
</tr>
<tr>
<td>3</td>
<td>as-if-serial规则和happens-before规则的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074107">https://blog.csdn.net/ThinkWon/article/details/102074107</a></td>
</tr>
<tr>
<td>4</td>
<td>Java并发理论总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074440">https://blog.csdn.net/ThinkWon/article/details/102074440</a></td>
</tr>
</tbody>
</table></div><h3><a name="t26"></a><a name="t26"></a><a id="_322"></a>并发关键字</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java并发关键字-synchronized</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243189">https://blog.csdn.net/ThinkWon/article/details/102243189</a></td>
</tr>
<tr>
<td>2</td>
<td>Java并发关键字-volatile</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243670">https://blog.csdn.net/ThinkWon/article/details/102243670</a></td>
</tr>
<tr>
<td>3</td>
<td>Java并发关键字-final</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102244477">https://blog.csdn.net/ThinkWon/article/details/102244477</a></td>
</tr>
</tbody>
</table></div><h3><a name="t27"></a><a name="t27"></a><a id="Lock_332"></a>Lock体系</h3>
<p>待整理：</p>
<p>公平锁 &amp; 非公平锁</p>
<p>乐观锁 &amp; 悲观锁</p>
<p>可重入锁 &amp; 不可重入锁</p>
<p>互斥锁 &amp; 共享锁</p>
<p>死锁</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Lock简介与初识AQS</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102468837">https://blog.csdn.net/ThinkWon/article/details/102468837</a></td>
</tr>
<tr>
<td>2</td>
<td>AQS(AbstractQueuedSynchronizer)详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469112">https://blog.csdn.net/ThinkWon/article/details/102469112</a></td>
</tr>
<tr>
<td>3</td>
<td>ReentrantLock(重入锁)实现原理与公平锁非公平锁区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469388">https://blog.csdn.net/ThinkWon/article/details/102469388</a></td>
</tr>
<tr>
<td>4</td>
<td>读写锁ReentrantReadWriteLock源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469598">https://blog.csdn.net/ThinkWon/article/details/102469598</a></td>
</tr>
<tr>
<td>5</td>
<td>Condition源码分析与等待通知机制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469889">https://blog.csdn.net/ThinkWon/article/details/102469889</a></td>
</tr>
<tr>
<td>6</td>
<td>LockSupport详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469993">https://blog.csdn.net/ThinkWon/article/details/102469993</a></td>
</tr>
</tbody>
</table></div><h3><a name="t28"></a><a name="t28"></a><a id="_357"></a>并发容器</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102506447">https://blog.csdn.net/ThinkWon/article/details/102506447</a></td>
</tr>
<tr>
<td>2</td>
<td>并发容器之ConcurrentLinkedQueue详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508089">https://blog.csdn.net/ThinkWon/article/details/102508089</a></td>
</tr>
<tr>
<td>3</td>
<td>并发容器之CopyOnWriteArrayList详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508258">https://blog.csdn.net/ThinkWon/article/details/102508258</a></td>
</tr>
<tr>
<td>4</td>
<td>并发容器之ThreadLocal详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508381">https://blog.csdn.net/ThinkWon/article/details/102508381</a></td>
</tr>
<tr>
<td>5</td>
<td>ThreadLocal内存泄漏分析与解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508721">https://blog.csdn.net/ThinkWon/article/details/102508721</a></td>
</tr>
<tr>
<td>6</td>
<td>并发容器之BlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508901">https://blog.csdn.net/ThinkWon/article/details/102508901</a></td>
</tr>
<tr>
<td>7</td>
<td>并发容器之ArrayBlockingQueue与LinkedBlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508971">https://blog.csdn.net/ThinkWon/article/details/102508971</a></td>
</tr>
</tbody>
</table></div><h3><a name="t29"></a><a name="t29"></a><a id="_371"></a>线程池</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>线程池ThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541900">https://blog.csdn.net/ThinkWon/article/details/102541900</a></td>
</tr>
<tr>
<td>2</td>
<td>Executors类创建四种常见线程池</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541990">https://blog.csdn.net/ThinkWon/article/details/102541990</a></td>
</tr>
<tr>
<td>3</td>
<td>线程池之ScheduledThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542299">https://blog.csdn.net/ThinkWon/article/details/102542299</a></td>
</tr>
<tr>
<td>4</td>
<td>FutureTask详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542404">https://blog.csdn.net/ThinkWon/article/details/102542404</a></td>
</tr>
</tbody>
</table></div><h3><a name="t30"></a><a name="t30"></a><a id="_382"></a>原子操作类</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>原子操作类总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556910">https://blog.csdn.net/ThinkWon/article/details/102556910</a></td>
</tr>
</tbody>
</table></div><h3><a name="t31"></a><a name="t31"></a><a id="_390"></a>并发工具</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发工具之CountDownLatch与CyclicBarrier</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556958">https://blog.csdn.net/ThinkWon/article/details/102556958</a></td>
</tr>
<tr>
<td>2</td>
<td>并发工具之Semaphore与Exchanger</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557034">https://blog.csdn.net/ThinkWon/article/details/102557034</a></td>
</tr>
</tbody>
</table></div><h3><a name="t32"></a><a name="t32"></a><a id="_399"></a>并发实践</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>实现生产者消费者的三种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557126">https://blog.csdn.net/ThinkWon/article/details/102557126</a></td>
</tr>
</tbody>
</table></div><h2><a name="t33"></a><a name="t33"></a><a id="_409"></a>数据结构与算法</h2>
<h3><a name="t34"></a><a name="t34"></a><a id="_411"></a>数据结构</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>红黑树详细分析(图文详解)，看了都说好</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571535">https://blog.csdn.net/ThinkWon/article/details/102571535</a></td>
</tr>
</tbody>
</table></div><pre class="prettyprint"><code class="prism language-sh has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、数组

2、栈
3、队列
4、链表
5、树
	二叉树
    完全二叉树
    平衡二叉树
    二叉查找树（BST）
    红黑树
    B，B+，B*树
    LSM 树

字段是不是数据结构


<h3><a name="t35"></a><a name="t35"></a><a id="_438"></a>算法</h3>
<p>语言只是编程工具，算法才是编程之魂！</p>
<pre class="prettyprint"><code class="prism language-text has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、排序算法：快速排序、归并排序、计数排序
2、搜索算法：回溯、递归、剪枝
3、图论：最短路径、最小生成树、网络流建模
4、动态规划：背包问题、最长子序列、计数问题
5、基础技巧：分治、倍增、二分法、贪心算法


宽度优先搜索
深度优先搜索
广度优先
双指针
扫描线

朴素贝叶斯
推荐算法

<h4><a id="_461"></a>排序算法</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>史上最全经典排序算法总结(Java实现)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95616819">https://blog.csdn.net/ThinkWon/article/details/95616819</a></td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序（Bubble Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534473">https://blog.csdn.net/ThinkWon/article/details/101534473</a></td>
</tr>
<tr>
<td>3</td>
<td>选择排序（Selection Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534721">https://blog.csdn.net/ThinkWon/article/details/101534721</a></td>
</tr>
<tr>
<td>4</td>
<td>插入排序（Insertion Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101537804">https://blog.csdn.net/ThinkWon/article/details/101537804</a></td>
</tr>
<tr>
<td>5</td>
<td>希尔排序（Shell Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538166">https://blog.csdn.net/ThinkWon/article/details/101538166</a></td>
</tr>
<tr>
<td>6</td>
<td>归并排序（Merge Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538756">https://blog.csdn.net/ThinkWon/article/details/101538756</a></td>
</tr>
<tr>
<td>7</td>
<td>快速排序（Quick Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543580">https://blog.csdn.net/ThinkWon/article/details/101543580</a></td>
</tr>
<tr>
<td>8</td>
<td>堆排序（Heap Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543941">https://blog.csdn.net/ThinkWon/article/details/101543941</a></td>
</tr>
<tr>
<td>9</td>
<td>计数排序（Counting Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544159">https://blog.csdn.net/ThinkWon/article/details/101544159</a></td>
</tr>
<tr>
<td>10</td>
<td>桶排序（Bucket Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544356">https://blog.csdn.net/ThinkWon/article/details/101544356</a></td>
</tr>
<tr>
<td>11</td>
<td>基数排序（Radix Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101545529">https://blog.csdn.net/ThinkWon/article/details/101545529</a></td>
</tr>
</tbody>
</table></div><h3><a name="t36"></a><a name="t36"></a><a id="LeetCode_479"></a>LeetCode</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>LeetCode第1题 两数之和(Two Sum)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113049">https://blog.csdn.net/ThinkWon/article/details/103113049</a></td>
</tr>
<tr>
<td>2</td>
<td>LeetCode第3题 无重复字符的最长子串(Longest Substring Without Repeating Characters)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113969">https://blog.csdn.net/ThinkWon/article/details/103113969</a></td>
</tr>
<tr>
<td>3</td>
<td>LeetCode第7题 整数反转(Reverse Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113167">https://blog.csdn.net/ThinkWon/article/details/103113167</a></td>
</tr>
<tr>
<td>4</td>
<td>LeetCode第9题 回文数(Palindrome Number)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113151">https://blog.csdn.net/ThinkWon/article/details/103113151</a></td>
</tr>
<tr>
<td>5</td>
<td>LeetCode第13题 罗马数字转整数(Roman to Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113519">https://blog.csdn.net/ThinkWon/article/details/103113519</a></td>
</tr>
<tr>
<td>6</td>
<td>LeetCode第14题 最长公共前缀(Longest Common Prefix)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113700">https://blog.csdn.net/ThinkWon/article/details/103113700</a></td>
</tr>
<tr>
<td>7</td>
<td>LeetCode第20题 有效的括号(Valid Parentheses)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113848">https://blog.csdn.net/ThinkWon/article/details/103113848</a></td>
</tr>
<tr>
<td>8</td>
<td>LeetCode第26题 删除排序数组中的重复项(Remove Duplicates from Sorted Array)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113097">https://blog.csdn.net/ThinkWon/article/details/103113097</a></td>
</tr>
</tbody>
</table></div><h2><a name="t37"></a><a name="t37"></a><a id="_498"></a>数据库</h2>
<h3><a name="t38"></a><a name="t38"></a><a id="Oracle_500"></a>Oracle</h3>
<h3><a name="t39"></a><a name="t39"></a><a id="MySQL_504"></a>MySQL</h3>
<h4><a id="_506"></a>数据库基础知识</h4>
<h4><a id="_508"></a>数据类型</h4>
<h4><a id="_510"></a>引擎</h4>
<h4><a id="_512"></a>索引</h4>
<h4><a id="_514"></a>三大范式</h4>
<h4><a id="SQL_516"></a>常用SQL语句</h4>
<h4><a id="_518"></a>存储过程与函数</h4>
<h4><a id="_520"></a>视图</h4>
<h4><a id="MySQL_522"></a>MySQL优化</h4>
<h4><a id="_524"></a>事务</h4>
<h4><a id="_526"></a>数据备份与还原</h4>
<h3><a name="t40"></a><a name="t40"></a><a id="Redis_530"></a>Redis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Redis总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/99999584">https://blog.csdn.net/ThinkWon/article/details/99999584</a></td>
</tr>
<tr>
<td>2</td>
<td>Redis使用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521497">https://blog.csdn.net/ThinkWon/article/details/101521497</a></td>
</tr>
<tr>
<td>3</td>
<td>Redis数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521724">https://blog.csdn.net/ThinkWon/article/details/101521724</a></td>
</tr>
<tr>
<td>4</td>
<td>Redis持久化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522209">https://blog.csdn.net/ThinkWon/article/details/101522209</a></td>
</tr>
<tr>
<td>5</td>
<td>Redis过期键的删除策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522970">https://blog.csdn.net/ThinkWon/article/details/101522970</a></td>
</tr>
<tr>
<td>6</td>
<td>Redis数据淘汰策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530624">https://blog.csdn.net/ThinkWon/article/details/101530624</a></td>
</tr>
<tr>
<td>7</td>
<td>Redis与Memcached的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530406">https://blog.csdn.net/ThinkWon/article/details/101530406</a></td>
</tr>
<tr>
<td>8</td>
<td>Redis常见面试题(精简版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></td>
</tr>
<tr>
<td>9</td>
<td>Redis中缓存雪崩、缓存穿透等问题的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103402008">https://blog.csdn.net/ThinkWon/article/details/103402008</a></td>
</tr>
<tr>
<td>10</td>
<td>阿里云Redis开发规范学习总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103400250">https://blog.csdn.net/ThinkWon/article/details/103400250</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis开发常用规范</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401781">https://blog.csdn.net/ThinkWon/article/details/103401781</a></td>
</tr>
<tr>
<td>12</td>
<td>这可能是最中肯的Redis规范了</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401978">https://blog.csdn.net/ThinkWon/article/details/103401978</a></td>
</tr>
</tbody>
</table></div><h2><a name="t41"></a><a name="t41"></a><a id="Java_551"></a>Java虚拟机</h2>
<h3><a name="t42"></a><a name="t42"></a><a id="Java_553"></a>深入理解Java虚拟机</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>深入理解Java虚拟机-走近Java</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103804387">https://blog.csdn.net/ThinkWon/article/details/103804387</a></td>
</tr>
<tr>
<td>2</td>
<td>深入理解Java虚拟机-Java内存区域与内存溢出异常</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103827387">https://blog.csdn.net/ThinkWon/article/details/103827387</a></td>
</tr>
<tr>
<td>3</td>
<td>深入理解Java虚拟机-垃圾回收器与内存分配策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103831676">https://blog.csdn.net/ThinkWon/article/details/103831676</a></td>
</tr>
<tr>
<td>4</td>
<td>深入理解Java虚拟机-虚拟机执行子系统</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835168">https://blog.csdn.net/ThinkWon/article/details/103835168</a></td>
</tr>
<tr>
<td>5</td>
<td>深入理解Java虚拟机-程序编译与代码优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835883">https://blog.csdn.net/ThinkWon/article/details/103835883</a></td>
</tr>
<tr>
<td>6</td>
<td>深入理解Java虚拟机-高效并发</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103836167">https://blog.csdn.net/ThinkWon/article/details/103836167</a></td>
</tr>
</tbody>
</table></div><h2><a name="t43"></a><a name="t43"></a><a id="_566"></a>架构设计</h2>
<p>高可用架构</p>
<p>高并发架构</p>
<p>可伸缩架构</p>
<p>集群</p>
<h3><a name="t44"></a><a name="t44"></a><a id="_578"></a>设计模式</h3>
<p>常用设计模式</p>
<p>创建型：<br>
单例模式、工厂模式、抽象工厂模式</p>
<p>结构型：<br>
适配器模式、外观模式、代理模式、装饰器模式</p>
<p>行为型：<br>
观察者模式、策略模式、模板模式</p>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>设计模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/96829572">https://blog.csdn.net/ThinkWon/article/details/96829572</a></td>
</tr>
</tbody>
</table></div><h4><a id="_599"></a>创建型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抽象工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382584">https://blog.csdn.net/ThinkWon/article/details/101382584</a></td>
</tr>
<tr>
<td>2</td>
<td>单例模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382855">https://blog.csdn.net/ThinkWon/article/details/101382855</a></td>
</tr>
<tr>
<td>3</td>
<td>工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383285">https://blog.csdn.net/ThinkWon/article/details/101383285</a></td>
</tr>
<tr>
<td>4</td>
<td>建造者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383401">https://blog.csdn.net/ThinkWon/article/details/101383401</a></td>
</tr>
<tr>
<td>5</td>
<td>原型模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383491">https://blog.csdn.net/ThinkWon/article/details/101383491</a></td>
</tr>
</tbody>
</table></div><h4><a id="_611"></a>结构型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>代理模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384436">https://blog.csdn.net/ThinkWon/article/details/101384436</a></td>
</tr>
<tr>
<td>2</td>
<td>过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384514">https://blog.csdn.net/ThinkWon/article/details/101384514</a></td>
</tr>
<tr>
<td>3</td>
<td>桥接模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384584">https://blog.csdn.net/ThinkWon/article/details/101384584</a></td>
</tr>
<tr>
<td>4</td>
<td>适配器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384619">https://blog.csdn.net/ThinkWon/article/details/101384619</a></td>
</tr>
<tr>
<td>5</td>
<td>外观模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384676">https://blog.csdn.net/ThinkWon/article/details/101384676</a></td>
</tr>
<tr>
<td>6</td>
<td>享元模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384716">https://blog.csdn.net/ThinkWon/article/details/101384716</a></td>
</tr>
<tr>
<td>7</td>
<td>装饰器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384753">https://blog.csdn.net/ThinkWon/article/details/101384753</a></td>
</tr>
<tr>
<td>8</td>
<td>组合模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384786">https://blog.csdn.net/ThinkWon/article/details/101384786</a></td>
</tr>
</tbody>
</table></div><h4><a id="_626"></a>行为型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>备忘录模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383582">https://blog.csdn.net/ThinkWon/article/details/101383582</a></td>
</tr>
<tr>
<td>2</td>
<td>策略模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383647">https://blog.csdn.net/ThinkWon/article/details/101383647</a></td>
</tr>
<tr>
<td>3</td>
<td>迭代器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383722">https://blog.csdn.net/ThinkWon/article/details/101383722</a></td>
</tr>
<tr>
<td>4</td>
<td>访问者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383780">https://blog.csdn.net/ThinkWon/article/details/101383780</a></td>
</tr>
<tr>
<td>5</td>
<td>观察者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383872">https://blog.csdn.net/ThinkWon/article/details/101383872</a></td>
</tr>
<tr>
<td>6</td>
<td>解释器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383930">https://blog.csdn.net/ThinkWon/article/details/101383930</a></td>
</tr>
<tr>
<td>7</td>
<td>空对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384001">https://blog.csdn.net/ThinkWon/article/details/101384001</a></td>
</tr>
<tr>
<td>8</td>
<td>命令模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384090">https://blog.csdn.net/ThinkWon/article/details/101384090</a></td>
</tr>
<tr>
<td>9</td>
<td>模板模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384138">https://blog.csdn.net/ThinkWon/article/details/101384138</a></td>
</tr>
<tr>
<td>10</td>
<td>责任链模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384195">https://blog.csdn.net/ThinkWon/article/details/101384195</a></td>
</tr>
<tr>
<td>11</td>
<td>中介者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384251">https://blog.csdn.net/ThinkWon/article/details/101384251</a></td>
</tr>
<tr>
<td>12</td>
<td>状态模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384315">https://blog.csdn.net/ThinkWon/article/details/101384315</a></td>
</tr>
</tbody>
</table></div><h4><a id="J2EE_645"></a>J2EE模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MVC模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101381701">https://blog.csdn.net/ThinkWon/article/details/101381701</a></td>
</tr>
<tr>
<td>2</td>
<td>传输对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382134">https://blog.csdn.net/ThinkWon/article/details/101382134</a></td>
</tr>
<tr>
<td>3</td>
<td>服务定位器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382179">https://blog.csdn.net/ThinkWon/article/details/101382179</a></td>
</tr>
<tr>
<td>4</td>
<td>拦截过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382210">https://blog.csdn.net/ThinkWon/article/details/101382210</a></td>
</tr>
<tr>
<td>5</td>
<td>前端控制器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382247">https://blog.csdn.net/ThinkWon/article/details/101382247</a></td>
</tr>
<tr>
<td>6</td>
<td>数据访问对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382287">https://blog.csdn.net/ThinkWon/article/details/101382287</a></td>
</tr>
<tr>
<td>7</td>
<td>业务代表模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382356">https://blog.csdn.net/ThinkWon/article/details/101382356</a></td>
</tr>
<tr>
<td>8</td>
<td>组合实体模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382390">https://blog.csdn.net/ThinkWon/article/details/101382390</a></td>
</tr>
</tbody>
</table></div><h4><a id="_660"></a>实践应用</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102924813">https://blog.csdn.net/ThinkWon/article/details/102924813</a></td>
</tr>
</tbody>
</table></div><h2><a name="t45"></a><a name="t45"></a><a id="_672"></a>应用框架</h2>
<p>如何学习一个框架或者技术</p>
<ul>
<li>
<p>是什么，简介，概述</p>
</li>
<li>
<p>有什么用，用途，使用场景</p>
</li>
<li>
<p>怎么用，在实际开发中的应用，注意事项</p>
</li>
<li>
<p>优缺点</p>
</li>
<li>
<p>框架原理，工作流程，工作原理</p>
</li>
<li>
<p>常见面试题</p>
</li>
<li>
<p>源码分析，核心类，核心方法，设计模式</p>
</li>
<li>
<p>发布博客，在开发和实践中，博客反馈中持续改进</p>
</li>
<li>
<p>与同事朋友交流，技术论坛，技术分享中持续丰富知识</p>
</li>
</ul>
<p>常用框架</p>
<ul>
<li>
<p>集成开发工具（IDE）：Eclipse、MyEclipse、Spring Tool Suite（STS）、Intellij IDEA、NetBeans、JBuilder、JCreator</p>
</li>
<li>
<p>JAVA服务器：tomcat、jboss、websphere、weblogic、resin、jetty、apusic、apache</p>
</li>
<li>
<p>负载均衡：nginx、lvs</p>
</li>
<li>
<p>web层框架：Spring MVC、Struts2、Struts1、Google Web Toolkit（GWT）、JQWEB</p>
</li>
<li>
<p>服务层框架：Spring、EJB</p>
</li>
<li>
<p>持久层框架：Hibernate、MyBatis、JPA、TopLink</p>
</li>
<li>
<p>数据库：Oracle、MySql、MSSQL、Redis</p>
</li>
<li>
<p>项目构建：maven、ant</p>
</li>
<li>
<p>持续集成：Jenkins</p>
</li>
<li>
<p>版本控制：SVN、CVS、VSS、GIT</p>
</li>
<li>
<p>私服：Nexus</p>
</li>
<li>
<p>消息组件：IBM MQ、RabbitMQ、ActiveMQ、RocketMq</p>
</li>
<li>
<p>日志框架：Commons Logging、log4j 、slf4j、IOC</p>
</li>
<li>
<p>缓存框架：memcache、redis、ehcache、jboss cache</p>
</li>
<li>
<p>RPC框架：Hessian、Dubbo</p>
</li>
<li>
<p>规则引擎：Drools</p>
</li>
<li>
<p>工作流：Activiti</p>
</li>
<li>
<p>批处理：Spring Batch</p>
</li>
<li>
<p>通用查询框架：Query DSL</p>
</li>
<li>
<p>JAVA安全框架：shiro、Spring Security</p>
</li>
<li>
<p>代码静态检查工具：FindBugs、PMD</p>
</li>
<li>
<p>Linux操作系统：CentOS、Ubuntu、SUSE Linux、</p>
</li>
<li>
<p>常用工具：PLSQL Developer（Oracle）、Navicat（MySql）、FileZilla（FTP）、Xshell（SSH）、putty（SSH）、SecureCRT（SSH）、jd-gui（反编译）</p>
</li>
</ul>
<h3><a name="t46"></a><a name="t46"></a><a id="Spring_745"></a>Spring</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring简介、设计理念、优缺点、应用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810748">https://blog.csdn.net/ThinkWon/article/details/102810748</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring模块组成(框架组成、整体架构、体系架构、体系结构)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810819">https://blog.csdn.net/ThinkWon/article/details/102810819</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring容器中bean的生命周期</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102866432">https://blog.csdn.net/ThinkWon/article/details/102866432</a></td>
</tr>
<tr>
<td>4</td>
<td>控制反转(IoC)与依赖注入(DI)详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102912332">https://blog.csdn.net/ThinkWon/article/details/102912332</a></td>
</tr>
</tbody>
</table></div><h4><a id="Spring_756"></a>《Spring实战》读书笔记</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>《Spring实战》读书笔记-第1章 Spring之旅</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103097364">https://blog.csdn.net/ThinkWon/article/details/103097364</a></td>
</tr>
<tr>
<td>2</td>
<td>《Spring实战》读书笔记-第2章 装配Bean</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103527675">https://blog.csdn.net/ThinkWon/article/details/103527675</a></td>
</tr>
<tr>
<td>3</td>
<td>《Spring实战》读书笔记-第3章 高级装配</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103536621">https://blog.csdn.net/ThinkWon/article/details/103536621</a></td>
</tr>
<tr>
<td>4</td>
<td>《Spring实战》读书笔记-第4章 面向切面的Spring</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103541166">https://blog.csdn.net/ThinkWon/article/details/103541166</a></td>
</tr>
<tr>
<td>5</td>
<td>《Spring实战》读书笔记-第5章 构建Spring Web应用程序</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103550083">https://blog.csdn.net/ThinkWon/article/details/103550083</a></td>
</tr>
<tr>
<td>6</td>
<td>《Spring实战》读书笔记-第6章 渲染Web视图</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103559672">https://blog.csdn.net/ThinkWon/article/details/103559672</a></td>
</tr>
<tr>
<td>7</td>
<td>《Spring实战》读书笔记-第7章 Spring MVC的高级技术</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103562467">https://blog.csdn.net/ThinkWon/article/details/103562467</a></td>
</tr>
</tbody>
</table></div><h3><a name="t47"></a><a name="t47"></a><a id="Spring_MVC_770"></a>Spring MVC</h3>
<h3><a name="t48"></a><a name="t48"></a><a id="MyBatis_774"></a>MyBatis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MyBatis官方文档</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887995">https://blog.csdn.net/ThinkWon/article/details/100887995</a></td>
</tr>
<tr>
<td>2</td>
<td>MyBatis官方文档-简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887076">https://blog.csdn.net/ThinkWon/article/details/100887076</a></td>
</tr>
<tr>
<td>3</td>
<td>MyBatis官方文档-入门</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887176">https://blog.csdn.net/ThinkWon/article/details/100887176</a></td>
</tr>
<tr>
<td>4</td>
<td>MyBatis官方文档-XML 配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887349">https://blog.csdn.net/ThinkWon/article/details/100887349</a></td>
</tr>
<tr>
<td>5</td>
<td>MyBatis官方文档-XML 映射文件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887478">https://blog.csdn.net/ThinkWon/article/details/100887478</a></td>
</tr>
<tr>
<td>6</td>
<td>MyBatis官方文档-动态 SQL</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887702">https://blog.csdn.net/ThinkWon/article/details/100887702</a></td>
</tr>
<tr>
<td>7</td>
<td>MyBatis官方文档-Java API</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887746">https://blog.csdn.net/ThinkWon/article/details/100887746</a></td>
</tr>
<tr>
<td>8</td>
<td>MyBatis官方文档-SQL 语句构建器类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887821">https://blog.csdn.net/ThinkWon/article/details/100887821</a></td>
</tr>
<tr>
<td>9</td>
<td>MyBatis官方文档-日志</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887951">https://blog.csdn.net/ThinkWon/article/details/100887951</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis功能架构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101295025">https://blog.csdn.net/ThinkWon/article/details/101295025</a></td>
</tr>
<tr>
<td>11</td>
<td>MyBatis工作原理</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293609">https://blog.csdn.net/ThinkWon/article/details/101293609</a></td>
</tr>
<tr>
<td>12</td>
<td>MyBatis核心类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293216">https://blog.csdn.net/ThinkWon/article/details/101293216</a></td>
</tr>
<tr>
<td>13</td>
<td>MyBatis面试宝典</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101292950">https://blog.csdn.net/ThinkWon/article/details/101292950</a></td>
</tr>
<tr>
<td>14</td>
<td>MyBatis实现一对一，一对多关联查询</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101322334">https://blog.csdn.net/ThinkWon/article/details/101322334</a></td>
</tr>
<tr>
<td>15</td>
<td>MyBatis缓存</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101351212">https://blog.csdn.net/ThinkWon/article/details/101351212</a></td>
</tr>
</tbody>
</table></div><h3><a name="t49"></a><a name="t49"></a><a id="Hibernate_796"></a>Hibernate</h3>
<h3><a name="t50"></a><a name="t50"></a><a id="Shiro_800"></a>Shiro</h3>
<h3><a name="t51"></a><a name="t51"></a><a id="Spring_Security_802"></a>Spring Security</h3>
<h3><a name="t52"></a><a name="t52"></a><a id="Netty_806"></a>Netty</h3>
<h3><a name="t53"></a><a name="t53"></a><a id="_810"></a>搜索引擎</h3>
<h4><a id="LuceneSolr_812"></a>Lucene/Solr</h4>
<h4><a id="Elasticsearch_814"></a>Elasticsearch</h4>
<h4><a id="ELK_816"></a>ELK</h4>
<h2><a name="t54"></a><a name="t54"></a><a id="_826"></a>中间件</h2>
<h3><a name="t55"></a><a name="t55"></a><a id="_828"></a>消息中间件</h3>
<h4><a id="RabbitMQ_830"></a>RabbitMQ</h4>
<h4><a id="RocketMQ_832"></a>RocketMQ</h4>
<h4><a id="ActiveMQ_834"></a>ActiveMQ</h4>
<h4><a id="Kafka_836"></a>Kafka</h4>
<h3><a name="t56"></a><a name="t56"></a><a id="_842"></a>远程过程调用中间件</h3>
<h4><a id="Dubbo_844"></a>Dubbo</h4>
<h3><a name="t57"></a><a name="t57"></a><a id="_850"></a>数据访问中间件</h3>
<p>Sharding JDBC</p>
<p>MyCat</p>
<h3><a name="t58"></a><a name="t58"></a><a id="Web_858"></a>Web应用服务器</h3>
<h4><a id="Tomcat_860"></a>Tomcat</h4>
<p>待整理：Tomcat各组件作用	Tomcat集群	Tomcat面试题</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Win10安装Tomcat服务器与配置环境变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622905">https://blog.csdn.net/ThinkWon/article/details/102622905</a></td>
</tr>
<tr>
<td>2</td>
<td>Linux(CentOS7)安装Tomcat与设置Tomcat为开机启动项</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102717537">https://blog.csdn.net/ThinkWon/article/details/102717537</a></td>
</tr>
<tr>
<td>3</td>
<td>Tomcat与JDK版本对应关系，Tomcat各版本特性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622738">https://blog.csdn.net/ThinkWon/article/details/102622738</a></td>
</tr>
<tr>
<td>4</td>
<td>Tomcat目录结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102619466">https://blog.csdn.net/ThinkWon/article/details/102619466</a></td>
</tr>
<tr>
<td>5</td>
<td>Tomcat乱码与端口占用的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622824">https://blog.csdn.net/ThinkWon/article/details/102622824</a></td>
</tr>
<tr>
<td>6</td>
<td>Tomcat系统架构与请求处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102676442">https://blog.csdn.net/ThinkWon/article/details/102676442</a></td>
</tr>
<tr>
<td>7</td>
<td>史上最强Tomcat8性能优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102744033">https://blog.csdn.net/ThinkWon/article/details/102744033</a></td>
</tr>
</tbody>
</table></div><h4><a id="Nginx_876"></a>Nginx</h4>
<h3><a name="t59"></a><a name="t59"></a><a id="_880"></a>缓存</h3>
<p>本地缓存</p>
<p>客户端缓存</p>
<p>服务端缓存</p>
<p>	web缓存，Redis，Memcached，Ehcache</p>
<h3><a name="t60"></a><a name="t60"></a><a id="_892"></a>其他</h3>
<h4><a id="Zookeeper_894"></a>Zookeeper</h4>
<h2><a name="t61"></a><a name="t61"></a><a id="_900"></a>微服务与分布式</h2>
<h3><a name="t62"></a><a name="t62"></a><a id="Spring_Boot_902"></a>Spring Boot</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>application.yml与bootstrap.yml的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100007093">https://blog.csdn.net/ThinkWon/article/details/100007093</a></td>
</tr>
<tr>
<td>2</td>
<td>一分钟了解约定优于配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101703815">https://blog.csdn.net/ThinkWon/article/details/101703815</a></td>
</tr>
</tbody>
</table></div><h3><a name="t63"></a><a name="t63"></a><a id="Spring_Cloud_911"></a>Spring Cloud</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring Cloud入门-十分钟了解Spring Cloud</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103715146">https://blog.csdn.net/ThinkWon/article/details/103715146</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring Cloud入门-Eureka服务注册与发现(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring Cloud入门-Ribbon服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></td>
</tr>
<tr>
<td>4</td>
<td>Spring Cloud入门-Hystrix断路器(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></td>
</tr>
<tr>
<td>5</td>
<td>Spring Cloud入门-Hystrix Dashboard与Turbine断路器监控(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103734664">https://blog.csdn.net/ThinkWon/article/details/103734664</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring Cloud入门-OpenFeign服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring Cloud入门-Zuul服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103738851">https://blog.csdn.net/ThinkWon/article/details/103738851</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Cloud入门-Config分布式配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103739628">https://blog.csdn.net/ThinkWon/article/details/103739628</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud入门-Bus消息总线(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753372">https://blog.csdn.net/ThinkWon/article/details/103753372</a></td>
</tr>
<tr>
<td>10</td>
<td>Spring Cloud入门-Sleuth服务链路跟踪(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753896">https://blog.csdn.net/ThinkWon/article/details/103753896</a></td>
</tr>
<tr>
<td>11</td>
<td>Spring Cloud入门-Consul服务注册发现与配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103756139">https://blog.csdn.net/ThinkWon/article/details/103756139</a></td>
</tr>
<tr>
<td>12</td>
<td>Spring Cloud入门-Gateway服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></td>
</tr>
<tr>
<td>13</td>
<td>Spring Cloud入门-Admin服务监控中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103758697">https://blog.csdn.net/ThinkWon/article/details/103758697</a></td>
</tr>
<tr>
<td>14</td>
<td>Spring Cloud入门-Oauth2授权的使用(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103761687">https://blog.csdn.net/ThinkWon/article/details/103761687</a></td>
</tr>
<tr>
<td>15</td>
<td>Spring Cloud入门-Oauth2授权之JWT集成(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103763364">https://blog.csdn.net/ThinkWon/article/details/103763364</a></td>
</tr>
<tr>
<td>16</td>
<td>Spring Cloud入门-Oauth2授权之基于JWT完成单点登录(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103766368">https://blog.csdn.net/ThinkWon/article/details/103766368</a></td>
</tr>
<tr>
<td>17</td>
<td>Spring Cloud入门-Nacos实现注册和配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103769680">https://blog.csdn.net/ThinkWon/article/details/103769680</a></td>
</tr>
<tr>
<td>18</td>
<td>Spring Cloud入门-Sentinel实现服务限流、熔断与降级(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103770879">https://blog.csdn.net/ThinkWon/article/details/103770879</a></td>
</tr>
<tr>
<td>19</td>
<td>Spring Cloud入门-Seata处理分布式事务问题(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786102">https://blog.csdn.net/ThinkWon/article/details/103786102</a></td>
</tr>
<tr>
<td>20</td>
<td>Spring Cloud入门-汇总篇(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786588">https://blog.csdn.net/ThinkWon/article/details/103786588</a></td>
</tr>
</tbody>
</table></div><h3><a name="t64"></a><a name="t64"></a><a id="_938"></a>服务注册发现</h3>
<h3><a name="t65"></a><a name="t65"></a><a id="_940"></a>服务配置</h3>
<h3><a name="t66"></a><a name="t66"></a><a id="_942"></a>负载均衡</h3>
<h3><a name="t67"></a><a name="t67"></a><a id="_944"></a>服务调用</h3>
<h3><a name="t68"></a><a name="t68"></a><a id="_946"></a>服务限流</h3>
<h3><a name="t69"></a><a name="t69"></a><a id="_948"></a>熔断降级</h3>
<h3><a name="t70"></a><a name="t70"></a><a id="_950"></a>网关路由</h3>
<h3><a name="t71"></a><a name="t71"></a><a id="_952"></a>服务权限</h3>
<h3><a name="t72"></a><a name="t72"></a><a id="_954"></a>链路追踪</h3>
<h3><a name="t73"></a><a name="t73"></a><a id="_956"></a>分布式事务</h3>
<h3><a name="t74"></a><a name="t74"></a><a id="_958"></a>分布式缓存</h3>
<h3><a name="t75"></a><a name="t75"></a><a id="_960"></a>分布式会话</h3>
<h3><a name="t76"></a><a name="t76"></a><a id="_962"></a>日志收集</h3>
<h3><a name="t77"></a><a name="t77"></a><a id="_964"></a>服务监控</h3>
<h3><a name="t78"></a><a name="t78"></a><a id="_966"></a>消息驱动</h3>
<h3><a name="t79"></a><a name="t79"></a><a id="_968"></a>数据处理流</h3>
<h3><a name="t80"></a><a name="t80"></a><a id="_970"></a>自动化测试与部署</h3>
<h3><a name="t81"></a><a name="t81"></a><a id="_972"></a>第三方支持</h3>
<h3><a name="t82"></a><a name="t82"></a><a id="Zookeeper_974"></a>分布式协调服务Zookeeper</h3>
<h2><a name="t83"></a><a name="t83"></a><a id="_978"></a>程序员的一些思考</h2>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>程序员写个人技术博客的价值与意义</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102980571">https://blog.csdn.net/ThinkWon/article/details/102980571</a></td>
</tr>
<tr>
<td>2</td>
<td>Java知识体系最强总结(2020版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></td>
</tr>
</tbody>
</table></div><h2><a name="t84"></a><a name="t84"></a><a id="_987"></a>项目管理</h2>
<h3><a name="t85"></a><a name="t85"></a><a id="_989"></a>需求调研</h3>
<h3><a name="t86"></a><a name="t86"></a><a id="_991"></a>项目管理</h3>
<h3><a name="t87"></a><a name="t87"></a><a id="_993"></a>代码管理</h3>
<h3><a name="t88"></a><a name="t88"></a><a id="_995"></a>文档管理</h3>
<h3><a name="t89"></a><a name="t89"></a><a id="_997"></a>测试</h3>
<h2><a name="t90"></a><a name="t90"></a><a id="_1003"></a>运维</h2>
<p>常规监控</p>
<p>APM</p>
<p>持续集成(CI/CD)：Jenkins，环境分离</p>
<p>自动化运维：Ansible，puppet，chef</p>
<p>测试：TDD 理论，单元测试，压力测试，全链路压测，A/B 、灰度、蓝绿测试</p>
<p>虚拟化：KVM，Xen，OpenVZ</p>
<p>容器技术：Docker</p>
<p>云技术：OpenStack</p>
<p>DevOps</p>
<p>文档管理</p>
<h2><a name="t91"></a><a name="t91"></a><a id="_1027"></a>操作系统</h2>
<p>计算机操作系统</p>
<p>计算机原理</p>
<p>Linux</p>
<p>CPU</p>
<p>进程，线程，协程</p>
<h2><a name="t92"></a><a name="t92"></a><a id="_1043"></a>推荐书籍</h2>
<h2><a name="t93"></a><a name="t93"></a><a id="_1049"></a>云计算</h2>
<p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p>
<h2><a name="t94"></a><a name="t94"></a><a id="_1055"></a>搜索引擎</h2>
<p>Solr、Lucene、Nutch、Elasticsearch</p>
<h2><a name="t95"></a><a name="t95"></a><a id="_1061"></a>权限管理</h2>
<p>Shiro、Spring Security</p>
<h2><a name="t96"></a><a name="t96"></a><a id="_1067"></a>区块链</h2>
<p>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=整理的Java知识体系主要包括基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识
), {}, org.apache.catalina.session.StandardSessionFacade@c90b94]
2020-04-10 22:33:30.876 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 22:33:30.907 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:33:30.907 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:33:30.907 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:33:30.907 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:33:30.936 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:33:32.787 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:33:32.787 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:33:32.787 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:33:32.787 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:33:32.797 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:33:34.034 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:33:34.035 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:33:34.035 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:33:34.036 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:33:34.041 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:33:40.348 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:33:40.348 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:33:40.348 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:33:40.348 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:33:40.358 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:33:41.434 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:33:41.434 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:33:41.435 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:33:41.435 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:33:41.444 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:35:53.318 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs/12/input
2020-04-10 22:35:53.328 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:35:53.328 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.editInput
2020-04-10 22:35:53.328 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:35:53.378 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs-input
2020-04-10 22:35:59.798 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:35:59.798 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:35:59.798 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 22:35:59.808 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title= Java知识体系最强总结(2020版), content=<p><strong>本人从事Java开发已多年，平时有记录问题解决方案和总结知识点的习惯，整理了一些有关Java的知识体系，这不是最终版，会不定期的更新</strong>。也算是记录自己在从事编程工作的成长足迹，通过博客可以促进博主与阅读者的共同进步，结交更多志同道合的朋友。<strong>特此分享给大家，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽</strong>。</p>
<p>整理的Java知识体系主要包括<strong>基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链</strong>等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识。<strong>千里之行始于足下</strong>，希望大家根据自己的薄弱点，查缺补漏，根据自己感兴趣的方面多学习，学的精通一点，从现在开始行动起来。<strong>路漫漫其修远兮，吾将上下而求索，不管编程开发的路有多么难走，多么艰辛，我们都将百折不挠，不遗余力地去追求和探索</strong>。</p>
<p><img src="https://img-blog.csdnimg.cn/2019121810082198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly90aGlua3dvbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=""></p>
<p></p><div class="toc"><h3><a name="t0"></a><a name="t0"></a>文章目录</h3><ul><ul><li><a href="#Java_10" rel="nofollow" target="_self">Java面试总结</a></li><li><a href="#_37" rel="nofollow" target="_self">基础知识</a></li><ul><li><a href="#Java_39" rel="nofollow" target="_self">Java概述</a></li><li><a href="#_51" rel="nofollow" target="_self">基础语法</a></li><li><a href="#_98" rel="nofollow" target="_self">面向对象</a></li><li><a href="#_114" rel="nofollow" target="_self">集合框架</a></li><li><a href="#IO_129" rel="nofollow" target="_self">IO流</a></li><li><a href="#_143" rel="nofollow" target="_self">网络编程</a></li><li><a href="#API_173" rel="nofollow" target="_self">常用API</a></li><li><a href="#_185" rel="nofollow" target="_self">常用工具类库</a></li><li><a href="#_198" rel="nofollow" target="_self">单元测试</a></li><li><a href="#_204" rel="nofollow" target="_self">异常</a></li><li><a href="#_217" rel="nofollow" target="_self">日志</a></li></ul><li><a href="#_233" rel="nofollow" target="_self">工具</a></li><ul><li><a href="#IDEA_235" rel="nofollow" target="_self">IDEA</a></li><li><a href="#Eclipse__STS_244" rel="nofollow" target="_self">Eclipse &amp; STS</a></li><li><a href="#Maven_252" rel="nofollow" target="_self">Maven</a></li><li><a href="#Docker_265" rel="nofollow" target="_self">Docker</a></li><li><a href="#Git_273" rel="nofollow" target="_self">Git</a></li><li><a href="#GitLab_286" rel="nofollow" target="_self">GitLab</a></li><li><a href="#GitKraken_290" rel="nofollow" target="_self">GitKraken</a></li><li><a href="#Navicat_294" rel="nofollow" target="_self">Navicat</a></li></ul><li><a href="#_298" rel="nofollow" target="_self">并发编程</a></li><ul><li><a href="#_300" rel="nofollow" target="_self">基础知识</a></li><li><a href="#_311" rel="nofollow" target="_self">并发理论</a></li><li><a href="#_322" rel="nofollow" target="_self">并发关键字</a></li><li><a href="#Lock_332" rel="nofollow" target="_self">Lock体系</a></li><li><a href="#_357" rel="nofollow" target="_self">并发容器</a></li><li><a href="#_371" rel="nofollow" target="_self">线程池</a></li><li><a href="#_382" rel="nofollow" target="_self">原子操作类</a></li><li><a href="#_390" rel="nofollow" target="_self">并发工具</a></li><li><a href="#_399" rel="nofollow" target="_self">并发实践</a></li></ul><li><a href="#_409" rel="nofollow" target="_self">数据结构与算法</a></li><ul><li><a href="#_411" rel="nofollow" target="_self">数据结构</a></li><li><a href="#_438" rel="nofollow" target="_self">算法</a></li><ul><li><a href="#_461" rel="nofollow" target="_self">排序算法</a></li></ul><li><a href="#LeetCode_479" rel="nofollow" target="_self">LeetCode</a></li></ul><li><a href="#_498" rel="nofollow" target="_self">数据库</a></li><ul><li><a href="#Oracle_500" rel="nofollow" target="_self">Oracle</a></li><li><a href="#MySQL_504" rel="nofollow" target="_self">MySQL</a></li><ul><li><a href="#_506" rel="nofollow" target="_self">数据库基础知识</a></li><li><a href="#_508" rel="nofollow" target="_self">数据类型</a></li><li><a href="#_510" rel="nofollow" target="_self">引擎</a></li><li><a href="#_512" rel="nofollow" target="_self">索引</a></li><li><a href="#_514" rel="nofollow" target="_self">三大范式</a></li><li><a href="#SQL_516" rel="nofollow" target="_self">常用SQL语句</a></li><li><a href="#_518" rel="nofollow" target="_self">存储过程与函数</a></li><li><a href="#_520" rel="nofollow" target="_self">视图</a></li><li><a href="#MySQL_522" rel="nofollow" target="_self">MySQL优化</a></li><li><a href="#_524" rel="nofollow" target="_self">事务</a></li><li><a href="#_526" rel="nofollow" target="_self">数据备份与还原</a></li></ul><li><a href="#Redis_530" rel="nofollow" target="_self">Redis</a></li></ul><li><a href="#Java_551" rel="nofollow" target="_self">Java虚拟机</a></li><ul><li><a href="#Java_553" rel="nofollow" target="_self">深入理解Java虚拟机</a></li></ul><li><a href="#_566" rel="nofollow" target="_self">架构设计</a></li><ul><li><a href="#_578" rel="nofollow" target="_self">设计模式</a></li><ul><li><a href="#_599" rel="nofollow" target="_self">创建型模式</a></li><li><a href="#_611" rel="nofollow" target="_self">结构型模式</a></li><li><a href="#_626" rel="nofollow" target="_self">行为型模式</a></li><li><a href="#J2EE_645" rel="nofollow" target="_self">J2EE模式</a></li><li><a href="#_660" rel="nofollow" target="_self">实践应用</a></li></ul></ul><li><a href="#_672" rel="nofollow" target="_self">应用框架</a></li><ul><li><a href="#Spring_745" rel="nofollow" target="_self">Spring</a></li><ul><li><a href="#Spring_756" rel="nofollow" target="_self">《Spring实战》读书笔记</a></li></ul><li><a href="#Spring_MVC_770" rel="nofollow" target="_self">Spring MVC</a></li><li><a href="#MyBatis_774" rel="nofollow" target="_self">MyBatis</a></li><li><a href="#Hibernate_796" rel="nofollow" target="_self">Hibernate</a></li><li><a href="#Shiro_800" rel="nofollow" target="_self">Shiro</a></li><li><a href="#Spring_Security_802" rel="nofollow" target="_self">Spring Security</a></li><li><a href="#Netty_806" rel="nofollow" target="_self">Netty</a></li><li><a href="#_810" rel="nofollow" target="_self">搜索引擎</a></li><ul><li><a href="#LuceneSolr_812" rel="nofollow" target="_self">Lucene/Solr</a></li><li><a href="#Elasticsearch_814" rel="nofollow" target="_self">Elasticsearch</a></li><li><a href="#ELK_816" rel="nofollow" target="_self">ELK</a></li></ul></ul><li><a href="#_826" rel="nofollow" target="_self">中间件</a></li><ul><li><a href="#_828" rel="nofollow" target="_self">消息中间件</a></li><ul><li><a href="#RabbitMQ_830" rel="nofollow" target="_self">RabbitMQ</a></li><li><a href="#RocketMQ_832" rel="nofollow" target="_self">RocketMQ</a></li><li><a href="#ActiveMQ_834" rel="nofollow" target="_self">ActiveMQ</a></li><li><a href="#Kafka_836" rel="nofollow" target="_self">Kafka</a></li></ul><li><a href="#_842" rel="nofollow" target="_self">远程过程调用中间件</a></li><ul><li><a href="#Dubbo_844" rel="nofollow" target="_self">Dubbo</a></li></ul><li><a href="#_850" rel="nofollow" target="_self">数据访问中间件</a></li><li><a href="#Web_858" rel="nofollow" target="_self">Web应用服务器</a></li><ul><li><a href="#Tomcat_860" rel="nofollow" target="_self">Tomcat</a></li><li><a href="#Nginx_876" rel="nofollow" target="_self">Nginx</a></li></ul><li><a href="#_880" rel="nofollow" target="_self">缓存</a></li><li><a href="#_892" rel="nofollow" target="_self">其他</a></li><ul><li><a href="#Zookeeper_894" rel="nofollow" target="_self">Zookeeper</a></li></ul></ul><li><a href="#_900" rel="nofollow" target="_self">微服务与分布式</a></li><ul><li><a href="#Spring_Boot_902" rel="nofollow" target="_self">Spring Boot</a></li><li><a href="#Spring_Cloud_911" rel="nofollow" target="_self">Spring Cloud</a></li><li><a href="#_938" rel="nofollow" target="_self">服务注册发现</a></li><li><a href="#_940" rel="nofollow" target="_self">服务配置</a></li><li><a href="#_942" rel="nofollow" target="_self">负载均衡</a></li><li><a href="#_944" rel="nofollow" target="_self">服务调用</a></li><li><a href="#_946" rel="nofollow" target="_self">服务限流</a></li><li><a href="#_948" rel="nofollow" target="_self">熔断降级</a></li><li><a href="#_950" rel="nofollow" target="_self">网关路由</a></li><li><a href="#_952" rel="nofollow" target="_self">服务权限</a></li><li><a href="#_954" rel="nofollow" target="_self">链路追踪</a></li><li><a href="#_956" rel="nofollow" target="_self">分布式事务</a></li><li><a href="#_958" rel="nofollow" target="_self">分布式缓存</a></li><li><a href="#_960" rel="nofollow" target="_self">分布式会话</a></li><li><a href="#_962" rel="nofollow" target="_self">日志收集</a></li><li><a href="#_964" rel="nofollow" target="_self">服务监控</a></li><li><a href="#_966" rel="nofollow" target="_self">消息驱动</a></li><li><a href="#_968" rel="nofollow" target="_self">数据处理流</a></li><li><a href="#_970" rel="nofollow" target="_self">自动化测试与部署</a></li><li><a href="#_972" rel="nofollow" target="_self">第三方支持</a></li><li><a href="#Zookeeper_974" rel="nofollow" target="_self">分布式协调服务Zookeeper</a></li></ul><li><a href="#_978" rel="nofollow" target="_self">程序员的一些思考</a></li><li><a href="#_987" rel="nofollow" target="_self">项目管理</a></li><ul><li><a href="#_989" rel="nofollow" target="_self">需求调研</a></li><li><a href="#_991" rel="nofollow" target="_self">项目管理</a></li><li><a href="#_993" rel="nofollow" target="_self">代码管理</a></li><li><a href="#_995" rel="nofollow" target="_self">文档管理</a></li><li><a href="#_997" rel="nofollow" target="_self">测试</a></li></ul><li><a href="#_1003" rel="nofollow" target="_self">运维</a></li><li><a href="#_1027" rel="nofollow" target="_self">操作系统</a></li><li><a href="#_1043" rel="nofollow" target="_self">推荐书籍</a></li><li><a href="#_1049" rel="nofollow" target="_self">云计算</a></li><li><a href="#_1055" rel="nofollow" target="_self">搜索引擎</a></li><li><a href="#_1061" rel="nofollow" target="_self">权限管理</a></li><li><a href="#_1067" rel="nofollow" target="_self">区块链</a></li></ul></ul></div><p></p>
<h2><a name="t1"></a><a name="t1"></a><a id="Java_10"></a>Java面试总结</h2>
<p>Java面试总结汇总，整理了包括Java基础知识，集合容器，并发编程，JVM，常用开源框架Spring，MyBatis，数据库，中间件等，包含了作为一个Java工程师在面试中需要用到或者可能用到的绝大部分知识。欢迎大家阅读，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽。文章持续更新中…</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java基础知识面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390612</a></td>
</tr>
<tr>
<td>2</td>
<td>Java集合容器面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588551" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588551</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390689" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390689</a></td>
</tr>
<tr>
<td>4</td>
<td>并发编程面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104863992" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104863992</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390752" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390752</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397516" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397516</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring MVC面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397427" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397427</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Boot面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397299" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397299</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397367" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397367</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/101292950" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/101292950</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/103522351" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/103522351</a></td>
</tr>
<tr>
<td>12</td>
<td>MySQL数据库面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104778621" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104778621</a></td>
</tr>
<tr>
<td>13</td>
<td>消息中间件MQ与RabbitMQ面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588612</a></td>
</tr>
<tr>
<td>14</td>
<td>Dubbo面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390006" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390006</a></td>
</tr>
<tr>
<td>15</td>
<td>Linux面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588679" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588679</a></td>
</tr>
<tr>
<td>16</td>
<td>Tomcat面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397665" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397665</a></td>
</tr>
<tr>
<td>17</td>
<td>ZooKeeper面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397719" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397719</a></td>
</tr>
<tr>
<td>18</td>
<td>Netty面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104391081" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104391081</a></td>
</tr>
</tbody>
</table></div><h2><a name="t2"></a><a name="t2"></a><a id="_37"></a>基础知识</h2>
<h3><a name="t3"></a><a name="t3"></a><a id="Java_39"></a>Java概述</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353575">https://blog.csdn.net/ThinkWon/article/details/94353575</a></td>
</tr>
<tr>
<td>2</td>
<td>Java发展历程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353653">https://blog.csdn.net/ThinkWon/article/details/94353653</a></td>
</tr>
<tr>
<td>3</td>
<td>Java语言特点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354013">https://blog.csdn.net/ThinkWon/article/details/94354013</a></td>
</tr>
<tr>
<td>4</td>
<td>JDK安装与环境变量配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353907">https://blog.csdn.net/ThinkWon/article/details/94353907</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM、JRE和JDK的关系</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101369973">https://blog.csdn.net/ThinkWon/article/details/101369973</a></td>
</tr>
</tbody>
</table></div><h3><a name="t4"></a><a name="t4"></a><a id="_51"></a>基础语法</h3>
<p>大部分已完成</p>
<p>待整理：</p>
<p>Java开发必会的反编译知识（附支持对Lambda进行反编译的工具）</p>
<p>一文读懂什么是Java中的自动拆装箱</p>
<p>Java的枚举类型用法介绍</p>
<p>类、枚举、接口、数组、可变参数</p>
<p>泛型、序列化</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java标识符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101637454">https://blog.csdn.net/ThinkWon/article/details/101637454</a></td>
</tr>
<tr>
<td>2</td>
<td>Java关键字(Java 8版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101642385">https://blog.csdn.net/ThinkWon/article/details/101642385</a></td>
</tr>
<tr>
<td>3</td>
<td>Java注释</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643185">https://blog.csdn.net/ThinkWon/article/details/101643185</a></td>
</tr>
<tr>
<td>4</td>
<td>Java访问修饰符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643412">https://blog.csdn.net/ThinkWon/article/details/101643412</a></td>
</tr>
<tr>
<td>5</td>
<td>Java分隔符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643617">https://blog.csdn.net/ThinkWon/article/details/101643617</a></td>
</tr>
<tr>
<td>6</td>
<td>Java转义字符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643769">https://blog.csdn.net/ThinkWon/article/details/101643769</a></td>
</tr>
<tr>
<td>7</td>
<td>Java进制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643936">https://blog.csdn.net/ThinkWon/article/details/101643936</a></td>
</tr>
<tr>
<td>8</td>
<td>Java流程控制语句</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645978">https://blog.csdn.net/ThinkWon/article/details/101645978</a></td>
</tr>
<tr>
<td>9</td>
<td>Java流程控制语句-顺序结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101644820">https://blog.csdn.net/ThinkWon/article/details/101644820</a></td>
</tr>
<tr>
<td>10</td>
<td>Java流程控制语句-分支结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645224">https://blog.csdn.net/ThinkWon/article/details/101645224</a></td>
</tr>
<tr>
<td>11</td>
<td>Java流程控制语句-循环结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645757">https://blog.csdn.net/ThinkWon/article/details/101645757</a></td>
</tr>
<tr>
<td>12</td>
<td>Java表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101648114">https://blog.csdn.net/ThinkWon/article/details/101648114</a></td>
</tr>
<tr>
<td>13</td>
<td>Java运算符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649002">https://blog.csdn.net/ThinkWon/article/details/101649002</a></td>
</tr>
<tr>
<td>14</td>
<td>Java变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649292">https://blog.csdn.net/ThinkWon/article/details/101649292</a></td>
</tr>
<tr>
<td>15</td>
<td>Java常量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649446">https://blog.csdn.net/ThinkWon/article/details/101649446</a></td>
</tr>
<tr>
<td>16</td>
<td>Java数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649568">https://blog.csdn.net/ThinkWon/article/details/101649568</a></td>
</tr>
<tr>
<td>17</td>
<td>Java反射</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100128361">https://blog.csdn.net/ThinkWon/article/details/100128361</a></td>
</tr>
<tr>
<td>18</td>
<td>Java语法糖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100103689">https://blog.csdn.net/ThinkWon/article/details/100103689</a></td>
</tr>
<tr>
<td>19</td>
<td>Java注解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100178709">https://blog.csdn.net/ThinkWon/article/details/100178709</a></td>
</tr>
<tr>
<td>20</td>
<td>JSON简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642585">https://blog.csdn.net/ThinkWon/article/details/100642585</a></td>
</tr>
<tr>
<td>21</td>
<td>Properties类简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667783">https://blog.csdn.net/ThinkWon/article/details/100667783</a></td>
</tr>
<tr>
<td>22</td>
<td>XML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642425">https://blog.csdn.net/ThinkWon/article/details/100642425</a></td>
</tr>
<tr>
<td>23</td>
<td>YML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642870">https://blog.csdn.net/ThinkWon/article/details/100642870</a></td>
</tr>
<tr>
<td>24</td>
<td>Java8新特性-Lambda表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642932">https://blog.csdn.net/ThinkWon/article/details/100642932</a></td>
</tr>
<tr>
<td>25</td>
<td>Java基础语法</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354151">https://blog.csdn.net/ThinkWon/article/details/94354151</a></td>
</tr>
</tbody>
</table></div><h3><a name="t5"></a><a name="t5"></a><a id="_98"></a>面向对象</h3>
<p>待整理：</p>
<p>抽象</p>
<p>继承、封装、多态</p>
<p>接口、抽象类、内部类</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>什么是面向对象</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667386">https://blog.csdn.net/ThinkWon/article/details/100667386</a></td>
</tr>
</tbody>
</table></div><h3><a name="t6"></a><a name="t6"></a><a id="_114"></a>集合框架</h3>
<p>迭代器、增强for、泛型</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java集合框架总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98844796">https://blog.csdn.net/ThinkWon/article/details/98844796</a></td>
</tr>
<tr>
<td>2</td>
<td>ArrayList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845119">https://blog.csdn.net/ThinkWon/article/details/98845119</a></td>
</tr>
<tr>
<td>3</td>
<td>HashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845487">https://blog.csdn.net/ThinkWon/article/details/98845487</a></td>
</tr>
<tr>
<td>4</td>
<td>LinkedHashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102574293">https://blog.csdn.net/ThinkWon/article/details/102574293</a></td>
</tr>
<tr>
<td>5</td>
<td>LinkedList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102573923">https://blog.csdn.net/ThinkWon/article/details/102573923</a></td>
</tr>
<tr>
<td>6</td>
<td>TreeMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571883">https://blog.csdn.net/ThinkWon/article/details/102571883</a></td>
</tr>
</tbody>
</table></div><h3><a name="t7"></a><a name="t7"></a><a id="IO_129"></a>IO流</h3>
<p>待整理：</p>
<p>File、递归</p>
<p>字节流、字节缓冲流</p>
<p>编码表、编码方式、转换流、序列化、序列化流、打印流、commons-io</p>
<h3><a name="t8"></a><a name="t8"></a><a id="_143"></a>网络编程</h3>
<p>网络概述、网络模型</p>
<p>Socket原理机制</p>
<p>UDP</p>
<p>TCP/IP</p>
<p>协议、OSI 七层协议、HTTP、HTTP2.0、HTTPS</p>
<p>网络安全</p>
<p>	XSS、CSRF、SQL注入、Hash Dos、脚本注入、漏洞扫描工具、验证码</p>
<p>	DDoS防范、用户隐私信息保护、序列化漏洞</p>
<p>	加密解密、对称加密、哈希算法、非对称加密</p>
<p>	服务安全、数据安全、数据备份</p>
<p>	网络隔离、登录跳板机、非外网分离</p>
<p>	认证、授权</p>
<h3><a name="t9"></a><a name="t9"></a><a id="API_173"></a>常用API</h3>
<p>Date、DateFormat、Calendar</p>
<p>String、StringBuffer、StringBuilder、正则表达式</p>
<p>Number、Radom、Math、System、包装类</p>
<p>Arrays、Collections</p>
<h3><a name="t10"></a><a name="t10"></a><a id="_185"></a>常用工具类库</h3>
<p>待整理：OkHttp、commons-lang3</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>HttpClient工具类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101391489">https://blog.csdn.net/ThinkWon/article/details/101391489</a></td>
</tr>
<tr>
<td>2</td>
<td>WGS84地球坐标系，GCJ02火星坐标系，BD09百度坐标系简介与转换</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392187">https://blog.csdn.net/ThinkWon/article/details/101392187</a></td>
</tr>
<tr>
<td>3</td>
<td>Lombok简介、使用、工作原理、优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392808">https://blog.csdn.net/ThinkWon/article/details/101392808</a></td>
</tr>
<tr>
<td>4</td>
<td>Java几种常用JSON库性能比较</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354358">https://blog.csdn.net/ThinkWon/article/details/94354358</a></td>
</tr>
</tbody>
</table></div><h3><a name="t11"></a><a name="t11"></a><a id="_198"></a>单元测试</h3>
<p>JUnit</p>
<h3><a name="t12"></a><a name="t12"></a><a id="_204"></a>异常</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java异常总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>2</td>
<td>Java异常架构与异常关键字</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101676779">https://blog.csdn.net/ThinkWon/article/details/101676779</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101677638">https://blog.csdn.net/ThinkWon/article/details/101677638</a></td>
</tr>
<tr>
<td>4</td>
<td>如何选择异常类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>5</td>
<td>Java异常常见面试题</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101681073">https://blog.csdn.net/ThinkWon/article/details/101681073</a></td>
</tr>
<tr>
<td>6</td>
<td>Java异常处理最佳实践</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94347002">https://blog.csdn.net/ThinkWon/article/details/94347002</a></td>
</tr>
</tbody>
</table></div><h3><a name="t13"></a><a name="t13"></a><a id="_217"></a>日志</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>常用日志框架Log4j，Logback，Log4j2性能比较与日志门面SLF4J简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101621135">https://blog.csdn.net/ThinkWon/article/details/101621135</a></td>
</tr>
<tr>
<td>2</td>
<td>日志作用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101619725">https://blog.csdn.net/ThinkWon/article/details/101619725</a></td>
</tr>
<tr>
<td>3</td>
<td>Apache Log4j2详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95043111">https://blog.csdn.net/ThinkWon/article/details/95043111</a></td>
</tr>
<tr>
<td>4</td>
<td>Log4j2同步日志，混合日志和异步日志配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625124">https://blog.csdn.net/ThinkWon/article/details/101625124</a></td>
</tr>
<tr>
<td>5</td>
<td>Log4j2配置文件详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101629302">https://blog.csdn.net/ThinkWon/article/details/101629302</a></td>
</tr>
<tr>
<td>6</td>
<td>Log4j2的Appenders配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625820">https://blog.csdn.net/ThinkWon/article/details/101625820</a></td>
</tr>
<tr>
<td>7</td>
<td>Log4j2的Filters配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101627162">https://blog.csdn.net/ThinkWon/article/details/101627162</a></td>
</tr>
<tr>
<td>8</td>
<td>Log4j2的Policy触发策略与Strategy滚动策略配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628222">https://blog.csdn.net/ThinkWon/article/details/101628222</a></td>
</tr>
<tr>
<td>9</td>
<td>Log4j2的Loggers配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628736">https://blog.csdn.net/ThinkWon/article/details/101628736</a></td>
</tr>
</tbody>
</table></div><h2><a name="t14"></a><a name="t14"></a><a id="_233"></a>工具</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="IDEA_235"></a>IDEA</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>IDEA常用配置和常用插件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101020481">https://blog.csdn.net/ThinkWon/article/details/101020481</a></td>
</tr>
<tr>
<td>2</td>
<td>IDEA中Maven依赖下载失败解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101312918">https://blog.csdn.net/ThinkWon/article/details/101312918</a></td>
</tr>
</tbody>
</table></div><h3><a name="t16"></a><a name="t16"></a><a id="Eclipse__STS_244"></a>Eclipse &amp; STS</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Eclipse &amp; Spring Tool Suite常用配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101025543">https://blog.csdn.net/ThinkWon/article/details/101025543</a></td>
</tr>
</tbody>
</table></div><h3><a name="t17"></a><a name="t17"></a><a id="Maven_252"></a>Maven</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Maven简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346090">https://blog.csdn.net/ThinkWon/article/details/94346090</a></td>
</tr>
<tr>
<td>2</td>
<td>Maven安装与配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346569">https://blog.csdn.net/ThinkWon/article/details/94346569</a></td>
</tr>
<tr>
<td>3</td>
<td>Maven依赖冲突</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483020">https://blog.csdn.net/ThinkWon/article/details/101483020</a></td>
</tr>
<tr>
<td>4</td>
<td>手动安装Maven依赖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483478">https://blog.csdn.net/ThinkWon/article/details/101483478</a></td>
</tr>
<tr>
<td>5</td>
<td>Maven部署jar包到远程仓库</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483769">https://blog.csdn.net/ThinkWon/article/details/101483769</a></td>
</tr>
<tr>
<td>6</td>
<td>Maven私服Nexus安装与使用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346681">https://blog.csdn.net/ThinkWon/article/details/94346681</a></td>
</tr>
</tbody>
</table></div><h3><a name="t18"></a><a name="t18"></a><a id="Docker_265"></a>Docker</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>使用Docker安装GitLab</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95042797">https://blog.csdn.net/ThinkWon/article/details/95042797</a></td>
</tr>
</tbody>
</table></div><h3><a name="t19"></a><a name="t19"></a><a id="Git_273"></a>Git</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Git简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346816">https://blog.csdn.net/ThinkWon/article/details/94346816</a></td>
</tr>
<tr>
<td>2</td>
<td>版本控制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449228">https://blog.csdn.net/ThinkWon/article/details/101449228</a></td>
</tr>
<tr>
<td>3</td>
<td>Git忽略文件.gitignore详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101447866">https://blog.csdn.net/ThinkWon/article/details/101447866</a></td>
</tr>
<tr>
<td>4</td>
<td>Git与SVN的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449611">https://blog.csdn.net/ThinkWon/article/details/101449611</a></td>
</tr>
<tr>
<td>5</td>
<td>常用Git命令</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101450420">https://blog.csdn.net/ThinkWon/article/details/101450420</a></td>
</tr>
<tr>
<td>6</td>
<td>Git，GitHub与GitLab的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101470086">https://blog.csdn.net/ThinkWon/article/details/101470086</a></td>
</tr>
</tbody>
</table></div><h3><a name="t20"></a><a name="t20"></a><a id="GitLab_286"></a>GitLab</h3>
<h3><a name="t21"></a><a name="t21"></a><a id="GitKraken_290"></a>GitKraken</h3>
<h3><a name="t22"></a><a name="t22"></a><a id="Navicat_294"></a>Navicat</h3>
<h2><a name="t23"></a><a name="t23"></a><a id="_298"></a>并发编程</h2>
<h3><a name="t24"></a><a name="t24"></a><a id="_300"></a>基础知识</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发编程的优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102020811">https://blog.csdn.net/ThinkWon/article/details/102020811</a></td>
</tr>
<tr>
<td>2</td>
<td>线程的状态和基本操作</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102027115">https://blog.csdn.net/ThinkWon/article/details/102027115</a></td>
</tr>
<tr>
<td>3</td>
<td>进程和线程的区别(超详细)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">https://blog.csdn.net/ThinkWon/article/details/102021274</a></td>
</tr>
<tr>
<td>4</td>
<td>创建线程的四种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021143">https://blog.csdn.net/ThinkWon/article/details/102021143</a></td>
</tr>
</tbody>
</table></div><h3><a name="t25"></a><a name="t25"></a><a id="_311"></a>并发理论</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java内存模型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073578">https://blog.csdn.net/ThinkWon/article/details/102073578</a></td>
</tr>
<tr>
<td>2</td>
<td>重排序与数据依赖性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073858">https://blog.csdn.net/ThinkWon/article/details/102073858</a></td>
</tr>
<tr>
<td>3</td>
<td>as-if-serial规则和happens-before规则的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074107">https://blog.csdn.net/ThinkWon/article/details/102074107</a></td>
</tr>
<tr>
<td>4</td>
<td>Java并发理论总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074440">https://blog.csdn.net/ThinkWon/article/details/102074440</a></td>
</tr>
</tbody>
</table></div><h3><a name="t26"></a><a name="t26"></a><a id="_322"></a>并发关键字</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java并发关键字-synchronized</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243189">https://blog.csdn.net/ThinkWon/article/details/102243189</a></td>
</tr>
<tr>
<td>2</td>
<td>Java并发关键字-volatile</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243670">https://blog.csdn.net/ThinkWon/article/details/102243670</a></td>
</tr>
<tr>
<td>3</td>
<td>Java并发关键字-final</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102244477">https://blog.csdn.net/ThinkWon/article/details/102244477</a></td>
</tr>
</tbody>
</table></div><h3><a name="t27"></a><a name="t27"></a><a id="Lock_332"></a>Lock体系</h3>
<p>待整理：</p>
<p>公平锁 &amp; 非公平锁</p>
<p>乐观锁 &amp; 悲观锁</p>
<p>可重入锁 &amp; 不可重入锁</p>
<p>互斥锁 &amp; 共享锁</p>
<p>死锁</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Lock简介与初识AQS</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102468837">https://blog.csdn.net/ThinkWon/article/details/102468837</a></td>
</tr>
<tr>
<td>2</td>
<td>AQS(AbstractQueuedSynchronizer)详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469112">https://blog.csdn.net/ThinkWon/article/details/102469112</a></td>
</tr>
<tr>
<td>3</td>
<td>ReentrantLock(重入锁)实现原理与公平锁非公平锁区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469388">https://blog.csdn.net/ThinkWon/article/details/102469388</a></td>
</tr>
<tr>
<td>4</td>
<td>读写锁ReentrantReadWriteLock源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469598">https://blog.csdn.net/ThinkWon/article/details/102469598</a></td>
</tr>
<tr>
<td>5</td>
<td>Condition源码分析与等待通知机制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469889">https://blog.csdn.net/ThinkWon/article/details/102469889</a></td>
</tr>
<tr>
<td>6</td>
<td>LockSupport详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469993">https://blog.csdn.net/ThinkWon/article/details/102469993</a></td>
</tr>
</tbody>
</table></div><h3><a name="t28"></a><a name="t28"></a><a id="_357"></a>并发容器</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102506447">https://blog.csdn.net/ThinkWon/article/details/102506447</a></td>
</tr>
<tr>
<td>2</td>
<td>并发容器之ConcurrentLinkedQueue详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508089">https://blog.csdn.net/ThinkWon/article/details/102508089</a></td>
</tr>
<tr>
<td>3</td>
<td>并发容器之CopyOnWriteArrayList详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508258">https://blog.csdn.net/ThinkWon/article/details/102508258</a></td>
</tr>
<tr>
<td>4</td>
<td>并发容器之ThreadLocal详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508381">https://blog.csdn.net/ThinkWon/article/details/102508381</a></td>
</tr>
<tr>
<td>5</td>
<td>ThreadLocal内存泄漏分析与解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508721">https://blog.csdn.net/ThinkWon/article/details/102508721</a></td>
</tr>
<tr>
<td>6</td>
<td>并发容器之BlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508901">https://blog.csdn.net/ThinkWon/article/details/102508901</a></td>
</tr>
<tr>
<td>7</td>
<td>并发容器之ArrayBlockingQueue与LinkedBlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508971">https://blog.csdn.net/ThinkWon/article/details/102508971</a></td>
</tr>
</tbody>
</table></div><h3><a name="t29"></a><a name="t29"></a><a id="_371"></a>线程池</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>线程池ThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541900">https://blog.csdn.net/ThinkWon/article/details/102541900</a></td>
</tr>
<tr>
<td>2</td>
<td>Executors类创建四种常见线程池</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541990">https://blog.csdn.net/ThinkWon/article/details/102541990</a></td>
</tr>
<tr>
<td>3</td>
<td>线程池之ScheduledThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542299">https://blog.csdn.net/ThinkWon/article/details/102542299</a></td>
</tr>
<tr>
<td>4</td>
<td>FutureTask详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542404">https://blog.csdn.net/ThinkWon/article/details/102542404</a></td>
</tr>
</tbody>
</table></div><h3><a name="t30"></a><a name="t30"></a><a id="_382"></a>原子操作类</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>原子操作类总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556910">https://blog.csdn.net/ThinkWon/article/details/102556910</a></td>
</tr>
</tbody>
</table></div><h3><a name="t31"></a><a name="t31"></a><a id="_390"></a>并发工具</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发工具之CountDownLatch与CyclicBarrier</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556958">https://blog.csdn.net/ThinkWon/article/details/102556958</a></td>
</tr>
<tr>
<td>2</td>
<td>并发工具之Semaphore与Exchanger</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557034">https://blog.csdn.net/ThinkWon/article/details/102557034</a></td>
</tr>
</tbody>
</table></div><h3><a name="t32"></a><a name="t32"></a><a id="_399"></a>并发实践</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>实现生产者消费者的三种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557126">https://blog.csdn.net/ThinkWon/article/details/102557126</a></td>
</tr>
</tbody>
</table></div><h2><a name="t33"></a><a name="t33"></a><a id="_409"></a>数据结构与算法</h2>
<h3><a name="t34"></a><a name="t34"></a><a id="_411"></a>数据结构</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>红黑树详细分析(图文详解)，看了都说好</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571535">https://blog.csdn.net/ThinkWon/article/details/102571535</a></td>
</tr>
</tbody>
</table></div><pre class="prettyprint"><code class="prism language-sh has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、数组

2、栈
3、队列
4、链表
5、树
	二叉树
    完全二叉树
    平衡二叉树
    二叉查找树（BST）
    红黑树
    B，B+，B*树
    LSM 树

字段是不是数据结构

<h3><a name="t35"></a><a name="t35"></a><a id="_438"></a>算法</h3>
<p>语言只是编程工具，算法才是编程之魂！</p>
<pre class="prettyprint"><code class="prism language-text has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">1、排序算法：快速排序、归并排序、计数排序
2、搜索算法：回溯、递归、剪枝
3、图论：最短路径、最小生成树、网络流建模
4、动态规划：背包问题、最长子序列、计数问题
5、基础技巧：分治、倍增、二分法、贪心算法


宽度优先搜索
深度优先搜索
广度优先
双指针
扫描线

朴素贝叶斯
推荐算法


<h4><a id="_461"></a>排序算法</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>史上最全经典排序算法总结(Java实现)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95616819">https://blog.csdn.net/ThinkWon/article/details/95616819</a></td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序（Bubble Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534473">https://blog.csdn.net/ThinkWon/article/details/101534473</a></td>
</tr>
<tr>
<td>3</td>
<td>选择排序（Selection Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534721">https://blog.csdn.net/ThinkWon/article/details/101534721</a></td>
</tr>
<tr>
<td>4</td>
<td>插入排序（Insertion Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101537804">https://blog.csdn.net/ThinkWon/article/details/101537804</a></td>
</tr>
<tr>
<td>5</td>
<td>希尔排序（Shell Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538166">https://blog.csdn.net/ThinkWon/article/details/101538166</a></td>
</tr>
<tr>
<td>6</td>
<td>归并排序（Merge Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538756">https://blog.csdn.net/ThinkWon/article/details/101538756</a></td>
</tr>
<tr>
<td>7</td>
<td>快速排序（Quick Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543580">https://blog.csdn.net/ThinkWon/article/details/101543580</a></td>
</tr>
<tr>
<td>8</td>
<td>堆排序（Heap Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543941">https://blog.csdn.net/ThinkWon/article/details/101543941</a></td>
</tr>
<tr>
<td>9</td>
<td>计数排序（Counting Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544159">https://blog.csdn.net/ThinkWon/article/details/101544159</a></td>
</tr>
<tr>
<td>10</td>
<td>桶排序（Bucket Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544356">https://blog.csdn.net/ThinkWon/article/details/101544356</a></td>
</tr>
<tr>
<td>11</td>
<td>基数排序（Radix Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101545529">https://blog.csdn.net/ThinkWon/article/details/101545529</a></td>
</tr>
</tbody>
</table></div><h3><a name="t36"></a><a name="t36"></a><a id="LeetCode_479"></a>LeetCode</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>LeetCode第1题 两数之和(Two Sum)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113049">https://blog.csdn.net/ThinkWon/article/details/103113049</a></td>
</tr>
<tr>
<td>2</td>
<td>LeetCode第3题 无重复字符的最长子串(Longest Substring Without Repeating Characters)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113969">https://blog.csdn.net/ThinkWon/article/details/103113969</a></td>
</tr>
<tr>
<td>3</td>
<td>LeetCode第7题 整数反转(Reverse Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113167">https://blog.csdn.net/ThinkWon/article/details/103113167</a></td>
</tr>
<tr>
<td>4</td>
<td>LeetCode第9题 回文数(Palindrome Number)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113151">https://blog.csdn.net/ThinkWon/article/details/103113151</a></td>
</tr>
<tr>
<td>5</td>
<td>LeetCode第13题 罗马数字转整数(Roman to Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113519">https://blog.csdn.net/ThinkWon/article/details/103113519</a></td>
</tr>
<tr>
<td>6</td>
<td>LeetCode第14题 最长公共前缀(Longest Common Prefix)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113700">https://blog.csdn.net/ThinkWon/article/details/103113700</a></td>
</tr>
<tr>
<td>7</td>
<td>LeetCode第20题 有效的括号(Valid Parentheses)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113848">https://blog.csdn.net/ThinkWon/article/details/103113848</a></td>
</tr>
<tr>
<td>8</td>
<td>LeetCode第26题 删除排序数组中的重复项(Remove Duplicates from Sorted Array)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113097">https://blog.csdn.net/ThinkWon/article/details/103113097</a></td>
</tr>
</tbody>
</table></div><h2><a name="t37"></a><a name="t37"></a><a id="_498"></a>数据库</h2>
<h3><a name="t38"></a><a name="t38"></a><a id="Oracle_500"></a>Oracle</h3>
<h3><a name="t39"></a><a name="t39"></a><a id="MySQL_504"></a>MySQL</h3>
<h4><a id="_506"></a>数据库基础知识</h4>
<h4><a id="_508"></a>数据类型</h4>
<h4><a id="_510"></a>引擎</h4>
<h4><a id="_512"></a>索引</h4>
<h4><a id="_514"></a>三大范式</h4>
<h4><a id="SQL_516"></a>常用SQL语句</h4>
<h4><a id="_518"></a>存储过程与函数</h4>
<h4><a id="_520"></a>视图</h4>
<h4><a id="MySQL_522"></a>MySQL优化</h4>
<h4><a id="_524"></a>事务</h4>
<h4><a id="_526"></a>数据备份与还原</h4>
<h3><a name="t40"></a><a name="t40"></a><a id="Redis_530"></a>Redis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Redis总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/99999584">https://blog.csdn.net/ThinkWon/article/details/99999584</a></td>
</tr>
<tr>
<td>2</td>
<td>Redis使用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521497">https://blog.csdn.net/ThinkWon/article/details/101521497</a></td>
</tr>
<tr>
<td>3</td>
<td>Redis数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521724">https://blog.csdn.net/ThinkWon/article/details/101521724</a></td>
</tr>
<tr>
<td>4</td>
<td>Redis持久化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522209">https://blog.csdn.net/ThinkWon/article/details/101522209</a></td>
</tr>
<tr>
<td>5</td>
<td>Redis过期键的删除策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522970">https://blog.csdn.net/ThinkWon/article/details/101522970</a></td>
</tr>
<tr>
<td>6</td>
<td>Redis数据淘汰策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530624">https://blog.csdn.net/ThinkWon/article/details/101530624</a></td>
</tr>
<tr>
<td>7</td>
<td>Redis与Memcached的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530406">https://blog.csdn.net/ThinkWon/article/details/101530406</a></td>
</tr>
<tr>
<td>8</td>
<td>Redis常见面试题(精简版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></td>
</tr>
<tr>
<td>9</td>
<td>Redis中缓存雪崩、缓存穿透等问题的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103402008">https://blog.csdn.net/ThinkWon/article/details/103402008</a></td>
</tr>
<tr>
<td>10</td>
<td>阿里云Redis开发规范学习总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103400250">https://blog.csdn.net/ThinkWon/article/details/103400250</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis开发常用规范</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401781">https://blog.csdn.net/ThinkWon/article/details/103401781</a></td>
</tr>
<tr>
<td>12</td>
<td>这可能是最中肯的Redis规范了</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401978">https://blog.csdn.net/ThinkWon/article/details/103401978</a></td>
</tr>
</tbody>
</table></div><h2><a name="t41"></a><a name="t41"></a><a id="Java_551"></a>Java虚拟机</h2>
<h3><a name="t42"></a><a name="t42"></a><a id="Java_553"></a>深入理解Java虚拟机</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>深入理解Java虚拟机-走近Java</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103804387">https://blog.csdn.net/ThinkWon/article/details/103804387</a></td>
</tr>
<tr>
<td>2</td>
<td>深入理解Java虚拟机-Java内存区域与内存溢出异常</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103827387">https://blog.csdn.net/ThinkWon/article/details/103827387</a></td>
</tr>
<tr>
<td>3</td>
<td>深入理解Java虚拟机-垃圾回收器与内存分配策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103831676">https://blog.csdn.net/ThinkWon/article/details/103831676</a></td>
</tr>
<tr>
<td>4</td>
<td>深入理解Java虚拟机-虚拟机执行子系统</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835168">https://blog.csdn.net/ThinkWon/article/details/103835168</a></td>
</tr>
<tr>
<td>5</td>
<td>深入理解Java虚拟机-程序编译与代码优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835883">https://blog.csdn.net/ThinkWon/article/details/103835883</a></td>
</tr>
<tr>
<td>6</td>
<td>深入理解Java虚拟机-高效并发</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103836167">https://blog.csdn.net/ThinkWon/article/details/103836167</a></td>
</tr>
</tbody>
</table></div><h2><a name="t43"></a><a name="t43"></a><a id="_566"></a>架构设计</h2>
<p>高可用架构</p>
<p>高并发架构</p>
<p>可伸缩架构</p>
<p>集群</p>
<h3><a name="t44"></a><a name="t44"></a><a id="_578"></a>设计模式</h3>
<p>常用设计模式</p>
<p>创建型：<br>
单例模式、工厂模式、抽象工厂模式</p>
<p>结构型：<br>
适配器模式、外观模式、代理模式、装饰器模式</p>
<p>行为型：<br>
观察者模式、策略模式、模板模式</p>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>设计模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/96829572">https://blog.csdn.net/ThinkWon/article/details/96829572</a></td>
</tr>
</tbody>
</table></div><h4><a id="_599"></a>创建型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抽象工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382584">https://blog.csdn.net/ThinkWon/article/details/101382584</a></td>
</tr>
<tr>
<td>2</td>
<td>单例模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382855">https://blog.csdn.net/ThinkWon/article/details/101382855</a></td>
</tr>
<tr>
<td>3</td>
<td>工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383285">https://blog.csdn.net/ThinkWon/article/details/101383285</a></td>
</tr>
<tr>
<td>4</td>
<td>建造者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383401">https://blog.csdn.net/ThinkWon/article/details/101383401</a></td>
</tr>
<tr>
<td>5</td>
<td>原型模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383491">https://blog.csdn.net/ThinkWon/article/details/101383491</a></td>
</tr>
</tbody>
</table></div><h4><a id="_611"></a>结构型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>代理模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384436">https://blog.csdn.net/ThinkWon/article/details/101384436</a></td>
</tr>
<tr>
<td>2</td>
<td>过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384514">https://blog.csdn.net/ThinkWon/article/details/101384514</a></td>
</tr>
<tr>
<td>3</td>
<td>桥接模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384584">https://blog.csdn.net/ThinkWon/article/details/101384584</a></td>
</tr>
<tr>
<td>4</td>
<td>适配器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384619">https://blog.csdn.net/ThinkWon/article/details/101384619</a></td>
</tr>
<tr>
<td>5</td>
<td>外观模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384676">https://blog.csdn.net/ThinkWon/article/details/101384676</a></td>
</tr>
<tr>
<td>6</td>
<td>享元模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384716">https://blog.csdn.net/ThinkWon/article/details/101384716</a></td>
</tr>
<tr>
<td>7</td>
<td>装饰器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384753">https://blog.csdn.net/ThinkWon/article/details/101384753</a></td>
</tr>
<tr>
<td>8</td>
<td>组合模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384786">https://blog.csdn.net/ThinkWon/article/details/101384786</a></td>
</tr>
</tbody>
</table></div><h4><a id="_626"></a>行为型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>备忘录模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383582">https://blog.csdn.net/ThinkWon/article/details/101383582</a></td>
</tr>
<tr>
<td>2</td>
<td>策略模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383647">https://blog.csdn.net/ThinkWon/article/details/101383647</a></td>
</tr>
<tr>
<td>3</td>
<td>迭代器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383722">https://blog.csdn.net/ThinkWon/article/details/101383722</a></td>
</tr>
<tr>
<td>4</td>
<td>访问者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383780">https://blog.csdn.net/ThinkWon/article/details/101383780</a></td>
</tr>
<tr>
<td>5</td>
<td>观察者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383872">https://blog.csdn.net/ThinkWon/article/details/101383872</a></td>
</tr>
<tr>
<td>6</td>
<td>解释器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383930">https://blog.csdn.net/ThinkWon/article/details/101383930</a></td>
</tr>
<tr>
<td>7</td>
<td>空对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384001">https://blog.csdn.net/ThinkWon/article/details/101384001</a></td>
</tr>
<tr>
<td>8</td>
<td>命令模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384090">https://blog.csdn.net/ThinkWon/article/details/101384090</a></td>
</tr>
<tr>
<td>9</td>
<td>模板模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384138">https://blog.csdn.net/ThinkWon/article/details/101384138</a></td>
</tr>
<tr>
<td>10</td>
<td>责任链模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384195">https://blog.csdn.net/ThinkWon/article/details/101384195</a></td>
</tr>
<tr>
<td>11</td>
<td>中介者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384251">https://blog.csdn.net/ThinkWon/article/details/101384251</a></td>
</tr>
<tr>
<td>12</td>
<td>状态模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384315">https://blog.csdn.net/ThinkWon/article/details/101384315</a></td>
</tr>
</tbody>
</table></div><h4><a id="J2EE_645"></a>J2EE模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MVC模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101381701">https://blog.csdn.net/ThinkWon/article/details/101381701</a></td>
</tr>
<tr>
<td>2</td>
<td>传输对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382134">https://blog.csdn.net/ThinkWon/article/details/101382134</a></td>
</tr>
<tr>
<td>3</td>
<td>服务定位器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382179">https://blog.csdn.net/ThinkWon/article/details/101382179</a></td>
</tr>
<tr>
<td>4</td>
<td>拦截过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382210">https://blog.csdn.net/ThinkWon/article/details/101382210</a></td>
</tr>
<tr>
<td>5</td>
<td>前端控制器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382247">https://blog.csdn.net/ThinkWon/article/details/101382247</a></td>
</tr>
<tr>
<td>6</td>
<td>数据访问对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382287">https://blog.csdn.net/ThinkWon/article/details/101382287</a></td>
</tr>
<tr>
<td>7</td>
<td>业务代表模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382356">https://blog.csdn.net/ThinkWon/article/details/101382356</a></td>
</tr>
<tr>
<td>8</td>
<td>组合实体模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382390">https://blog.csdn.net/ThinkWon/article/details/101382390</a></td>
</tr>
</tbody>
</table></div><h4><a id="_660"></a>实践应用</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102924813">https://blog.csdn.net/ThinkWon/article/details/102924813</a></td>
</tr>
</tbody>
</table></div><h2><a name="t45"></a><a name="t45"></a><a id="_672"></a>应用框架</h2>
<p>如何学习一个框架或者技术</p>
<ul>
<li>
<p>是什么，简介，概述</p>
</li>
<li>
<p>有什么用，用途，使用场景</p>
</li>
<li>
<p>怎么用，在实际开发中的应用，注意事项</p>
</li>
<li>
<p>优缺点</p>
</li>
<li>
<p>框架原理，工作流程，工作原理</p>
</li>
<li>
<p>常见面试题</p>
</li>
<li>
<p>源码分析，核心类，核心方法，设计模式</p>
</li>
<li>
<p>发布博客，在开发和实践中，博客反馈中持续改进</p>
</li>
<li>
<p>与同事朋友交流，技术论坛，技术分享中持续丰富知识</p>
</li>
</ul>
<p>常用框架</p>
<ul>
<li>
<p>集成开发工具（IDE）：Eclipse、MyEclipse、Spring Tool Suite（STS）、Intellij IDEA、NetBeans、JBuilder、JCreator</p>
</li>
<li>
<p>JAVA服务器：tomcat、jboss、websphere、weblogic、resin、jetty、apusic、apache</p>
</li>
<li>
<p>负载均衡：nginx、lvs</p>
</li>
<li>
<p>web层框架：Spring MVC、Struts2、Struts1、Google Web Toolkit（GWT）、JQWEB</p>
</li>
<li>
<p>服务层框架：Spring、EJB</p>
</li>
<li>
<p>持久层框架：Hibernate、MyBatis、JPA、TopLink</p>
</li>
<li>
<p>数据库：Oracle、MySql、MSSQL、Redis</p>
</li>
<li>
<p>项目构建：maven、ant</p>
</li>
<li>
<p>持续集成：Jenkins</p>
</li>
<li>
<p>版本控制：SVN、CVS、VSS、GIT</p>
</li>
<li>
<p>私服：Nexus</p>
</li>
<li>
<p>消息组件：IBM MQ、RabbitMQ、ActiveMQ、RocketMq</p>
</li>
<li>
<p>日志框架：Commons Logging、log4j 、slf4j、IOC</p>
</li>
<li>
<p>缓存框架：memcache、redis、ehcache、jboss cache</p>
</li>
<li>
<p>RPC框架：Hessian、Dubbo</p>
</li>
<li>
<p>规则引擎：Drools</p>
</li>
<li>
<p>工作流：Activiti</p>
</li>
<li>
<p>批处理：Spring Batch</p>
</li>
<li>
<p>通用查询框架：Query DSL</p>
</li>
<li>
<p>JAVA安全框架：shiro、Spring Security</p>
</li>
<li>
<p>代码静态检查工具：FindBugs、PMD</p>
</li>
<li>
<p>Linux操作系统：CentOS、Ubuntu、SUSE Linux、</p>
</li>
<li>
<p>常用工具：PLSQL Developer（Oracle）、Navicat（MySql）、FileZilla（FTP）、Xshell（SSH）、putty（SSH）、SecureCRT（SSH）、jd-gui（反编译）</p>
</li>
</ul>
<h3><a name="t46"></a><a name="t46"></a><a id="Spring_745"></a>Spring</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring简介、设计理念、优缺点、应用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810748">https://blog.csdn.net/ThinkWon/article/details/102810748</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring模块组成(框架组成、整体架构、体系架构、体系结构)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810819">https://blog.csdn.net/ThinkWon/article/details/102810819</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring容器中bean的生命周期</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102866432">https://blog.csdn.net/ThinkWon/article/details/102866432</a></td>
</tr>
<tr>
<td>4</td>
<td>控制反转(IoC)与依赖注入(DI)详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102912332">https://blog.csdn.net/ThinkWon/article/details/102912332</a></td>
</tr>
</tbody>
</table></div><h4><a id="Spring_756"></a>《Spring实战》读书笔记</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>《Spring实战》读书笔记-第1章 Spring之旅</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103097364">https://blog.csdn.net/ThinkWon/article/details/103097364</a></td>
</tr>
<tr>
<td>2</td>
<td>《Spring实战》读书笔记-第2章 装配Bean</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103527675">https://blog.csdn.net/ThinkWon/article/details/103527675</a></td>
</tr>
<tr>
<td>3</td>
<td>《Spring实战》读书笔记-第3章 高级装配</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103536621">https://blog.csdn.net/ThinkWon/article/details/103536621</a></td>
</tr>
<tr>
<td>4</td>
<td>《Spring实战》读书笔记-第4章 面向切面的Spring</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103541166">https://blog.csdn.net/ThinkWon/article/details/103541166</a></td>
</tr>
<tr>
<td>5</td>
<td>《Spring实战》读书笔记-第5章 构建Spring Web应用程序</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103550083">https://blog.csdn.net/ThinkWon/article/details/103550083</a></td>
</tr>
<tr>
<td>6</td>
<td>《Spring实战》读书笔记-第6章 渲染Web视图</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103559672">https://blog.csdn.net/ThinkWon/article/details/103559672</a></td>
</tr>
<tr>
<td>7</td>
<td>《Spring实战》读书笔记-第7章 Spring MVC的高级技术</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103562467">https://blog.csdn.net/ThinkWon/article/details/103562467</a></td>
</tr>
</tbody>
</table></div><h3><a name="t47"></a><a name="t47"></a><a id="Spring_MVC_770"></a>Spring MVC</h3>
<h3><a name="t48"></a><a name="t48"></a><a id="MyBatis_774"></a>MyBatis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MyBatis官方文档</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887995">https://blog.csdn.net/ThinkWon/article/details/100887995</a></td>
</tr>
<tr>
<td>2</td>
<td>MyBatis官方文档-简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887076">https://blog.csdn.net/ThinkWon/article/details/100887076</a></td>
</tr>
<tr>
<td>3</td>
<td>MyBatis官方文档-入门</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887176">https://blog.csdn.net/ThinkWon/article/details/100887176</a></td>
</tr>
<tr>
<td>4</td>
<td>MyBatis官方文档-XML 配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887349">https://blog.csdn.net/ThinkWon/article/details/100887349</a></td>
</tr>
<tr>
<td>5</td>
<td>MyBatis官方文档-XML 映射文件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887478">https://blog.csdn.net/ThinkWon/article/details/100887478</a></td>
</tr>
<tr>
<td>6</td>
<td>MyBatis官方文档-动态 SQL</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887702">https://blog.csdn.net/ThinkWon/article/details/100887702</a></td>
</tr>
<tr>
<td>7</td>
<td>MyBatis官方文档-Java API</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887746">https://blog.csdn.net/ThinkWon/article/details/100887746</a></td>
</tr>
<tr>
<td>8</td>
<td>MyBatis官方文档-SQL 语句构建器类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887821">https://blog.csdn.net/ThinkWon/article/details/100887821</a></td>
</tr>
<tr>
<td>9</td>
<td>MyBatis官方文档-日志</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887951">https://blog.csdn.net/ThinkWon/article/details/100887951</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis功能架构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101295025">https://blog.csdn.net/ThinkWon/article/details/101295025</a></td>
</tr>
<tr>
<td>11</td>
<td>MyBatis工作原理</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293609">https://blog.csdn.net/ThinkWon/article/details/101293609</a></td>
</tr>
<tr>
<td>12</td>
<td>MyBatis核心类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293216">https://blog.csdn.net/ThinkWon/article/details/101293216</a></td>
</tr>
<tr>
<td>13</td>
<td>MyBatis面试宝典</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101292950">https://blog.csdn.net/ThinkWon/article/details/101292950</a></td>
</tr>
<tr>
<td>14</td>
<td>MyBatis实现一对一，一对多关联查询</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101322334">https://blog.csdn.net/ThinkWon/article/details/101322334</a></td>
</tr>
<tr>
<td>15</td>
<td>MyBatis缓存</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101351212">https://blog.csdn.net/ThinkWon/article/details/101351212</a></td>
</tr>
</tbody>
</table></div><h3><a name="t49"></a><a name="t49"></a><a id="Hibernate_796"></a>Hibernate</h3>
<h3><a name="t50"></a><a name="t50"></a><a id="Shiro_800"></a>Shiro</h3>
<h3><a name="t51"></a><a name="t51"></a><a id="Spring_Security_802"></a>Spring Security</h3>
<h3><a name="t52"></a><a name="t52"></a><a id="Netty_806"></a>Netty</h3>
<h3><a name="t53"></a><a name="t53"></a><a id="_810"></a>搜索引擎</h3>
<h4><a id="LuceneSolr_812"></a>Lucene/Solr</h4>
<h4><a id="Elasticsearch_814"></a>Elasticsearch</h4>
<h4><a id="ELK_816"></a>ELK</h4>
<h2><a name="t54"></a><a name="t54"></a><a id="_826"></a>中间件</h2>
<h3><a name="t55"></a><a name="t55"></a><a id="_828"></a>消息中间件</h3>
<h4><a id="RabbitMQ_830"></a>RabbitMQ</h4>
<h4><a id="RocketMQ_832"></a>RocketMQ</h4>
<h4><a id="ActiveMQ_834"></a>ActiveMQ</h4>
<h4><a id="Kafka_836"></a>Kafka</h4>
<h3><a name="t56"></a><a name="t56"></a><a id="_842"></a>远程过程调用中间件</h3>
<h4><a id="Dubbo_844"></a>Dubbo</h4>
<h3><a name="t57"></a><a name="t57"></a><a id="_850"></a>数据访问中间件</h3>
<p>Sharding JDBC</p>
<p>MyCat</p>
<h3><a name="t58"></a><a name="t58"></a><a id="Web_858"></a>Web应用服务器</h3>
<h4><a id="Tomcat_860"></a>Tomcat</h4>
<p>待整理：Tomcat各组件作用	Tomcat集群	Tomcat面试题</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Win10安装Tomcat服务器与配置环境变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622905">https://blog.csdn.net/ThinkWon/article/details/102622905</a></td>
</tr>
<tr>
<td>2</td>
<td>Linux(CentOS7)安装Tomcat与设置Tomcat为开机启动项</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102717537">https://blog.csdn.net/ThinkWon/article/details/102717537</a></td>
</tr>
<tr>
<td>3</td>
<td>Tomcat与JDK版本对应关系，Tomcat各版本特性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622738">https://blog.csdn.net/ThinkWon/article/details/102622738</a></td>
</tr>
<tr>
<td>4</td>
<td>Tomcat目录结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102619466">https://blog.csdn.net/ThinkWon/article/details/102619466</a></td>
</tr>
<tr>
<td>5</td>
<td>Tomcat乱码与端口占用的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622824">https://blog.csdn.net/ThinkWon/article/details/102622824</a></td>
</tr>
<tr>
<td>6</td>
<td>Tomcat系统架构与请求处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102676442">https://blog.csdn.net/ThinkWon/article/details/102676442</a></td>
</tr>
<tr>
<td>7</td>
<td>史上最强Tomcat8性能优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102744033">https://blog.csdn.net/ThinkWon/article/details/102744033</a></td>
</tr>
</tbody>
</table></div><h4><a id="Nginx_876"></a>Nginx</h4>
<h3><a name="t59"></a><a name="t59"></a><a id="_880"></a>缓存</h3>
<p>本地缓存</p>
<p>客户端缓存</p>
<p>服务端缓存</p>
<p>	web缓存，Redis，Memcached，Ehcache</p>
<h3><a name="t60"></a><a name="t60"></a><a id="_892"></a>其他</h3>
<h4><a id="Zookeeper_894"></a>Zookeeper</h4>
<h2><a name="t61"></a><a name="t61"></a><a id="_900"></a>微服务与分布式</h2>
<h3><a name="t62"></a><a name="t62"></a><a id="Spring_Boot_902"></a>Spring Boot</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>application.yml与bootstrap.yml的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100007093">https://blog.csdn.net/ThinkWon/article/details/100007093</a></td>
</tr>
<tr>
<td>2</td>
<td>一分钟了解约定优于配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101703815">https://blog.csdn.net/ThinkWon/article/details/101703815</a></td>
</tr>
</tbody>
</table></div><h3><a name="t63"></a><a name="t63"></a><a id="Spring_Cloud_911"></a>Spring Cloud</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring Cloud入门-十分钟了解Spring Cloud</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103715146">https://blog.csdn.net/ThinkWon/article/details/103715146</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring Cloud入门-Eureka服务注册与发现(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring Cloud入门-Ribbon服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></td>
</tr>
<tr>
<td>4</td>
<td>Spring Cloud入门-Hystrix断路器(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></td>
</tr>
<tr>
<td>5</td>
<td>Spring Cloud入门-Hystrix Dashboard与Turbine断路器监控(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103734664">https://blog.csdn.net/ThinkWon/article/details/103734664</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring Cloud入门-OpenFeign服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring Cloud入门-Zuul服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103738851">https://blog.csdn.net/ThinkWon/article/details/103738851</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Cloud入门-Config分布式配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103739628">https://blog.csdn.net/ThinkWon/article/details/103739628</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud入门-Bus消息总线(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753372">https://blog.csdn.net/ThinkWon/article/details/103753372</a></td>
</tr>
<tr>
<td>10</td>
<td>Spring Cloud入门-Sleuth服务链路跟踪(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753896">https://blog.csdn.net/ThinkWon/article/details/103753896</a></td>
</tr>
<tr>
<td>11</td>
<td>Spring Cloud入门-Consul服务注册发现与配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103756139">https://blog.csdn.net/ThinkWon/article/details/103756139</a></td>
</tr>
<tr>
<td>12</td>
<td>Spring Cloud入门-Gateway服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></td>
</tr>
<tr>
<td>13</td>
<td>Spring Cloud入门-Admin服务监控中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103758697">https://blog.csdn.net/ThinkWon/article/details/103758697</a></td>
</tr>
<tr>
<td>14</td>
<td>Spring Cloud入门-Oauth2授权的使用(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103761687">https://blog.csdn.net/ThinkWon/article/details/103761687</a></td>
</tr>
<tr>
<td>15</td>
<td>Spring Cloud入门-Oauth2授权之JWT集成(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103763364">https://blog.csdn.net/ThinkWon/article/details/103763364</a></td>
</tr>
<tr>
<td>16</td>
<td>Spring Cloud入门-Oauth2授权之基于JWT完成单点登录(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103766368">https://blog.csdn.net/ThinkWon/article/details/103766368</a></td>
</tr>
<tr>
<td>17</td>
<td>Spring Cloud入门-Nacos实现注册和配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103769680">https://blog.csdn.net/ThinkWon/article/details/103769680</a></td>
</tr>
<tr>
<td>18</td>
<td>Spring Cloud入门-Sentinel实现服务限流、熔断与降级(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103770879">https://blog.csdn.net/ThinkWon/article/details/103770879</a></td>
</tr>
<tr>
<td>19</td>
<td>Spring Cloud入门-Seata处理分布式事务问题(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786102">https://blog.csdn.net/ThinkWon/article/details/103786102</a></td>
</tr>
<tr>
<td>20</td>
<td>Spring Cloud入门-汇总篇(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786588">https://blog.csdn.net/ThinkWon/article/details/103786588</a></td>
</tr>
</tbody>
</table></div><h3><a name="t64"></a><a name="t64"></a><a id="_938"></a>服务注册发现</h3>
<h3><a name="t65"></a><a name="t65"></a><a id="_940"></a>服务配置</h3>
<h3><a name="t66"></a><a name="t66"></a><a id="_942"></a>负载均衡</h3>
<h3><a name="t67"></a><a name="t67"></a><a id="_944"></a>服务调用</h3>
<h3><a name="t68"></a><a name="t68"></a><a id="_946"></a>服务限流</h3>
<h3><a name="t69"></a><a name="t69"></a><a id="_948"></a>熔断降级</h3>
<h3><a name="t70"></a><a name="t70"></a><a id="_950"></a>网关路由</h3>
<h3><a name="t71"></a><a name="t71"></a><a id="_952"></a>服务权限</h3>
<h3><a name="t72"></a><a name="t72"></a><a id="_954"></a>链路追踪</h3>
<h3><a name="t73"></a><a name="t73"></a><a id="_956"></a>分布式事务</h3>
<h3><a name="t74"></a><a name="t74"></a><a id="_958"></a>分布式缓存</h3>
<h3><a name="t75"></a><a name="t75"></a><a id="_960"></a>分布式会话</h3>
<h3><a name="t76"></a><a name="t76"></a><a id="_962"></a>日志收集</h3>
<h3><a name="t77"></a><a name="t77"></a><a id="_964"></a>服务监控</h3>
<h3><a name="t78"></a><a name="t78"></a><a id="_966"></a>消息驱动</h3>
<h3><a name="t79"></a><a name="t79"></a><a id="_968"></a>数据处理流</h3>
<h3><a name="t80"></a><a name="t80"></a><a id="_970"></a>自动化测试与部署</h3>
<h3><a name="t81"></a><a name="t81"></a><a id="_972"></a>第三方支持</h3>
<h3><a name="t82"></a><a name="t82"></a><a id="Zookeeper_974"></a>分布式协调服务Zookeeper</h3>
<h2><a name="t83"></a><a name="t83"></a><a id="_978"></a>程序员的一些思考</h2>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>程序员写个人技术博客的价值与意义</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102980571">https://blog.csdn.net/ThinkWon/article/details/102980571</a></td>
</tr>
<tr>
<td>2</td>
<td>Java知识体系最强总结(2020版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></td>
</tr>
</tbody>
</table></div><h2><a name="t84"></a><a name="t84"></a><a id="_987"></a>项目管理</h2>
<h3><a name="t85"></a><a name="t85"></a><a id="_989"></a>需求调研</h3>
<h3><a name="t86"></a><a name="t86"></a><a id="_991"></a>项目管理</h3>
<h3><a name="t87"></a><a name="t87"></a><a id="_993"></a>代码管理</h3>
<h3><a name="t88"></a><a name="t88"></a><a id="_995"></a>文档管理</h3>
<h3><a name="t89"></a><a name="t89"></a><a id="_997"></a>测试</h3>
<h2><a name="t90"></a><a name="t90"></a><a id="_1003"></a>运维</h2>
<p>常规监控</p>
<p>APM</p>
<p>持续集成(CI/CD)：Jenkins，环境分离</p>
<p>自动化运维：Ansible，puppet，chef</p>
<p>测试：TDD 理论，单元测试，压力测试，全链路压测，A/B 、灰度、蓝绿测试</p>
<p>虚拟化：KVM，Xen，OpenVZ</p>
<p>容器技术：Docker</p>
<p>云技术：OpenStack</p>
<p>DevOps</p>
<p>文档管理</p>
<h2><a name="t91"></a><a name="t91"></a><a id="_1027"></a>操作系统</h2>
<p>计算机操作系统</p>
<p>计算机原理</p>
<p>Linux</p>
<p>CPU</p>
<p>进程，线程，协程</p>
<h2><a name="t92"></a><a name="t92"></a><a id="_1043"></a>推荐书籍</h2>
<h2><a name="t93"></a><a name="t93"></a><a id="_1049"></a>云计算</h2>
<p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p>
<h2><a name="t94"></a><a name="t94"></a><a id="_1055"></a>搜索引擎</h2>
<p>Solr、Lucene、Nutch、Elasticsearch</p>
<h2><a name="t95"></a><a name="t95"></a><a id="_1061"></a>权限管理</h2>
<p>Shiro、Spring Security</p>
<h2><a name="t96"></a><a name="t96"></a><a id="_1067"></a>区块链</h2>
<p>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=整理的Java知识体系主要包括基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识
), {}, org.apache.catalina.session.StandardSessionFacade@c90b94]
2020-04-10 22:35:59.868 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 22:35:59.888 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:35:59.888 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:35:59.888 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:35:59.888 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:35:59.918 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:36:01.967 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 22:36:01.967 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:36:01.967 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 22:36:01.967 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 22:36:02.027 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:36:04.437 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:36:04.437 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:36:04.437 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:36:04.437 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:36:04.457 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:36:05.345 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:36:05.345 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:36:05.346 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:36:05.347 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:36:05.351 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:36:16.793 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:36:16.793 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:36:16.793 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:36:16.793 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:36:16.813 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:36:17.933 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:36:17.933 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:36:17.933 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:36:17.933 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:36:17.933 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:49:46.374 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:49:46.384 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:49:46.384 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 22:49:46.384 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title= Java知识体系最强总结(2020版), content=<p><strong>本人从事Java开发已多年，平时有记录问题解决方案和总结知识点的习惯，整理了一些有关Java的知识体系，这不是最终版，会不定期的更新</strong>。也算是记录自己在从事编程工作的成长足迹，通过博客可以促进博主与阅读者的共同进步，结交更多志同道合的朋友。<strong>特此分享给大家，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽</strong>。</p>
<p>整理的Java知识体系主要包括<strong>基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链</strong>等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识。<strong>千里之行始于足下</strong>，希望大家根据自己的薄弱点，查缺补漏，根据自己感兴趣的方面多学习，学的精通一点，从现在开始行动起来。<strong>路漫漫其修远兮，吾将上下而求索，不管编程开发的路有多么难走，多么艰辛，我们都将百折不挠，不遗余力地去追求和探索</strong>。</p>
<p><img src="https://img-blog.csdnimg.cn/2019121810082198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly90aGlua3dvbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=""></p>
<p></p><div class="toc"><h3><a name="t0"></a><a name="t0"></a>文章目录</h3><ul><ul><li><a href="#Java_10" rel="nofollow" target="_self">Java面试总结</a></li><li><a href="#_37" rel="nofollow" target="_self">基础知识</a></li><ul><li><a href="#Java_39" rel="nofollow" target="_self">Java概述</a></li><li><a href="#_51" rel="nofollow" target="_self">基础语法</a></li><li><a href="#_98" rel="nofollow" target="_self">面向对象</a></li><li><a href="#_114" rel="nofollow" target="_self">集合框架</a></li><li><a href="#IO_129" rel="nofollow" target="_self">IO流</a></li><li><a href="#_143" rel="nofollow" target="_self">网络编程</a></li><li><a href="#API_173" rel="nofollow" target="_self">常用API</a></li><li><a href="#_185" rel="nofollow" target="_self">常用工具类库</a></li><li><a href="#_198" rel="nofollow" target="_self">单元测试</a></li><li><a href="#_204" rel="nofollow" target="_self">异常</a></li><li><a href="#_217" rel="nofollow" target="_self">日志</a></li></ul><li><a href="#_233" rel="nofollow" target="_self">工具</a></li><ul><li><a href="#IDEA_235" rel="nofollow" target="_self">IDEA</a></li><li><a href="#Eclipse__STS_244" rel="nofollow" target="_self">Eclipse &amp; STS</a></li><li><a href="#Maven_252" rel="nofollow" target="_self">Maven</a></li><li><a href="#Docker_265" rel="nofollow" target="_self">Docker</a></li><li><a href="#Git_273" rel="nofollow" target="_self">Git</a></li><li><a href="#GitLab_286" rel="nofollow" target="_self">GitLab</a></li><li><a href="#GitKraken_290" rel="nofollow" target="_self">GitKraken</a></li><li><a href="#Navicat_294" rel="nofollow" target="_self">Navicat</a></li></ul><li><a href="#_298" rel="nofollow" target="_self">并发编程</a></li><ul><li><a href="#_300" rel="nofollow" target="_self">基础知识</a></li><li><a href="#_311" rel="nofollow" target="_self">并发理论</a></li><li><a href="#_322" rel="nofollow" target="_self">并发关键字</a></li><li><a href="#Lock_332" rel="nofollow" target="_self">Lock体系</a></li><li><a href="#_357" rel="nofollow" target="_self">并发容器</a></li><li><a href="#_371" rel="nofollow" target="_self">线程池</a></li><li><a href="#_382" rel="nofollow" target="_self">原子操作类</a></li><li><a href="#_390" rel="nofollow" target="_self">并发工具</a></li><li><a href="#_399" rel="nofollow" target="_self">并发实践</a></li></ul><li><a href="#_409" rel="nofollow" target="_self">数据结构与算法</a></li><ul><li><a href="#_411" rel="nofollow" target="_self">数据结构</a></li><li><a href="#_438" rel="nofollow" target="_self">算法</a></li><ul><li><a href="#_461" rel="nofollow" target="_self">排序算法</a></li></ul><li><a href="#LeetCode_479" rel="nofollow" target="_self">LeetCode</a></li></ul><li><a href="#_498" rel="nofollow" target="_self">数据库</a></li><ul><li><a href="#Oracle_500" rel="nofollow" target="_self">Oracle</a></li><li><a href="#MySQL_504" rel="nofollow" target="_self">MySQL</a></li><ul><li><a href="#_506" rel="nofollow" target="_self">数据库基础知识</a></li><li><a href="#_508" rel="nofollow" target="_self">数据类型</a></li><li><a href="#_510" rel="nofollow" target="_self">引擎</a></li><li><a href="#_512" rel="nofollow" target="_self">索引</a></li><li><a href="#_514" rel="nofollow" target="_self">三大范式</a></li><li><a href="#SQL_516" rel="nofollow" target="_self">常用SQL语句</a></li><li><a href="#_518" rel="nofollow" target="_self">存储过程与函数</a></li><li><a href="#_520" rel="nofollow" target="_self">视图</a></li><li><a href="#MySQL_522" rel="nofollow" target="_self">MySQL优化</a></li><li><a href="#_524" rel="nofollow" target="_self">事务</a></li><li><a href="#_526" rel="nofollow" target="_self">数据备份与还原</a></li></ul><li><a href="#Redis_530" rel="nofollow" target="_self">Redis</a></li></ul><li><a href="#Java_551" rel="nofollow" target="_self">Java虚拟机</a></li><ul><li><a href="#Java_553" rel="nofollow" target="_self">深入理解Java虚拟机</a></li></ul><li><a href="#_566" rel="nofollow" target="_self">架构设计</a></li><ul><li><a href="#_578" rel="nofollow" target="_self">设计模式</a></li><ul><li><a href="#_599" rel="nofollow" target="_self">创建型模式</a></li><li><a href="#_611" rel="nofollow" target="_self">结构型模式</a></li><li><a href="#_626" rel="nofollow" target="_self">行为型模式</a></li><li><a href="#J2EE_645" rel="nofollow" target="_self">J2EE模式</a></li><li><a href="#_660" rel="nofollow" target="_self">实践应用</a></li></ul></ul><li><a href="#_672" rel="nofollow" target="_self">应用框架</a></li><ul><li><a href="#Spring_745" rel="nofollow" target="_self">Spring</a></li><ul><li><a href="#Spring_756" rel="nofollow" target="_self">《Spring实战》读书笔记</a></li></ul><li><a href="#Spring_MVC_770" rel="nofollow" target="_self">Spring MVC</a></li><li><a href="#MyBatis_774" rel="nofollow" target="_self">MyBatis</a></li><li><a href="#Hibernate_796" rel="nofollow" target="_self">Hibernate</a></li><li><a href="#Shiro_800" rel="nofollow" target="_self">Shiro</a></li><li><a href="#Spring_Security_802" rel="nofollow" target="_self">Spring Security</a></li><li><a href="#Netty_806" rel="nofollow" target="_self">Netty</a></li><li><a href="#_810" rel="nofollow" target="_self">搜索引擎</a></li><ul><li><a href="#LuceneSolr_812" rel="nofollow" target="_self">Lucene/Solr</a></li><li><a href="#Elasticsearch_814" rel="nofollow" target="_self">Elasticsearch</a></li><li><a href="#ELK_816" rel="nofollow" target="_self">ELK</a></li></ul></ul><li><a href="#_826" rel="nofollow" target="_self">中间件</a></li><ul><li><a href="#_828" rel="nofollow" target="_self">消息中间件</a></li><ul><li><a href="#RabbitMQ_830" rel="nofollow" target="_self">RabbitMQ</a></li><li><a href="#RocketMQ_832" rel="nofollow" target="_self">RocketMQ</a></li><li><a href="#ActiveMQ_834" rel="nofollow" target="_self">ActiveMQ</a></li><li><a href="#Kafka_836" rel="nofollow" target="_self">Kafka</a></li></ul><li><a href="#_842" rel="nofollow" target="_self">远程过程调用中间件</a></li><ul><li><a href="#Dubbo_844" rel="nofollow" target="_self">Dubbo</a></li></ul><li><a href="#_850" rel="nofollow" target="_self">数据访问中间件</a></li><li><a href="#Web_858" rel="nofollow" target="_self">Web应用服务器</a></li><ul><li><a href="#Tomcat_860" rel="nofollow" target="_self">Tomcat</a></li><li><a href="#Nginx_876" rel="nofollow" target="_self">Nginx</a></li></ul><li><a href="#_880" rel="nofollow" target="_self">缓存</a></li><li><a href="#_892" rel="nofollow" target="_self">其他</a></li><ul><li><a href="#Zookeeper_894" rel="nofollow" target="_self">Zookeeper</a></li></ul></ul><li><a href="#_900" rel="nofollow" target="_self">微服务与分布式</a></li><ul><li><a href="#Spring_Boot_902" rel="nofollow" target="_self">Spring Boot</a></li><li><a href="#Spring_Cloud_911" rel="nofollow" target="_self">Spring Cloud</a></li><li><a href="#_938" rel="nofollow" target="_self">服务注册发现</a></li><li><a href="#_940" rel="nofollow" target="_self">服务配置</a></li><li><a href="#_942" rel="nofollow" target="_self">负载均衡</a></li><li><a href="#_944" rel="nofollow" target="_self">服务调用</a></li><li><a href="#_946" rel="nofollow" target="_self">服务限流</a></li><li><a href="#_948" rel="nofollow" target="_self">熔断降级</a></li><li><a href="#_950" rel="nofollow" target="_self">网关路由</a></li><li><a href="#_952" rel="nofollow" target="_self">服务权限</a></li><li><a href="#_954" rel="nofollow" target="_self">链路追踪</a></li><li><a href="#_956" rel="nofollow" target="_self">分布式事务</a></li><li><a href="#_958" rel="nofollow" target="_self">分布式缓存</a></li><li><a href="#_960" rel="nofollow" target="_self">分布式会话</a></li><li><a href="#_962" rel="nofollow" target="_self">日志收集</a></li><li><a href="#_964" rel="nofollow" target="_self">服务监控</a></li><li><a href="#_966" rel="nofollow" target="_self">消息驱动</a></li><li><a href="#_968" rel="nofollow" target="_self">数据处理流</a></li><li><a href="#_970" rel="nofollow" target="_self">自动化测试与部署</a></li><li><a href="#_972" rel="nofollow" target="_self">第三方支持</a></li><li><a href="#Zookeeper_974" rel="nofollow" target="_self">分布式协调服务Zookeeper</a></li></ul><li><a href="#_978" rel="nofollow" target="_self">程序员的一些思考</a></li><li><a href="#_987" rel="nofollow" target="_self">项目管理</a></li><ul><li><a href="#_989" rel="nofollow" target="_self">需求调研</a></li><li><a href="#_991" rel="nofollow" target="_self">项目管理</a></li><li><a href="#_993" rel="nofollow" target="_self">代码管理</a></li><li><a href="#_995" rel="nofollow" target="_self">文档管理</a></li><li><a href="#_997" rel="nofollow" target="_self">测试</a></li></ul><li><a href="#_1003" rel="nofollow" target="_self">运维</a></li><li><a href="#_1027" rel="nofollow" target="_self">操作系统</a></li><li><a href="#_1043" rel="nofollow" target="_self">推荐书籍</a></li><li><a href="#_1049" rel="nofollow" target="_self">云计算</a></li><li><a href="#_1055" rel="nofollow" target="_self">搜索引擎</a></li><li><a href="#_1061" rel="nofollow" target="_self">权限管理</a></li><li><a href="#_1067" rel="nofollow" target="_self">区块链</a></li></ul></ul></div><p></p>
<h2><a name="t1"></a><a name="t1"></a><a id="Java_10"></a>Java面试总结</h2>
<p>Java面试总结汇总，整理了包括Java基础知识，集合容器，并发编程，JVM，常用开源框架Spring，MyBatis，数据库，中间件等，包含了作为一个Java工程师在面试中需要用到或者可能用到的绝大部分知识。欢迎大家阅读，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽。文章持续更新中…</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java基础知识面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390612</a></td>
</tr>
<tr>
<td>2</td>
<td>Java集合容器面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588551" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588551</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390689" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390689</a></td>
</tr>
<tr>
<td>4</td>
<td>并发编程面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104863992" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104863992</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390752" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390752</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397516" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397516</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring MVC面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397427" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397427</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Boot面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397299" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397299</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397367" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397367</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/101292950" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/101292950</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/103522351" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/103522351</a></td>
</tr>
<tr>
<td>12</td>
<td>MySQL数据库面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104778621" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104778621</a></td>
</tr>
<tr>
<td>13</td>
<td>消息中间件MQ与RabbitMQ面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588612</a></td>
</tr>
<tr>
<td>14</td>
<td>Dubbo面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390006" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390006</a></td>
</tr>
<tr>
<td>15</td>
<td>Linux面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588679" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588679</a></td>
</tr>
<tr>
<td>16</td>
<td>Tomcat面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397665" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397665</a></td>
</tr>
<tr>
<td>17</td>
<td>ZooKeeper面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397719" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397719</a></td>
</tr>
<tr>
<td>18</td>
<td>Netty面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104391081" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104391081</a></td>
</tr>
</tbody>
</table></div><h2><a name="t2"></a><a name="t2"></a><a id="_37"></a>基础知识</h2>
<h3><a name="t3"></a><a name="t3"></a><a id="Java_39"></a>Java概述</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353575">https://blog.csdn.net/ThinkWon/article/details/94353575</a></td>
</tr>
<tr>
<td>2</td>
<td>Java发展历程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353653">https://blog.csdn.net/ThinkWon/article/details/94353653</a></td>
</tr>
<tr>
<td>3</td>
<td>Java语言特点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354013">https://blog.csdn.net/ThinkWon/article/details/94354013</a></td>
</tr>
<tr>
<td>4</td>
<td>JDK安装与环境变量配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353907">https://blog.csdn.net/ThinkWon/article/details/94353907</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM、JRE和JDK的关系</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101369973">https://blog.csdn.net/ThinkWon/article/details/101369973</a></td>
</tr>
</tbody>
</table></div><h3><a name="t4"></a><a name="t4"></a><a id="_51"></a>基础语法</h3>
<p>大部分已完成</p>
<p>待整理：</p>
<p>Java开发必会的反编译知识（附支持对Lambda进行反编译的工具）</p>
<p>一文读懂什么是Java中的自动拆装箱</p>
<p>Java的枚举类型用法介绍</p>
<p>类、枚举、接口、数组、可变参数</p>
<p>泛型、序列化</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java标识符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101637454">https://blog.csdn.net/ThinkWon/article/details/101637454</a></td>
</tr>
<tr>
<td>2</td>
<td>Java关键字(Java 8版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101642385">https://blog.csdn.net/ThinkWon/article/details/101642385</a></td>
</tr>
<tr>
<td>3</td>
<td>Java注释</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643185">https://blog.csdn.net/ThinkWon/article/details/101643185</a></td>
</tr>
<tr>
<td>4</td>
<td>Java访问修饰符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643412">https://blog.csdn.net/ThinkWon/article/details/101643412</a></td>
</tr>
<tr>
<td>5</td>
<td>Java分隔符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643617">https://blog.csdn.net/ThinkWon/article/details/101643617</a></td>
</tr>
<tr>
<td>6</td>
<td>Java转义字符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643769">https://blog.csdn.net/ThinkWon/article/details/101643769</a></td>
</tr>
<tr>
<td>7</td>
<td>Java进制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643936">https://blog.csdn.net/ThinkWon/article/details/101643936</a></td>
</tr>
<tr>
<td>8</td>
<td>Java流程控制语句</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645978">https://blog.csdn.net/ThinkWon/article/details/101645978</a></td>
</tr>
<tr>
<td>9</td>
<td>Java流程控制语句-顺序结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101644820">https://blog.csdn.net/ThinkWon/article/details/101644820</a></td>
</tr>
<tr>
<td>10</td>
<td>Java流程控制语句-分支结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645224">https://blog.csdn.net/ThinkWon/article/details/101645224</a></td>
</tr>
<tr>
<td>11</td>
<td>Java流程控制语句-循环结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645757">https://blog.csdn.net/ThinkWon/article/details/101645757</a></td>
</tr>
<tr>
<td>12</td>
<td>Java表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101648114">https://blog.csdn.net/ThinkWon/article/details/101648114</a></td>
</tr>
<tr>
<td>13</td>
<td>Java运算符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649002">https://blog.csdn.net/ThinkWon/article/details/101649002</a></td>
</tr>
<tr>
<td>14</td>
<td>Java变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649292">https://blog.csdn.net/ThinkWon/article/details/101649292</a></td>
</tr>
<tr>
<td>15</td>
<td>Java常量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649446">https://blog.csdn.net/ThinkWon/article/details/101649446</a></td>
</tr>
<tr>
<td>16</td>
<td>Java数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649568">https://blog.csdn.net/ThinkWon/article/details/101649568</a></td>
</tr>
<tr>
<td>17</td>
<td>Java反射</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100128361">https://blog.csdn.net/ThinkWon/article/details/100128361</a></td>
</tr>
<tr>
<td>18</td>
<td>Java语法糖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100103689">https://blog.csdn.net/ThinkWon/article/details/100103689</a></td>
</tr>
<tr>
<td>19</td>
<td>Java注解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100178709">https://blog.csdn.net/ThinkWon/article/details/100178709</a></td>
</tr>
<tr>
<td>20</td>
<td>JSON简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642585">https://blog.csdn.net/ThinkWon/article/details/100642585</a></td>
</tr>
<tr>
<td>21</td>
<td>Properties类简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667783">https://blog.csdn.net/ThinkWon/article/details/100667783</a></td>
</tr>
<tr>
<td>22</td>
<td>XML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642425">https://blog.csdn.net/ThinkWon/article/details/100642425</a></td>
</tr>
<tr>
<td>23</td>
<td>YML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642870">https://blog.csdn.net/ThinkWon/article/details/100642870</a></td>
</tr>
<tr>
<td>24</td>
<td>Java8新特性-Lambda表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642932">https://blog.csdn.net/ThinkWon/article/details/100642932</a></td>
</tr>
<tr>
<td>25</td>
<td>Java基础语法</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354151">https://blog.csdn.net/ThinkWon/article/details/94354151</a></td>
</tr>
</tbody>
</table></div><h3><a name="t5"></a><a name="t5"></a><a id="_98"></a>面向对象</h3>
<p>待整理：</p>
<p>抽象</p>
<p>继承、封装、多态</p>
<p>接口、抽象类、内部类</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>什么是面向对象</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667386">https://blog.csdn.net/ThinkWon/article/details/100667386</a></td>
</tr>
</tbody>
</table></div><h3><a name="t6"></a><a name="t6"></a><a id="_114"></a>集合框架</h3>
<p>迭代器、增强for、泛型</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java集合框架总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98844796">https://blog.csdn.net/ThinkWon/article/details/98844796</a></td>
</tr>
<tr>
<td>2</td>
<td>ArrayList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845119">https://blog.csdn.net/ThinkWon/article/details/98845119</a></td>
</tr>
<tr>
<td>3</td>
<td>HashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845487">https://blog.csdn.net/ThinkWon/article/details/98845487</a></td>
</tr>
<tr>
<td>4</td>
<td>LinkedHashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102574293">https://blog.csdn.net/ThinkWon/article/details/102574293</a></td>
</tr>
<tr>
<td>5</td>
<td>LinkedList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102573923">https://blog.csdn.net/ThinkWon/article/details/102573923</a></td>
</tr>
<tr>
<td>6</td>
<td>TreeMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571883">https://blog.csdn.net/ThinkWon/article/details/102571883</a></td>
</tr>
</tbody>
</table></div><h3><a name="t7"></a><a name="t7"></a><a id="IO_129"></a>IO流</h3>
<p>待整理：</p>
<p>File、递归</p>
<p>字节流、字节缓冲流</p>
<p>编码表、编码方式、转换流、序列化、序列化流、打印流、commons-io</p>
<h3><a name="t8"></a><a name="t8"></a><a id="_143"></a>网络编程</h3>
<p>网络概述、网络模型</p>
<p>Socket原理机制</p>
<p>UDP</p>
<p>TCP/IP</p>
<p>协议、OSI 七层协议、HTTP、HTTP2.0、HTTPS</p>
<p>网络安全</p>
<p>	XSS、CSRF、SQL注入、Hash Dos、脚本注入、漏洞扫描工具、验证码</p>
<p>	DDoS防范、用户隐私信息保护、序列化漏洞</p>
<p>	加密解密、对称加密、哈希算法、非对称加密</p>
<p>	服务安全、数据安全、数据备份</p>
<p>	网络隔离、登录跳板机、非外网分离</p>
<p>	认证、授权</p>
<h3><a name="t9"></a><a name="t9"></a><a id="API_173"></a>常用API</h3>
<p>Date、DateFormat、Calendar</p>
<p>String、StringBuffer、StringBuilder、正则表达式</p>
<p>Number、Radom、Math、System、包装类</p>
<p>Arrays、Collections</p>
<h3><a name="t10"></a><a name="t10"></a><a id="_185"></a>常用工具类库</h3>
<p>待整理：OkHttp、commons-lang3</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>HttpClient工具类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101391489">https://blog.csdn.net/ThinkWon/article/details/101391489</a></td>
</tr>
<tr>
<td>2</td>
<td>WGS84地球坐标系，GCJ02火星坐标系，BD09百度坐标系简介与转换</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392187">https://blog.csdn.net/ThinkWon/article/details/101392187</a></td>
</tr>
<tr>
<td>3</td>
<td>Lombok简介、使用、工作原理、优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392808">https://blog.csdn.net/ThinkWon/article/details/101392808</a></td>
</tr>
<tr>
<td>4</td>
<td>Java几种常用JSON库性能比较</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354358">https://blog.csdn.net/ThinkWon/article/details/94354358</a></td>
</tr>
</tbody>
</table></div><h3><a name="t11"></a><a name="t11"></a><a id="_198"></a>单元测试</h3>
<p>JUnit</p>
<h3><a name="t12"></a><a name="t12"></a><a id="_204"></a>异常</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java异常总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>2</td>
<td>Java异常架构与异常关键字</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101676779">https://blog.csdn.net/ThinkWon/article/details/101676779</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101677638">https://blog.csdn.net/ThinkWon/article/details/101677638</a></td>
</tr>
<tr>
<td>4</td>
<td>如何选择异常类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>5</td>
<td>Java异常常见面试题</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101681073">https://blog.csdn.net/ThinkWon/article/details/101681073</a></td>
</tr>
<tr>
<td>6</td>
<td>Java异常处理最佳实践</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94347002">https://blog.csdn.net/ThinkWon/article/details/94347002</a></td>
</tr>
</tbody>
</table></div><h3><a name="t13"></a><a name="t13"></a><a id="_217"></a>日志</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>常用日志框架Log4j，Logback，Log4j2性能比较与日志门面SLF4J简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101621135">https://blog.csdn.net/ThinkWon/article/details/101621135</a></td>
</tr>
<tr>
<td>2</td>
<td>日志作用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101619725">https://blog.csdn.net/ThinkWon/article/details/101619725</a></td>
</tr>
<tr>
<td>3</td>
<td>Apache Log4j2详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95043111">https://blog.csdn.net/ThinkWon/article/details/95043111</a></td>
</tr>
<tr>
<td>4</td>
<td>Log4j2同步日志，混合日志和异步日志配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625124">https://blog.csdn.net/ThinkWon/article/details/101625124</a></td>
</tr>
<tr>
<td>5</td>
<td>Log4j2配置文件详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101629302">https://blog.csdn.net/ThinkWon/article/details/101629302</a></td>
</tr>
<tr>
<td>6</td>
<td>Log4j2的Appenders配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625820">https://blog.csdn.net/ThinkWon/article/details/101625820</a></td>
</tr>
<tr>
<td>7</td>
<td>Log4j2的Filters配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101627162">https://blog.csdn.net/ThinkWon/article/details/101627162</a></td>
</tr>
<tr>
<td>8</td>
<td>Log4j2的Policy触发策略与Strategy滚动策略配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628222">https://blog.csdn.net/ThinkWon/article/details/101628222</a></td>
</tr>
<tr>
<td>9</td>
<td>Log4j2的Loggers配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628736">https://blog.csdn.net/ThinkWon/article/details/101628736</a></td>
</tr>
</tbody>
</table></div><h2><a name="t14"></a><a name="t14"></a><a id="_233"></a>工具</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="IDEA_235"></a>IDEA</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>IDEA常用配置和常用插件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101020481">https://blog.csdn.net/ThinkWon/article/details/101020481</a></td>
</tr>
<tr>
<td>2</td>
<td>IDEA中Maven依赖下载失败解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101312918">https://blog.csdn.net/ThinkWon/article/details/101312918</a></td>
</tr>
</tbody>
</table></div><h3><a name="t16"></a><a name="t16"></a><a id="Eclipse__STS_244"></a>Eclipse &amp; STS</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Eclipse &amp; Spring Tool Suite常用配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101025543">https://blog.csdn.net/ThinkWon/article/details/101025543</a></td>
</tr>
</tbody>
</table></div><h3><a name="t17"></a><a name="t17"></a><a id="Maven_252"></a>Maven</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Maven简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346090">https://blog.csdn.net/ThinkWon/article/details/94346090</a></td>
</tr>
<tr>
<td>2</td>
<td>Maven安装与配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346569">https://blog.csdn.net/ThinkWon/article/details/94346569</a></td>
</tr>
<tr>
<td>3</td>
<td>Maven依赖冲突</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483020">https://blog.csdn.net/ThinkWon/article/details/101483020</a></td>
</tr>
<tr>
<td>4</td>
<td>手动安装Maven依赖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483478">https://blog.csdn.net/ThinkWon/article/details/101483478</a></td>
</tr>
<tr>
<td>5</td>
<td>Maven部署jar包到远程仓库</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483769">https://blog.csdn.net/ThinkWon/article/details/101483769</a></td>
</tr>
<tr>
<td>6</td>
<td>Maven私服Nexus安装与使用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346681">https://blog.csdn.net/ThinkWon/article/details/94346681</a></td>
</tr>
</tbody>
</table></div><h3><a name="t18"></a><a name="t18"></a><a id="Docker_265"></a>Docker</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>使用Docker安装GitLab</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95042797">https://blog.csdn.net/ThinkWon/article/details/95042797</a></td>
</tr>
</tbody>
</table></div><h3><a name="t19"></a><a name="t19"></a><a id="Git_273"></a>Git</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Git简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346816">https://blog.csdn.net/ThinkWon/article/details/94346816</a></td>
</tr>
<tr>
<td>2</td>
<td>版本控制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449228">https://blog.csdn.net/ThinkWon/article/details/101449228</a></td>
</tr>
<tr>
<td>3</td>
<td>Git忽略文件.gitignore详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101447866">https://blog.csdn.net/ThinkWon/article/details/101447866</a></td>
</tr>
<tr>
<td>4</td>
<td>Git与SVN的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449611">https://blog.csdn.net/ThinkWon/article/details/101449611</a></td>
</tr>
<tr>
<td>5</td>
<td>常用Git命令</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101450420">https://blog.csdn.net/ThinkWon/article/details/101450420</a></td>
</tr>
<tr>
<td>6</td>
<td>Git，GitHub与GitLab的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101470086">https://blog.csdn.net/ThinkWon/article/details/101470086</a></td>
</tr>
</tbody>
</table></div><h3><a name="t20"></a><a name="t20"></a><a id="GitLab_286"></a>GitLab</h3>
<h3><a name="t21"></a><a name="t21"></a><a id="GitKraken_290"></a>GitKraken</h3>
<h3><a name="t22"></a><a name="t22"></a><a id="Navicat_294"></a>Navicat</h3>
<h2><a name="t23"></a><a name="t23"></a><a id="_298"></a>并发编程</h2>
<h3><a name="t24"></a><a name="t24"></a><a id="_300"></a>基础知识</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发编程的优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102020811">https://blog.csdn.net/ThinkWon/article/details/102020811</a></td>
</tr>
<tr>
<td>2</td>
<td>线程的状态和基本操作</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102027115">https://blog.csdn.net/ThinkWon/article/details/102027115</a></td>
</tr>
<tr>
<td>3</td>
<td>进程和线程的区别(超详细)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">https://blog.csdn.net/ThinkWon/article/details/102021274</a></td>
</tr>
<tr>
<td>4</td>
<td>创建线程的四种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021143">https://blog.csdn.net/ThinkWon/article/details/102021143</a></td>
</tr>
</tbody>
</table></div><h3><a name="t25"></a><a name="t25"></a><a id="_311"></a>并发理论</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java内存模型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073578">https://blog.csdn.net/ThinkWon/article/details/102073578</a></td>
</tr>
<tr>
<td>2</td>
<td>重排序与数据依赖性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073858">https://blog.csdn.net/ThinkWon/article/details/102073858</a></td>
</tr>
<tr>
<td>3</td>
<td>as-if-serial规则和happens-before规则的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074107">https://blog.csdn.net/ThinkWon/article/details/102074107</a></td>
</tr>
<tr>
<td>4</td>
<td>Java并发理论总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074440">https://blog.csdn.net/ThinkWon/article/details/102074440</a></td>
</tr>
</tbody>
</table></div><h3><a name="t26"></a><a name="t26"></a><a id="_322"></a>并发关键字</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java并发关键字-synchronized</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243189">https://blog.csdn.net/ThinkWon/article/details/102243189</a></td>
</tr>
<tr>
<td>2</td>
<td>Java并发关键字-volatile</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243670">https://blog.csdn.net/ThinkWon/article/details/102243670</a></td>
</tr>
<tr>
<td>3</td>
<td>Java并发关键字-final</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102244477">https://blog.csdn.net/ThinkWon/article/details/102244477</a></td>
</tr>
</tbody>
</table></div><h3><a name="t27"></a><a name="t27"></a><a id="Lock_332"></a>Lock体系</h3>
<p>待整理：</p>
<p>公平锁 &amp; 非公平锁</p>
<p>乐观锁 &amp; 悲观锁</p>
<p>可重入锁 &amp; 不可重入锁</p>
<p>互斥锁 &amp; 共享锁</p>
<p>死锁</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Lock简介与初识AQS</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102468837">https://blog.csdn.net/ThinkWon/article/details/102468837</a></td>
</tr>
<tr>
<td>2</td>
<td>AQS(AbstractQueuedSynchronizer)详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469112">https://blog.csdn.net/ThinkWon/article/details/102469112</a></td>
</tr>
<tr>
<td>3</td>
<td>ReentrantLock(重入锁)实现原理与公平锁非公平锁区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469388">https://blog.csdn.net/ThinkWon/article/details/102469388</a></td>
</tr>
<tr>
<td>4</td>
<td>读写锁ReentrantReadWriteLock源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469598">https://blog.csdn.net/ThinkWon/article/details/102469598</a></td>
</tr>
<tr>
<td>5</td>
<td>Condition源码分析与等待通知机制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469889">https://blog.csdn.net/ThinkWon/article/details/102469889</a></td>
</tr>
<tr>
<td>6</td>
<td>LockSupport详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469993">https://blog.csdn.net/ThinkWon/article/details/102469993</a></td>
</tr>
</tbody>
</table></div><h3><a name="t28"></a><a name="t28"></a><a id="_357"></a>并发容器</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102506447">https://blog.csdn.net/ThinkWon/article/details/102506447</a></td>
</tr>
<tr>
<td>2</td>
<td>并发容器之ConcurrentLinkedQueue详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508089">https://blog.csdn.net/ThinkWon/article/details/102508089</a></td>
</tr>
<tr>
<td>3</td>
<td>并发容器之CopyOnWriteArrayList详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508258">https://blog.csdn.net/ThinkWon/article/details/102508258</a></td>
</tr>
<tr>
<td>4</td>
<td>并发容器之ThreadLocal详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508381">https://blog.csdn.net/ThinkWon/article/details/102508381</a></td>
</tr>
<tr>
<td>5</td>
<td>ThreadLocal内存泄漏分析与解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508721">https://blog.csdn.net/ThinkWon/article/details/102508721</a></td>
</tr>
<tr>
<td>6</td>
<td>并发容器之BlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508901">https://blog.csdn.net/ThinkWon/article/details/102508901</a></td>
</tr>
<tr>
<td>7</td>
<td>并发容器之ArrayBlockingQueue与LinkedBlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508971">https://blog.csdn.net/ThinkWon/article/details/102508971</a></td>
</tr>
</tbody>
</table></div><h3><a name="t29"></a><a name="t29"></a><a id="_371"></a>线程池</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>线程池ThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541900">https://blog.csdn.net/ThinkWon/article/details/102541900</a></td>
</tr>
<tr>
<td>2</td>
<td>Executors类创建四种常见线程池</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541990">https://blog.csdn.net/ThinkWon/article/details/102541990</a></td>
</tr>
<tr>
<td>3</td>
<td>线程池之ScheduledThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542299">https://blog.csdn.net/ThinkWon/article/details/102542299</a></td>
</tr>
<tr>
<td>4</td>
<td>FutureTask详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542404">https://blog.csdn.net/ThinkWon/article/details/102542404</a></td>
</tr>
</tbody>
</table></div><h3><a name="t30"></a><a name="t30"></a><a id="_382"></a>原子操作类</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>原子操作类总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556910">https://blog.csdn.net/ThinkWon/article/details/102556910</a></td>
</tr>
</tbody>
</table></div><h3><a name="t31"></a><a name="t31"></a><a id="_390"></a>并发工具</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发工具之CountDownLatch与CyclicBarrier</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556958">https://blog.csdn.net/ThinkWon/article/details/102556958</a></td>
</tr>
<tr>
<td>2</td>
<td>并发工具之Semaphore与Exchanger</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557034">https://blog.csdn.net/ThinkWon/article/details/102557034</a></td>
</tr>
</tbody>
</table></div><h3><a name="t32"></a><a name="t32"></a><a id="_399"></a>并发实践</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>实现生产者消费者的三种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557126">https://blog.csdn.net/ThinkWon/article/details/102557126</a></td>
</tr>
</tbody>
</table></div><h2><a name="t33"></a><a name="t33"></a><a id="_409"></a>数据结构与算法</h2>
<h3><a name="t34"></a><a name="t34"></a><a id="_411"></a>数据结构</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>红黑树详细分析(图文详解)，看了都说好</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571535">https://blog.csdn.net/ThinkWon/article/details/102571535</a></td>
</tr>
</tbody>
</table>
</div>
    1、数组
    2、栈
    3、队列
    4、链表
    5、树
        二叉树
        完全二叉树
        平衡二叉树
        二叉查找树（BST）
        红黑树
        B，B+，B*树
        LSM 树
    
    字段是不是数据结构

<h3><a name="t35"></a><a name="t35"></a><a id="_438"></a>算法</h3>
<p>语言只是编程工具，算法才是编程之魂！</p>

    1、排序算法：快速排序、归并排序、计数排序
    2、搜索算法：回溯、递归、剪枝
    3、图论：最短路径、最小生成树、网络流建模
    4、动态规划：背包问题、最长子序列、计数问题
    5、基础技巧：分治、倍增、二分法、贪心算法
    
    宽度优先搜索
    深度优先搜索
    广度优先
    双指针
    扫描线
    
    朴素贝叶斯
    推荐算法
    

<h4><a id="_461"></a>排序算法</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>史上最全经典排序算法总结(Java实现)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95616819">https://blog.csdn.net/ThinkWon/article/details/95616819</a></td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序（Bubble Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534473">https://blog.csdn.net/ThinkWon/article/details/101534473</a></td>
</tr>
<tr>
<td>3</td>
<td>选择排序（Selection Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534721">https://blog.csdn.net/ThinkWon/article/details/101534721</a></td>
</tr>
<tr>
<td>4</td>
<td>插入排序（Insertion Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101537804">https://blog.csdn.net/ThinkWon/article/details/101537804</a></td>
</tr>
<tr>
<td>5</td>
<td>希尔排序（Shell Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538166">https://blog.csdn.net/ThinkWon/article/details/101538166</a></td>
</tr>
<tr>
<td>6</td>
<td>归并排序（Merge Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538756">https://blog.csdn.net/ThinkWon/article/details/101538756</a></td>
</tr>
<tr>
<td>7</td>
<td>快速排序（Quick Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543580">https://blog.csdn.net/ThinkWon/article/details/101543580</a></td>
</tr>
<tr>
<td>8</td>
<td>堆排序（Heap Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543941">https://blog.csdn.net/ThinkWon/article/details/101543941</a></td>
</tr>
<tr>
<td>9</td>
<td>计数排序（Counting Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544159">https://blog.csdn.net/ThinkWon/article/details/101544159</a></td>
</tr>
<tr>
<td>10</td>
<td>桶排序（Bucket Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544356">https://blog.csdn.net/ThinkWon/article/details/101544356</a></td>
</tr>
<tr>
<td>11</td>
<td>基数排序（Radix Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101545529">https://blog.csdn.net/ThinkWon/article/details/101545529</a></td>
</tr>
</tbody>
</table></div><h3><a name="t36"></a><a name="t36"></a><a id="LeetCode_479"></a>LeetCode</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>LeetCode第1题 两数之和(Two Sum)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113049">https://blog.csdn.net/ThinkWon/article/details/103113049</a></td>
</tr>
<tr>
<td>2</td>
<td>LeetCode第3题 无重复字符的最长子串(Longest Substring Without Repeating Characters)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113969">https://blog.csdn.net/ThinkWon/article/details/103113969</a></td>
</tr>
<tr>
<td>3</td>
<td>LeetCode第7题 整数反转(Reverse Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113167">https://blog.csdn.net/ThinkWon/article/details/103113167</a></td>
</tr>
<tr>
<td>4</td>
<td>LeetCode第9题 回文数(Palindrome Number)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113151">https://blog.csdn.net/ThinkWon/article/details/103113151</a></td>
</tr>
<tr>
<td>5</td>
<td>LeetCode第13题 罗马数字转整数(Roman to Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113519">https://blog.csdn.net/ThinkWon/article/details/103113519</a></td>
</tr>
<tr>
<td>6</td>
<td>LeetCode第14题 最长公共前缀(Longest Common Prefix)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113700">https://blog.csdn.net/ThinkWon/article/details/103113700</a></td>
</tr>
<tr>
<td>7</td>
<td>LeetCode第20题 有效的括号(Valid Parentheses)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113848">https://blog.csdn.net/ThinkWon/article/details/103113848</a></td>
</tr>
<tr>
<td>8</td>
<td>LeetCode第26题 删除排序数组中的重复项(Remove Duplicates from Sorted Array)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113097">https://blog.csdn.net/ThinkWon/article/details/103113097</a></td>
</tr>
</tbody>
</table></div><h2><a name="t37"></a><a name="t37"></a><a id="_498"></a>数据库</h2>
<h3><a name="t38"></a><a name="t38"></a><a id="Oracle_500"></a>Oracle</h3>
<h3><a name="t39"></a><a name="t39"></a><a id="MySQL_504"></a>MySQL</h3>
<h4><a id="_506"></a>数据库基础知识</h4>
<h4><a id="_508"></a>数据类型</h4>
<h4><a id="_510"></a>引擎</h4>
<h4><a id="_512"></a>索引</h4>
<h4><a id="_514"></a>三大范式</h4>
<h4><a id="SQL_516"></a>常用SQL语句</h4>
<h4><a id="_518"></a>存储过程与函数</h4>
<h4><a id="_520"></a>视图</h4>
<h4><a id="MySQL_522"></a>MySQL优化</h4>
<h4><a id="_524"></a>事务</h4>
<h4><a id="_526"></a>数据备份与还原</h4>
<h3><a name="t40"></a><a name="t40"></a><a id="Redis_530"></a>Redis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Redis总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/99999584">https://blog.csdn.net/ThinkWon/article/details/99999584</a></td>
</tr>
<tr>
<td>2</td>
<td>Redis使用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521497">https://blog.csdn.net/ThinkWon/article/details/101521497</a></td>
</tr>
<tr>
<td>3</td>
<td>Redis数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521724">https://blog.csdn.net/ThinkWon/article/details/101521724</a></td>
</tr>
<tr>
<td>4</td>
<td>Redis持久化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522209">https://blog.csdn.net/ThinkWon/article/details/101522209</a></td>
</tr>
<tr>
<td>5</td>
<td>Redis过期键的删除策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522970">https://blog.csdn.net/ThinkWon/article/details/101522970</a></td>
</tr>
<tr>
<td>6</td>
<td>Redis数据淘汰策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530624">https://blog.csdn.net/ThinkWon/article/details/101530624</a></td>
</tr>
<tr>
<td>7</td>
<td>Redis与Memcached的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530406">https://blog.csdn.net/ThinkWon/article/details/101530406</a></td>
</tr>
<tr>
<td>8</td>
<td>Redis常见面试题(精简版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></td>
</tr>
<tr>
<td>9</td>
<td>Redis中缓存雪崩、缓存穿透等问题的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103402008">https://blog.csdn.net/ThinkWon/article/details/103402008</a></td>
</tr>
<tr>
<td>10</td>
<td>阿里云Redis开发规范学习总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103400250">https://blog.csdn.net/ThinkWon/article/details/103400250</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis开发常用规范</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401781">https://blog.csdn.net/ThinkWon/article/details/103401781</a></td>
</tr>
<tr>
<td>12</td>
<td>这可能是最中肯的Redis规范了</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401978">https://blog.csdn.net/ThinkWon/article/details/103401978</a></td>
</tr>
</tbody>
</table></div><h2><a name="t41"></a><a name="t41"></a><a id="Java_551"></a>Java虚拟机</h2>
<h3><a name="t42"></a><a name="t42"></a><a id="Java_553"></a>深入理解Java虚拟机</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>深入理解Java虚拟机-走近Java</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103804387">https://blog.csdn.net/ThinkWon/article/details/103804387</a></td>
</tr>
<tr>
<td>2</td>
<td>深入理解Java虚拟机-Java内存区域与内存溢出异常</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103827387">https://blog.csdn.net/ThinkWon/article/details/103827387</a></td>
</tr>
<tr>
<td>3</td>
<td>深入理解Java虚拟机-垃圾回收器与内存分配策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103831676">https://blog.csdn.net/ThinkWon/article/details/103831676</a></td>
</tr>
<tr>
<td>4</td>
<td>深入理解Java虚拟机-虚拟机执行子系统</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835168">https://blog.csdn.net/ThinkWon/article/details/103835168</a></td>
</tr>
<tr>
<td>5</td>
<td>深入理解Java虚拟机-程序编译与代码优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835883">https://blog.csdn.net/ThinkWon/article/details/103835883</a></td>
</tr>
<tr>
<td>6</td>
<td>深入理解Java虚拟机-高效并发</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103836167">https://blog.csdn.net/ThinkWon/article/details/103836167</a></td>
</tr>
</tbody>
</table></div><h2><a name="t43"></a><a name="t43"></a><a id="_566"></a>架构设计</h2>
<p>高可用架构</p>
<p>高并发架构</p>
<p>可伸缩架构</p>
<p>集群</p>
<h3><a name="t44"></a><a name="t44"></a><a id="_578"></a>设计模式</h3>
<p>常用设计模式</p>
<p>创建型：<br>
单例模式、工厂模式、抽象工厂模式</p>
<p>结构型：<br>
适配器模式、外观模式、代理模式、装饰器模式</p>
<p>行为型：<br>
观察者模式、策略模式、模板模式</p>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>设计模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/96829572">https://blog.csdn.net/ThinkWon/article/details/96829572</a></td>
</tr>
</tbody>
</table></div><h4><a id="_599"></a>创建型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抽象工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382584">https://blog.csdn.net/ThinkWon/article/details/101382584</a></td>
</tr>
<tr>
<td>2</td>
<td>单例模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382855">https://blog.csdn.net/ThinkWon/article/details/101382855</a></td>
</tr>
<tr>
<td>3</td>
<td>工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383285">https://blog.csdn.net/ThinkWon/article/details/101383285</a></td>
</tr>
<tr>
<td>4</td>
<td>建造者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383401">https://blog.csdn.net/ThinkWon/article/details/101383401</a></td>
</tr>
<tr>
<td>5</td>
<td>原型模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383491">https://blog.csdn.net/ThinkWon/article/details/101383491</a></td>
</tr>
</tbody>
</table></div><h4><a id="_611"></a>结构型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>代理模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384436">https://blog.csdn.net/ThinkWon/article/details/101384436</a></td>
</tr>
<tr>
<td>2</td>
<td>过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384514">https://blog.csdn.net/ThinkWon/article/details/101384514</a></td>
</tr>
<tr>
<td>3</td>
<td>桥接模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384584">https://blog.csdn.net/ThinkWon/article/details/101384584</a></td>
</tr>
<tr>
<td>4</td>
<td>适配器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384619">https://blog.csdn.net/ThinkWon/article/details/101384619</a></td>
</tr>
<tr>
<td>5</td>
<td>外观模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384676">https://blog.csdn.net/ThinkWon/article/details/101384676</a></td>
</tr>
<tr>
<td>6</td>
<td>享元模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384716">https://blog.csdn.net/ThinkWon/article/details/101384716</a></td>
</tr>
<tr>
<td>7</td>
<td>装饰器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384753">https://blog.csdn.net/ThinkWon/article/details/101384753</a></td>
</tr>
<tr>
<td>8</td>
<td>组合模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384786">https://blog.csdn.net/ThinkWon/article/details/101384786</a></td>
</tr>
</tbody>
</table></div><h4><a id="_626"></a>行为型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>备忘录模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383582">https://blog.csdn.net/ThinkWon/article/details/101383582</a></td>
</tr>
<tr>
<td>2</td>
<td>策略模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383647">https://blog.csdn.net/ThinkWon/article/details/101383647</a></td>
</tr>
<tr>
<td>3</td>
<td>迭代器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383722">https://blog.csdn.net/ThinkWon/article/details/101383722</a></td>
</tr>
<tr>
<td>4</td>
<td>访问者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383780">https://blog.csdn.net/ThinkWon/article/details/101383780</a></td>
</tr>
<tr>
<td>5</td>
<td>观察者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383872">https://blog.csdn.net/ThinkWon/article/details/101383872</a></td>
</tr>
<tr>
<td>6</td>
<td>解释器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383930">https://blog.csdn.net/ThinkWon/article/details/101383930</a></td>
</tr>
<tr>
<td>7</td>
<td>空对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384001">https://blog.csdn.net/ThinkWon/article/details/101384001</a></td>
</tr>
<tr>
<td>8</td>
<td>命令模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384090">https://blog.csdn.net/ThinkWon/article/details/101384090</a></td>
</tr>
<tr>
<td>9</td>
<td>模板模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384138">https://blog.csdn.net/ThinkWon/article/details/101384138</a></td>
</tr>
<tr>
<td>10</td>
<td>责任链模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384195">https://blog.csdn.net/ThinkWon/article/details/101384195</a></td>
</tr>
<tr>
<td>11</td>
<td>中介者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384251">https://blog.csdn.net/ThinkWon/article/details/101384251</a></td>
</tr>
<tr>
<td>12</td>
<td>状态模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384315">https://blog.csdn.net/ThinkWon/article/details/101384315</a></td>
</tr>
</tbody>
</table></div><h4><a id="J2EE_645"></a>J2EE模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MVC模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101381701">https://blog.csdn.net/ThinkWon/article/details/101381701</a></td>
</tr>
<tr>
<td>2</td>
<td>传输对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382134">https://blog.csdn.net/ThinkWon/article/details/101382134</a></td>
</tr>
<tr>
<td>3</td>
<td>服务定位器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382179">https://blog.csdn.net/ThinkWon/article/details/101382179</a></td>
</tr>
<tr>
<td>4</td>
<td>拦截过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382210">https://blog.csdn.net/ThinkWon/article/details/101382210</a></td>
</tr>
<tr>
<td>5</td>
<td>前端控制器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382247">https://blog.csdn.net/ThinkWon/article/details/101382247</a></td>
</tr>
<tr>
<td>6</td>
<td>数据访问对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382287">https://blog.csdn.net/ThinkWon/article/details/101382287</a></td>
</tr>
<tr>
<td>7</td>
<td>业务代表模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382356">https://blog.csdn.net/ThinkWon/article/details/101382356</a></td>
</tr>
<tr>
<td>8</td>
<td>组合实体模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382390">https://blog.csdn.net/ThinkWon/article/details/101382390</a></td>
</tr>
</tbody>
</table></div><h4><a id="_660"></a>实践应用</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102924813">https://blog.csdn.net/ThinkWon/article/details/102924813</a></td>
</tr>
</tbody>
</table></div><h2><a name="t45"></a><a name="t45"></a><a id="_672"></a>应用框架</h2>
<p>如何学习一个框架或者技术</p>
<ul>
<li>
<p>是什么，简介，概述</p>
</li>
<li>
<p>有什么用，用途，使用场景</p>
</li>
<li>
<p>怎么用，在实际开发中的应用，注意事项</p>
</li>
<li>
<p>优缺点</p>
</li>
<li>
<p>框架原理，工作流程，工作原理</p>
</li>
<li>
<p>常见面试题</p>
</li>
<li>
<p>源码分析，核心类，核心方法，设计模式</p>
</li>
<li>
<p>发布博客，在开发和实践中，博客反馈中持续改进</p>
</li>
<li>
<p>与同事朋友交流，技术论坛，技术分享中持续丰富知识</p>
</li>
</ul>
<p>常用框架</p>
<ul>
<li>
<p>集成开发工具（IDE）：Eclipse、MyEclipse、Spring Tool Suite（STS）、Intellij IDEA、NetBeans、JBuilder、JCreator</p>
</li>
<li>
<p>JAVA服务器：tomcat、jboss、websphere、weblogic、resin、jetty、apusic、apache</p>
</li>
<li>
<p>负载均衡：nginx、lvs</p>
</li>
<li>
<p>web层框架：Spring MVC、Struts2、Struts1、Google Web Toolkit（GWT）、JQWEB</p>
</li>
<li>
<p>服务层框架：Spring、EJB</p>
</li>
<li>
<p>持久层框架：Hibernate、MyBatis、JPA、TopLink</p>
</li>
<li>
<p>数据库：Oracle、MySql、MSSQL、Redis</p>
</li>
<li>
<p>项目构建：maven、ant</p>
</li>
<li>
<p>持续集成：Jenkins</p>
</li>
<li>
<p>版本控制：SVN、CVS、VSS、GIT</p>
</li>
<li>
<p>私服：Nexus</p>
</li>
<li>
<p>消息组件：IBM MQ、RabbitMQ、ActiveMQ、RocketMq</p>
</li>
<li>
<p>日志框架：Commons Logging、log4j 、slf4j、IOC</p>
</li>
<li>
<p>缓存框架：memcache、redis、ehcache、jboss cache</p>
</li>
<li>
<p>RPC框架：Hessian、Dubbo</p>
</li>
<li>
<p>规则引擎：Drools</p>
</li>
<li>
<p>工作流：Activiti</p>
</li>
<li>
<p>批处理：Spring Batch</p>
</li>
<li>
<p>通用查询框架：Query DSL</p>
</li>
<li>
<p>JAVA安全框架：shiro、Spring Security</p>
</li>
<li>
<p>代码静态检查工具：FindBugs、PMD</p>
</li>
<li>
<p>Linux操作系统：CentOS、Ubuntu、SUSE Linux、</p>
</li>
<li>
<p>常用工具：PLSQL Developer（Oracle）、Navicat（MySql）、FileZilla（FTP）、Xshell（SSH）、putty（SSH）、SecureCRT（SSH）、jd-gui（反编译）</p>
</li>
</ul>
<h3><a name="t46"></a><a name="t46"></a><a id="Spring_745"></a>Spring</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring简介、设计理念、优缺点、应用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810748">https://blog.csdn.net/ThinkWon/article/details/102810748</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring模块组成(框架组成、整体架构、体系架构、体系结构)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810819">https://blog.csdn.net/ThinkWon/article/details/102810819</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring容器中bean的生命周期</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102866432">https://blog.csdn.net/ThinkWon/article/details/102866432</a></td>
</tr>
<tr>
<td>4</td>
<td>控制反转(IoC)与依赖注入(DI)详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102912332">https://blog.csdn.net/ThinkWon/article/details/102912332</a></td>
</tr>
</tbody>
</table></div><h4><a id="Spring_756"></a>《Spring实战》读书笔记</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>《Spring实战》读书笔记-第1章 Spring之旅</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103097364">https://blog.csdn.net/ThinkWon/article/details/103097364</a></td>
</tr>
<tr>
<td>2</td>
<td>《Spring实战》读书笔记-第2章 装配Bean</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103527675">https://blog.csdn.net/ThinkWon/article/details/103527675</a></td>
</tr>
<tr>
<td>3</td>
<td>《Spring实战》读书笔记-第3章 高级装配</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103536621">https://blog.csdn.net/ThinkWon/article/details/103536621</a></td>
</tr>
<tr>
<td>4</td>
<td>《Spring实战》读书笔记-第4章 面向切面的Spring</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103541166">https://blog.csdn.net/ThinkWon/article/details/103541166</a></td>
</tr>
<tr>
<td>5</td>
<td>《Spring实战》读书笔记-第5章 构建Spring Web应用程序</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103550083">https://blog.csdn.net/ThinkWon/article/details/103550083</a></td>
</tr>
<tr>
<td>6</td>
<td>《Spring实战》读书笔记-第6章 渲染Web视图</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103559672">https://blog.csdn.net/ThinkWon/article/details/103559672</a></td>
</tr>
<tr>
<td>7</td>
<td>《Spring实战》读书笔记-第7章 Spring MVC的高级技术</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103562467">https://blog.csdn.net/ThinkWon/article/details/103562467</a></td>
</tr>
</tbody>
</table></div><h3><a name="t47"></a><a name="t47"></a><a id="Spring_MVC_770"></a>Spring MVC</h3>
<h3><a name="t48"></a><a name="t48"></a><a id="MyBatis_774"></a>MyBatis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MyBatis官方文档</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887995">https://blog.csdn.net/ThinkWon/article/details/100887995</a></td>
</tr>
<tr>
<td>2</td>
<td>MyBatis官方文档-简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887076">https://blog.csdn.net/ThinkWon/article/details/100887076</a></td>
</tr>
<tr>
<td>3</td>
<td>MyBatis官方文档-入门</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887176">https://blog.csdn.net/ThinkWon/article/details/100887176</a></td>
</tr>
<tr>
<td>4</td>
<td>MyBatis官方文档-XML 配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887349">https://blog.csdn.net/ThinkWon/article/details/100887349</a></td>
</tr>
<tr>
<td>5</td>
<td>MyBatis官方文档-XML 映射文件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887478">https://blog.csdn.net/ThinkWon/article/details/100887478</a></td>
</tr>
<tr>
<td>6</td>
<td>MyBatis官方文档-动态 SQL</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887702">https://blog.csdn.net/ThinkWon/article/details/100887702</a></td>
</tr>
<tr>
<td>7</td>
<td>MyBatis官方文档-Java API</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887746">https://blog.csdn.net/ThinkWon/article/details/100887746</a></td>
</tr>
<tr>
<td>8</td>
<td>MyBatis官方文档-SQL 语句构建器类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887821">https://blog.csdn.net/ThinkWon/article/details/100887821</a></td>
</tr>
<tr>
<td>9</td>
<td>MyBatis官方文档-日志</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887951">https://blog.csdn.net/ThinkWon/article/details/100887951</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis功能架构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101295025">https://blog.csdn.net/ThinkWon/article/details/101295025</a></td>
</tr>
<tr>
<td>11</td>
<td>MyBatis工作原理</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293609">https://blog.csdn.net/ThinkWon/article/details/101293609</a></td>
</tr>
<tr>
<td>12</td>
<td>MyBatis核心类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293216">https://blog.csdn.net/ThinkWon/article/details/101293216</a></td>
</tr>
<tr>
<td>13</td>
<td>MyBatis面试宝典</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101292950">https://blog.csdn.net/ThinkWon/article/details/101292950</a></td>
</tr>
<tr>
<td>14</td>
<td>MyBatis实现一对一，一对多关联查询</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101322334">https://blog.csdn.net/ThinkWon/article/details/101322334</a></td>
</tr>
<tr>
<td>15</td>
<td>MyBatis缓存</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101351212">https://blog.csdn.net/ThinkWon/article/details/101351212</a></td>
</tr>
</tbody>
</table></div><h3><a name="t49"></a><a name="t49"></a><a id="Hibernate_796"></a>Hibernate</h3>
<h3><a name="t50"></a><a name="t50"></a><a id="Shiro_800"></a>Shiro</h3>
<h3><a name="t51"></a><a name="t51"></a><a id="Spring_Security_802"></a>Spring Security</h3>
<h3><a name="t52"></a><a name="t52"></a><a id="Netty_806"></a>Netty</h3>
<h3><a name="t53"></a><a name="t53"></a><a id="_810"></a>搜索引擎</h3>
<h4><a id="LuceneSolr_812"></a>Lucene/Solr</h4>
<h4><a id="Elasticsearch_814"></a>Elasticsearch</h4>
<h4><a id="ELK_816"></a>ELK</h4>
<h2><a name="t54"></a><a name="t54"></a><a id="_826"></a>中间件</h2>
<h3><a name="t55"></a><a name="t55"></a><a id="_828"></a>消息中间件</h3>
<h4><a id="RabbitMQ_830"></a>RabbitMQ</h4>
<h4><a id="RocketMQ_832"></a>RocketMQ</h4>
<h4><a id="ActiveMQ_834"></a>ActiveMQ</h4>
<h4><a id="Kafka_836"></a>Kafka</h4>
<h3><a name="t56"></a><a name="t56"></a><a id="_842"></a>远程过程调用中间件</h3>
<h4><a id="Dubbo_844"></a>Dubbo</h4>
<h3><a name="t57"></a><a name="t57"></a><a id="_850"></a>数据访问中间件</h3>
<p>Sharding JDBC</p>
<p>MyCat</p>
<h3><a name="t58"></a><a name="t58"></a><a id="Web_858"></a>Web应用服务器</h3>
<h4><a id="Tomcat_860"></a>Tomcat</h4>
<p>待整理：Tomcat各组件作用	Tomcat集群	Tomcat面试题</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Win10安装Tomcat服务器与配置环境变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622905">https://blog.csdn.net/ThinkWon/article/details/102622905</a></td>
</tr>
<tr>
<td>2</td>
<td>Linux(CentOS7)安装Tomcat与设置Tomcat为开机启动项</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102717537">https://blog.csdn.net/ThinkWon/article/details/102717537</a></td>
</tr>
<tr>
<td>3</td>
<td>Tomcat与JDK版本对应关系，Tomcat各版本特性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622738">https://blog.csdn.net/ThinkWon/article/details/102622738</a></td>
</tr>
<tr>
<td>4</td>
<td>Tomcat目录结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102619466">https://blog.csdn.net/ThinkWon/article/details/102619466</a></td>
</tr>
<tr>
<td>5</td>
<td>Tomcat乱码与端口占用的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622824">https://blog.csdn.net/ThinkWon/article/details/102622824</a></td>
</tr>
<tr>
<td>6</td>
<td>Tomcat系统架构与请求处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102676442">https://blog.csdn.net/ThinkWon/article/details/102676442</a></td>
</tr>
<tr>
<td>7</td>
<td>史上最强Tomcat8性能优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102744033">https://blog.csdn.net/ThinkWon/article/details/102744033</a></td>
</tr>
</tbody>
</table></div><h4><a id="Nginx_876"></a>Nginx</h4>
<h3><a name="t59"></a><a name="t59"></a><a id="_880"></a>缓存</h3>
<p>本地缓存</p>
<p>客户端缓存</p>
<p>服务端缓存</p>
<p>	web缓存，Redis，Memcached，Ehcache</p>
<h3><a name="t60"></a><a name="t60"></a><a id="_892"></a>其他</h3>
<h4><a id="Zookeeper_894"></a>Zookeeper</h4>
<h2><a name="t61"></a><a name="t61"></a><a id="_900"></a>微服务与分布式</h2>
<h3><a name="t62"></a><a name="t62"></a><a id="Spring_Boot_902"></a>Spring Boot</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>application.yml与bootstrap.yml的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100007093">https://blog.csdn.net/ThinkWon/article/details/100007093</a></td>
</tr>
<tr>
<td>2</td>
<td>一分钟了解约定优于配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101703815">https://blog.csdn.net/ThinkWon/article/details/101703815</a></td>
</tr>
</tbody>
</table></div><h3><a name="t63"></a><a name="t63"></a><a id="Spring_Cloud_911"></a>Spring Cloud</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring Cloud入门-十分钟了解Spring Cloud</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103715146">https://blog.csdn.net/ThinkWon/article/details/103715146</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring Cloud入门-Eureka服务注册与发现(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring Cloud入门-Ribbon服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></td>
</tr>
<tr>
<td>4</td>
<td>Spring Cloud入门-Hystrix断路器(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></td>
</tr>
<tr>
<td>5</td>
<td>Spring Cloud入门-Hystrix Dashboard与Turbine断路器监控(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103734664">https://blog.csdn.net/ThinkWon/article/details/103734664</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring Cloud入门-OpenFeign服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring Cloud入门-Zuul服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103738851">https://blog.csdn.net/ThinkWon/article/details/103738851</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Cloud入门-Config分布式配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103739628">https://blog.csdn.net/ThinkWon/article/details/103739628</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud入门-Bus消息总线(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753372">https://blog.csdn.net/ThinkWon/article/details/103753372</a></td>
</tr>
<tr>
<td>10</td>
<td>Spring Cloud入门-Sleuth服务链路跟踪(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753896">https://blog.csdn.net/ThinkWon/article/details/103753896</a></td>
</tr>
<tr>
<td>11</td>
<td>Spring Cloud入门-Consul服务注册发现与配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103756139">https://blog.csdn.net/ThinkWon/article/details/103756139</a></td>
</tr>
<tr>
<td>12</td>
<td>Spring Cloud入门-Gateway服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></td>
</tr>
<tr>
<td>13</td>
<td>Spring Cloud入门-Admin服务监控中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103758697">https://blog.csdn.net/ThinkWon/article/details/103758697</a></td>
</tr>
<tr>
<td>14</td>
<td>Spring Cloud入门-Oauth2授权的使用(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103761687">https://blog.csdn.net/ThinkWon/article/details/103761687</a></td>
</tr>
<tr>
<td>15</td>
<td>Spring Cloud入门-Oauth2授权之JWT集成(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103763364">https://blog.csdn.net/ThinkWon/article/details/103763364</a></td>
</tr>
<tr>
<td>16</td>
<td>Spring Cloud入门-Oauth2授权之基于JWT完成单点登录(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103766368">https://blog.csdn.net/ThinkWon/article/details/103766368</a></td>
</tr>
<tr>
<td>17</td>
<td>Spring Cloud入门-Nacos实现注册和配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103769680">https://blog.csdn.net/ThinkWon/article/details/103769680</a></td>
</tr>
<tr>
<td>18</td>
<td>Spring Cloud入门-Sentinel实现服务限流、熔断与降级(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103770879">https://blog.csdn.net/ThinkWon/article/details/103770879</a></td>
</tr>
<tr>
<td>19</td>
<td>Spring Cloud入门-Seata处理分布式事务问题(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786102">https://blog.csdn.net/ThinkWon/article/details/103786102</a></td>
</tr>
<tr>
<td>20</td>
<td>Spring Cloud入门-汇总篇(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786588">https://blog.csdn.net/ThinkWon/article/details/103786588</a></td>
</tr>
</tbody>
</table></div><h3><a name="t64"></a><a name="t64"></a><a id="_938"></a>服务注册发现</h3>
<h3><a name="t65"></a><a name="t65"></a><a id="_940"></a>服务配置</h3>
<h3><a name="t66"></a><a name="t66"></a><a id="_942"></a>负载均衡</h3>
<h3><a name="t67"></a><a name="t67"></a><a id="_944"></a>服务调用</h3>
<h3><a name="t68"></a><a name="t68"></a><a id="_946"></a>服务限流</h3>
<h3><a name="t69"></a><a name="t69"></a><a id="_948"></a>熔断降级</h3>
<h3><a name="t70"></a><a name="t70"></a><a id="_950"></a>网关路由</h3>
<h3><a name="t71"></a><a name="t71"></a><a id="_952"></a>服务权限</h3>
<h3><a name="t72"></a><a name="t72"></a><a id="_954"></a>链路追踪</h3>
<h3><a name="t73"></a><a name="t73"></a><a id="_956"></a>分布式事务</h3>
<h3><a name="t74"></a><a name="t74"></a><a id="_958"></a>分布式缓存</h3>
<h3><a name="t75"></a><a name="t75"></a><a id="_960"></a>分布式会话</h3>
<h3><a name="t76"></a><a name="t76"></a><a id="_962"></a>日志收集</h3>
<h3><a name="t77"></a><a name="t77"></a><a id="_964"></a>服务监控</h3>
<h3><a name="t78"></a><a name="t78"></a><a id="_966"></a>消息驱动</h3>
<h3><a name="t79"></a><a name="t79"></a><a id="_968"></a>数据处理流</h3>
<h3><a name="t80"></a><a name="t80"></a><a id="_970"></a>自动化测试与部署</h3>
<h3><a name="t81"></a><a name="t81"></a><a id="_972"></a>第三方支持</h3>
<h3><a name="t82"></a><a name="t82"></a><a id="Zookeeper_974"></a>分布式协调服务Zookeeper</h3>
<h2><a name="t83"></a><a name="t83"></a><a id="_978"></a>程序员的一些思考</h2>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>程序员写个人技术博客的价值与意义</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102980571">https://blog.csdn.net/ThinkWon/article/details/102980571</a></td>
</tr>
<tr>
<td>2</td>
<td>Java知识体系最强总结(2020版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></td>
</tr>
</tbody>
</table></div><h2><a name="t84"></a><a name="t84"></a><a id="_987"></a>项目管理</h2>
<h3><a name="t85"></a><a name="t85"></a><a id="_989"></a>需求调研</h3>
<h3><a name="t86"></a><a name="t86"></a><a id="_991"></a>项目管理</h3>
<h3><a name="t87"></a><a name="t87"></a><a id="_993"></a>代码管理</h3>
<h3><a name="t88"></a><a name="t88"></a><a id="_995"></a>文档管理</h3>
<h3><a name="t89"></a><a name="t89"></a><a id="_997"></a>测试</h3>
<h2><a name="t90"></a><a name="t90"></a><a id="_1003"></a>运维</h2>
<p>常规监控</p>
<p>APM</p>
<p>持续集成(CI/CD)：Jenkins，环境分离</p>
<p>自动化运维：Ansible，puppet，chef</p>
<p>测试：TDD 理论，单元测试，压力测试，全链路压测，A/B 、灰度、蓝绿测试</p>
<p>虚拟化：KVM，Xen，OpenVZ</p>
<p>容器技术：Docker</p>
<p>云技术：OpenStack</p>
<p>DevOps</p>
<p>文档管理</p>
<h2><a name="t91"></a><a name="t91"></a><a id="_1027"></a>操作系统</h2>
<p>计算机操作系统</p>
<p>计算机原理</p>
<p>Linux</p>
<p>CPU</p>
<p>进程，线程，协程</p>
<h2><a name="t92"></a><a name="t92"></a><a id="_1043"></a>推荐书籍</h2>
<h2><a name="t93"></a><a name="t93"></a><a id="_1049"></a>云计算</h2>
<p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p>
<h2><a name="t94"></a><a name="t94"></a><a id="_1055"></a>搜索引擎</h2>
<p>Solr、Lucene、Nutch、Elasticsearch</p>
<h2><a name="t95"></a><a name="t95"></a><a id="_1061"></a>权限管理</h2>
<p>Shiro、Spring Security</p>
<h2><a name="t96"></a><a name="t96"></a><a id="_1067"></a>区块链</h2>
<p>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=整理的Java知识体系主要包括基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识
), {}, org.apache.catalina.session.StandardSessionFacade@c90b94]
2020-04-10 22:49:46.464 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 22:49:46.474 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:49:46.474 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:49:46.474 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:49:46.474 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:49:46.494 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:49:48.484 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 22:49:48.494 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:49:48.494 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 22:49:48.494 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 22:49:48.554 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:49:52.355 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:49:52.355 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:49:52.355 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:49:52.355 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:49:52.385 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:49:53.257 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:49:53.259 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:49:53.260 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:49:53.261 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:49:53.268 [ http-nio-8082-exec-3 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:51:11.040 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:51:11.040 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:51:11.040 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.post
2020-04-10 22:51:11.040 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Blog(title= Java知识体系最强总结(2020版), content=<p><strong>本人从事Java开发已多年，平时有记录问题解决方案和总结知识点的习惯，整理了一些有关Java的知识体系，这不是最终版，会不定期的更新</strong>。也算是记录自己在从事编程工作的成长足迹，通过博客可以促进博主与阅读者的共同进步，结交更多志同道合的朋友。<strong>特此分享给大家，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽</strong>。</p>
<p>整理的Java知识体系主要包括<strong>基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链</strong>等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识。<strong>千里之行始于足下</strong>，希望大家根据自己的薄弱点，查缺补漏，根据自己感兴趣的方面多学习，学的精通一点，从现在开始行动起来。<strong>路漫漫其修远兮，吾将上下而求索，不管编程开发的路有多么难走，多么艰辛，我们都将百折不挠，不遗余力地去追求和探索</strong>。</p>
<p><img src="https://img-blog.csdnimg.cn/2019121810082198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly90aGlua3dvbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=""></p>
<p></p><div class="toc"><h3><a name="t0"></a><a name="t0"></a>文章目录</h3><ul><ul><li><a href="#Java_10" rel="nofollow" target="_self">Java面试总结</a></li><li><a href="#_37" rel="nofollow" target="_self">基础知识</a></li><ul><li><a href="#Java_39" rel="nofollow" target="_self">Java概述</a></li><li><a href="#_51" rel="nofollow" target="_self">基础语法</a></li><li><a href="#_98" rel="nofollow" target="_self">面向对象</a></li><li><a href="#_114" rel="nofollow" target="_self">集合框架</a></li><li><a href="#IO_129" rel="nofollow" target="_self">IO流</a></li><li><a href="#_143" rel="nofollow" target="_self">网络编程</a></li><li><a href="#API_173" rel="nofollow" target="_self">常用API</a></li><li><a href="#_185" rel="nofollow" target="_self">常用工具类库</a></li><li><a href="#_198" rel="nofollow" target="_self">单元测试</a></li><li><a href="#_204" rel="nofollow" target="_self">异常</a></li><li><a href="#_217" rel="nofollow" target="_self">日志</a></li></ul><li><a href="#_233" rel="nofollow" target="_self">工具</a></li><ul><li><a href="#IDEA_235" rel="nofollow" target="_self">IDEA</a></li><li><a href="#Eclipse__STS_244" rel="nofollow" target="_self">Eclipse &amp; STS</a></li><li><a href="#Maven_252" rel="nofollow" target="_self">Maven</a></li><li><a href="#Docker_265" rel="nofollow" target="_self">Docker</a></li><li><a href="#Git_273" rel="nofollow" target="_self">Git</a></li><li><a href="#GitLab_286" rel="nofollow" target="_self">GitLab</a></li><li><a href="#GitKraken_290" rel="nofollow" target="_self">GitKraken</a></li><li><a href="#Navicat_294" rel="nofollow" target="_self">Navicat</a></li></ul><li><a href="#_298" rel="nofollow" target="_self">并发编程</a></li><ul><li><a href="#_300" rel="nofollow" target="_self">基础知识</a></li><li><a href="#_311" rel="nofollow" target="_self">并发理论</a></li><li><a href="#_322" rel="nofollow" target="_self">并发关键字</a></li><li><a href="#Lock_332" rel="nofollow" target="_self">Lock体系</a></li><li><a href="#_357" rel="nofollow" target="_self">并发容器</a></li><li><a href="#_371" rel="nofollow" target="_self">线程池</a></li><li><a href="#_382" rel="nofollow" target="_self">原子操作类</a></li><li><a href="#_390" rel="nofollow" target="_self">并发工具</a></li><li><a href="#_399" rel="nofollow" target="_self">并发实践</a></li></ul><li><a href="#_409" rel="nofollow" target="_self">数据结构与算法</a></li><ul><li><a href="#_411" rel="nofollow" target="_self">数据结构</a></li><li><a href="#_438" rel="nofollow" target="_self">算法</a></li><ul><li><a href="#_461" rel="nofollow" target="_self">排序算法</a></li></ul><li><a href="#LeetCode_479" rel="nofollow" target="_self">LeetCode</a></li></ul><li><a href="#_498" rel="nofollow" target="_self">数据库</a></li><ul><li><a href="#Oracle_500" rel="nofollow" target="_self">Oracle</a></li><li><a href="#MySQL_504" rel="nofollow" target="_self">MySQL</a></li><ul><li><a href="#_506" rel="nofollow" target="_self">数据库基础知识</a></li><li><a href="#_508" rel="nofollow" target="_self">数据类型</a></li><li><a href="#_510" rel="nofollow" target="_self">引擎</a></li><li><a href="#_512" rel="nofollow" target="_self">索引</a></li><li><a href="#_514" rel="nofollow" target="_self">三大范式</a></li><li><a href="#SQL_516" rel="nofollow" target="_self">常用SQL语句</a></li><li><a href="#_518" rel="nofollow" target="_self">存储过程与函数</a></li><li><a href="#_520" rel="nofollow" target="_self">视图</a></li><li><a href="#MySQL_522" rel="nofollow" target="_self">MySQL优化</a></li><li><a href="#_524" rel="nofollow" target="_self">事务</a></li><li><a href="#_526" rel="nofollow" target="_self">数据备份与还原</a></li></ul><li><a href="#Redis_530" rel="nofollow" target="_self">Redis</a></li></ul><li><a href="#Java_551" rel="nofollow" target="_self">Java虚拟机</a></li><ul><li><a href="#Java_553" rel="nofollow" target="_self">深入理解Java虚拟机</a></li></ul><li><a href="#_566" rel="nofollow" target="_self">架构设计</a></li><ul><li><a href="#_578" rel="nofollow" target="_self">设计模式</a></li><ul><li><a href="#_599" rel="nofollow" target="_self">创建型模式</a></li><li><a href="#_611" rel="nofollow" target="_self">结构型模式</a></li><li><a href="#_626" rel="nofollow" target="_self">行为型模式</a></li><li><a href="#J2EE_645" rel="nofollow" target="_self">J2EE模式</a></li><li><a href="#_660" rel="nofollow" target="_self">实践应用</a></li></ul></ul><li><a href="#_672" rel="nofollow" target="_self">应用框架</a></li><ul><li><a href="#Spring_745" rel="nofollow" target="_self">Spring</a></li><ul><li><a href="#Spring_756" rel="nofollow" target="_self">《Spring实战》读书笔记</a></li></ul><li><a href="#Spring_MVC_770" rel="nofollow" target="_self">Spring MVC</a></li><li><a href="#MyBatis_774" rel="nofollow" target="_self">MyBatis</a></li><li><a href="#Hibernate_796" rel="nofollow" target="_self">Hibernate</a></li><li><a href="#Shiro_800" rel="nofollow" target="_self">Shiro</a></li><li><a href="#Spring_Security_802" rel="nofollow" target="_self">Spring Security</a></li><li><a href="#Netty_806" rel="nofollow" target="_self">Netty</a></li><li><a href="#_810" rel="nofollow" target="_self">搜索引擎</a></li><ul><li><a href="#LuceneSolr_812" rel="nofollow" target="_self">Lucene/Solr</a></li><li><a href="#Elasticsearch_814" rel="nofollow" target="_self">Elasticsearch</a></li><li><a href="#ELK_816" rel="nofollow" target="_self">ELK</a></li></ul></ul><li><a href="#_826" rel="nofollow" target="_self">中间件</a></li><ul><li><a href="#_828" rel="nofollow" target="_self">消息中间件</a></li><ul><li><a href="#RabbitMQ_830" rel="nofollow" target="_self">RabbitMQ</a></li><li><a href="#RocketMQ_832" rel="nofollow" target="_self">RocketMQ</a></li><li><a href="#ActiveMQ_834" rel="nofollow" target="_self">ActiveMQ</a></li><li><a href="#Kafka_836" rel="nofollow" target="_self">Kafka</a></li></ul><li><a href="#_842" rel="nofollow" target="_self">远程过程调用中间件</a></li><ul><li><a href="#Dubbo_844" rel="nofollow" target="_self">Dubbo</a></li></ul><li><a href="#_850" rel="nofollow" target="_self">数据访问中间件</a></li><li><a href="#Web_858" rel="nofollow" target="_self">Web应用服务器</a></li><ul><li><a href="#Tomcat_860" rel="nofollow" target="_self">Tomcat</a></li><li><a href="#Nginx_876" rel="nofollow" target="_self">Nginx</a></li></ul><li><a href="#_880" rel="nofollow" target="_self">缓存</a></li><li><a href="#_892" rel="nofollow" target="_self">其他</a></li><ul><li><a href="#Zookeeper_894" rel="nofollow" target="_self">Zookeeper</a></li></ul></ul><li><a href="#_900" rel="nofollow" target="_self">微服务与分布式</a></li><ul><li><a href="#Spring_Boot_902" rel="nofollow" target="_self">Spring Boot</a></li><li><a href="#Spring_Cloud_911" rel="nofollow" target="_self">Spring Cloud</a></li><li><a href="#_938" rel="nofollow" target="_self">服务注册发现</a></li><li><a href="#_940" rel="nofollow" target="_self">服务配置</a></li><li><a href="#_942" rel="nofollow" target="_self">负载均衡</a></li><li><a href="#_944" rel="nofollow" target="_self">服务调用</a></li><li><a href="#_946" rel="nofollow" target="_self">服务限流</a></li><li><a href="#_948" rel="nofollow" target="_self">熔断降级</a></li><li><a href="#_950" rel="nofollow" target="_self">网关路由</a></li><li><a href="#_952" rel="nofollow" target="_self">服务权限</a></li><li><a href="#_954" rel="nofollow" target="_self">链路追踪</a></li><li><a href="#_956" rel="nofollow" target="_self">分布式事务</a></li><li><a href="#_958" rel="nofollow" target="_self">分布式缓存</a></li><li><a href="#_960" rel="nofollow" target="_self">分布式会话</a></li><li><a href="#_962" rel="nofollow" target="_self">日志收集</a></li><li><a href="#_964" rel="nofollow" target="_self">服务监控</a></li><li><a href="#_966" rel="nofollow" target="_self">消息驱动</a></li><li><a href="#_968" rel="nofollow" target="_self">数据处理流</a></li><li><a href="#_970" rel="nofollow" target="_self">自动化测试与部署</a></li><li><a href="#_972" rel="nofollow" target="_self">第三方支持</a></li><li><a href="#Zookeeper_974" rel="nofollow" target="_self">分布式协调服务Zookeeper</a></li></ul><li><a href="#_978" rel="nofollow" target="_self">程序员的一些思考</a></li><li><a href="#_987" rel="nofollow" target="_self">项目管理</a></li><ul><li><a href="#_989" rel="nofollow" target="_self">需求调研</a></li><li><a href="#_991" rel="nofollow" target="_self">项目管理</a></li><li><a href="#_993" rel="nofollow" target="_self">代码管理</a></li><li><a href="#_995" rel="nofollow" target="_self">文档管理</a></li><li><a href="#_997" rel="nofollow" target="_self">测试</a></li></ul><li><a href="#_1003" rel="nofollow" target="_self">运维</a></li><li><a href="#_1027" rel="nofollow" target="_self">操作系统</a></li><li><a href="#_1043" rel="nofollow" target="_self">推荐书籍</a></li><li><a href="#_1049" rel="nofollow" target="_self">云计算</a></li><li><a href="#_1055" rel="nofollow" target="_self">搜索引擎</a></li><li><a href="#_1061" rel="nofollow" target="_self">权限管理</a></li><li><a href="#_1067" rel="nofollow" target="_self">区块链</a></li></ul></ul></div><p></p>
<h2><a name="t1"></a><a name="t1"></a><a id="Java_10"></a>Java面试总结</h2>
<p>Java面试总结汇总，整理了包括Java基础知识，集合容器，并发编程，JVM，常用开源框架Spring，MyBatis，数据库，中间件等，包含了作为一个Java工程师在面试中需要用到或者可能用到的绝大部分知识。欢迎大家阅读，本人见识有限，写的博客难免有错误或者疏忽的地方，还望各位大佬指点，在此表示感激不尽。文章持续更新中…</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java基础知识面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390612</a></td>
</tr>
<tr>
<td>2</td>
<td>Java集合容器面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588551" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588551</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390689" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390689</a></td>
</tr>
<tr>
<td>4</td>
<td>并发编程面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104863992" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104863992</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390752" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390752</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397516" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397516</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring MVC面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397427" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397427</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Boot面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397299" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397299</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397367" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397367</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/101292950" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/101292950</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/103522351" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/103522351</a></td>
</tr>
<tr>
<td>12</td>
<td>MySQL数据库面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104778621" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104778621</a></td>
</tr>
<tr>
<td>13</td>
<td>消息中间件MQ与RabbitMQ面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588612" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588612</a></td>
</tr>
<tr>
<td>14</td>
<td>Dubbo面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104390006" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104390006</a></td>
</tr>
<tr>
<td>15</td>
<td>Linux面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104588679" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104588679</a></td>
</tr>
<tr>
<td>16</td>
<td>Tomcat面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397665" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397665</a></td>
</tr>
<tr>
<td>17</td>
<td>ZooKeeper面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104397719" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104397719</a></td>
</tr>
<tr>
<td>18</td>
<td>Netty面试题（2020最新版）</td>
<td><a href="https://thinkwon.blog.csdn.net/article/details/104391081" rel="nofollow">https://thinkwon.blog.csdn.net/article/details/104391081</a></td>
</tr>
</tbody>
</table></div><h2><a name="t2"></a><a name="t2"></a><a id="_37"></a>基础知识</h2>
<h3><a name="t3"></a><a name="t3"></a><a id="Java_39"></a>Java概述</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353575">https://blog.csdn.net/ThinkWon/article/details/94353575</a></td>
</tr>
<tr>
<td>2</td>
<td>Java发展历程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353653">https://blog.csdn.net/ThinkWon/article/details/94353653</a></td>
</tr>
<tr>
<td>3</td>
<td>Java语言特点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354013">https://blog.csdn.net/ThinkWon/article/details/94354013</a></td>
</tr>
<tr>
<td>4</td>
<td>JDK安装与环境变量配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94353907">https://blog.csdn.net/ThinkWon/article/details/94353907</a></td>
</tr>
<tr>
<td>5</td>
<td>JVM、JRE和JDK的关系</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101369973">https://blog.csdn.net/ThinkWon/article/details/101369973</a></td>
</tr>
</tbody>
</table></div><h3><a name="t4"></a><a name="t4"></a><a id="_51"></a>基础语法</h3>
<p>大部分已完成</p>
<p>待整理：</p>
<p>Java开发必会的反编译知识（附支持对Lambda进行反编译的工具）</p>
<p>一文读懂什么是Java中的自动拆装箱</p>
<p>Java的枚举类型用法介绍</p>
<p>类、枚举、接口、数组、可变参数</p>
<p>泛型、序列化</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java标识符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101637454">https://blog.csdn.net/ThinkWon/article/details/101637454</a></td>
</tr>
<tr>
<td>2</td>
<td>Java关键字(Java 8版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101642385">https://blog.csdn.net/ThinkWon/article/details/101642385</a></td>
</tr>
<tr>
<td>3</td>
<td>Java注释</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643185">https://blog.csdn.net/ThinkWon/article/details/101643185</a></td>
</tr>
<tr>
<td>4</td>
<td>Java访问修饰符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643412">https://blog.csdn.net/ThinkWon/article/details/101643412</a></td>
</tr>
<tr>
<td>5</td>
<td>Java分隔符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643617">https://blog.csdn.net/ThinkWon/article/details/101643617</a></td>
</tr>
<tr>
<td>6</td>
<td>Java转义字符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643769">https://blog.csdn.net/ThinkWon/article/details/101643769</a></td>
</tr>
<tr>
<td>7</td>
<td>Java进制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101643936">https://blog.csdn.net/ThinkWon/article/details/101643936</a></td>
</tr>
<tr>
<td>8</td>
<td>Java流程控制语句</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645978">https://blog.csdn.net/ThinkWon/article/details/101645978</a></td>
</tr>
<tr>
<td>9</td>
<td>Java流程控制语句-顺序结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101644820">https://blog.csdn.net/ThinkWon/article/details/101644820</a></td>
</tr>
<tr>
<td>10</td>
<td>Java流程控制语句-分支结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645224">https://blog.csdn.net/ThinkWon/article/details/101645224</a></td>
</tr>
<tr>
<td>11</td>
<td>Java流程控制语句-循环结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101645757">https://blog.csdn.net/ThinkWon/article/details/101645757</a></td>
</tr>
<tr>
<td>12</td>
<td>Java表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101648114">https://blog.csdn.net/ThinkWon/article/details/101648114</a></td>
</tr>
<tr>
<td>13</td>
<td>Java运算符</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649002">https://blog.csdn.net/ThinkWon/article/details/101649002</a></td>
</tr>
<tr>
<td>14</td>
<td>Java变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649292">https://blog.csdn.net/ThinkWon/article/details/101649292</a></td>
</tr>
<tr>
<td>15</td>
<td>Java常量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649446">https://blog.csdn.net/ThinkWon/article/details/101649446</a></td>
</tr>
<tr>
<td>16</td>
<td>Java数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101649568">https://blog.csdn.net/ThinkWon/article/details/101649568</a></td>
</tr>
<tr>
<td>17</td>
<td>Java反射</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100128361">https://blog.csdn.net/ThinkWon/article/details/100128361</a></td>
</tr>
<tr>
<td>18</td>
<td>Java语法糖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100103689">https://blog.csdn.net/ThinkWon/article/details/100103689</a></td>
</tr>
<tr>
<td>19</td>
<td>Java注解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100178709">https://blog.csdn.net/ThinkWon/article/details/100178709</a></td>
</tr>
<tr>
<td>20</td>
<td>JSON简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642585">https://blog.csdn.net/ThinkWon/article/details/100642585</a></td>
</tr>
<tr>
<td>21</td>
<td>Properties类简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667783">https://blog.csdn.net/ThinkWon/article/details/100667783</a></td>
</tr>
<tr>
<td>22</td>
<td>XML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642425">https://blog.csdn.net/ThinkWon/article/details/100642425</a></td>
</tr>
<tr>
<td>23</td>
<td>YML简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642870">https://blog.csdn.net/ThinkWon/article/details/100642870</a></td>
</tr>
<tr>
<td>24</td>
<td>Java8新特性-Lambda表达式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100642932">https://blog.csdn.net/ThinkWon/article/details/100642932</a></td>
</tr>
<tr>
<td>25</td>
<td>Java基础语法</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354151">https://blog.csdn.net/ThinkWon/article/details/94354151</a></td>
</tr>
</tbody>
</table></div><h3><a name="t5"></a><a name="t5"></a><a id="_98"></a>面向对象</h3>
<p>待整理：</p>
<p>抽象</p>
<p>继承、封装、多态</p>
<p>接口、抽象类、内部类</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>什么是面向对象</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100667386">https://blog.csdn.net/ThinkWon/article/details/100667386</a></td>
</tr>
</tbody>
</table></div><h3><a name="t6"></a><a name="t6"></a><a id="_114"></a>集合框架</h3>
<p>迭代器、增强for、泛型</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java集合框架总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98844796">https://blog.csdn.net/ThinkWon/article/details/98844796</a></td>
</tr>
<tr>
<td>2</td>
<td>ArrayList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845119">https://blog.csdn.net/ThinkWon/article/details/98845119</a></td>
</tr>
<tr>
<td>3</td>
<td>HashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/98845487">https://blog.csdn.net/ThinkWon/article/details/98845487</a></td>
</tr>
<tr>
<td>4</td>
<td>LinkedHashMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102574293">https://blog.csdn.net/ThinkWon/article/details/102574293</a></td>
</tr>
<tr>
<td>5</td>
<td>LinkedList(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102573923">https://blog.csdn.net/ThinkWon/article/details/102573923</a></td>
</tr>
<tr>
<td>6</td>
<td>TreeMap(JDK1.8)源码解析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571883">https://blog.csdn.net/ThinkWon/article/details/102571883</a></td>
</tr>
</tbody>
</table></div><h3><a name="t7"></a><a name="t7"></a><a id="IO_129"></a>IO流</h3>
<p>待整理：</p>
<p>File、递归</p>
<p>字节流、字节缓冲流</p>
<p>编码表、编码方式、转换流、序列化、序列化流、打印流、commons-io</p>
<h3><a name="t8"></a><a name="t8"></a><a id="_143"></a>网络编程</h3>
<p>网络概述、网络模型</p>
<p>Socket原理机制</p>
<p>UDP</p>
<p>TCP/IP</p>
<p>协议、OSI 七层协议、HTTP、HTTP2.0、HTTPS</p>
<p>网络安全</p>
<p>	XSS、CSRF、SQL注入、Hash Dos、脚本注入、漏洞扫描工具、验证码</p>
<p>	DDoS防范、用户隐私信息保护、序列化漏洞</p>
<p>	加密解密、对称加密、哈希算法、非对称加密</p>
<p>	服务安全、数据安全、数据备份</p>
<p>	网络隔离、登录跳板机、非外网分离</p>
<p>	认证、授权</p>
<h3><a name="t9"></a><a name="t9"></a><a id="API_173"></a>常用API</h3>
<p>Date、DateFormat、Calendar</p>
<p>String、StringBuffer、StringBuilder、正则表达式</p>
<p>Number、Radom、Math、System、包装类</p>
<p>Arrays、Collections</p>
<h3><a name="t10"></a><a name="t10"></a><a id="_185"></a>常用工具类库</h3>
<p>待整理：OkHttp、commons-lang3</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>HttpClient工具类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101391489">https://blog.csdn.net/ThinkWon/article/details/101391489</a></td>
</tr>
<tr>
<td>2</td>
<td>WGS84地球坐标系，GCJ02火星坐标系，BD09百度坐标系简介与转换</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392187">https://blog.csdn.net/ThinkWon/article/details/101392187</a></td>
</tr>
<tr>
<td>3</td>
<td>Lombok简介、使用、工作原理、优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101392808">https://blog.csdn.net/ThinkWon/article/details/101392808</a></td>
</tr>
<tr>
<td>4</td>
<td>Java几种常用JSON库性能比较</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94354358">https://blog.csdn.net/ThinkWon/article/details/94354358</a></td>
</tr>
</tbody>
</table></div><h3><a name="t11"></a><a name="t11"></a><a id="_198"></a>单元测试</h3>
<p>JUnit</p>
<h3><a name="t12"></a><a name="t12"></a><a id="_204"></a>异常</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java异常总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>2</td>
<td>Java异常架构与异常关键字</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101676779">https://blog.csdn.net/ThinkWon/article/details/101676779</a></td>
</tr>
<tr>
<td>3</td>
<td>Java异常处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101677638">https://blog.csdn.net/ThinkWon/article/details/101677638</a></td>
</tr>
<tr>
<td>4</td>
<td>如何选择异常类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346911">https://blog.csdn.net/ThinkWon/article/details/94346911</a></td>
</tr>
<tr>
<td>5</td>
<td>Java异常常见面试题</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101681073">https://blog.csdn.net/ThinkWon/article/details/101681073</a></td>
</tr>
<tr>
<td>6</td>
<td>Java异常处理最佳实践</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94347002">https://blog.csdn.net/ThinkWon/article/details/94347002</a></td>
</tr>
</tbody>
</table></div><h3><a name="t13"></a><a name="t13"></a><a id="_217"></a>日志</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>常用日志框架Log4j，Logback，Log4j2性能比较与日志门面SLF4J简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101621135">https://blog.csdn.net/ThinkWon/article/details/101621135</a></td>
</tr>
<tr>
<td>2</td>
<td>日志作用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101619725">https://blog.csdn.net/ThinkWon/article/details/101619725</a></td>
</tr>
<tr>
<td>3</td>
<td>Apache Log4j2详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95043111">https://blog.csdn.net/ThinkWon/article/details/95043111</a></td>
</tr>
<tr>
<td>4</td>
<td>Log4j2同步日志，混合日志和异步日志配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625124">https://blog.csdn.net/ThinkWon/article/details/101625124</a></td>
</tr>
<tr>
<td>5</td>
<td>Log4j2配置文件详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101629302">https://blog.csdn.net/ThinkWon/article/details/101629302</a></td>
</tr>
<tr>
<td>6</td>
<td>Log4j2的Appenders配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101625820">https://blog.csdn.net/ThinkWon/article/details/101625820</a></td>
</tr>
<tr>
<td>7</td>
<td>Log4j2的Filters配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101627162">https://blog.csdn.net/ThinkWon/article/details/101627162</a></td>
</tr>
<tr>
<td>8</td>
<td>Log4j2的Policy触发策略与Strategy滚动策略配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628222">https://blog.csdn.net/ThinkWon/article/details/101628222</a></td>
</tr>
<tr>
<td>9</td>
<td>Log4j2的Loggers配置详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101628736">https://blog.csdn.net/ThinkWon/article/details/101628736</a></td>
</tr>
</tbody>
</table></div><h2><a name="t14"></a><a name="t14"></a><a id="_233"></a>工具</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="IDEA_235"></a>IDEA</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>IDEA常用配置和常用插件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101020481">https://blog.csdn.net/ThinkWon/article/details/101020481</a></td>
</tr>
<tr>
<td>2</td>
<td>IDEA中Maven依赖下载失败解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101312918">https://blog.csdn.net/ThinkWon/article/details/101312918</a></td>
</tr>
</tbody>
</table></div><h3><a name="t16"></a><a name="t16"></a><a id="Eclipse__STS_244"></a>Eclipse &amp; STS</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Eclipse &amp; Spring Tool Suite常用配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101025543">https://blog.csdn.net/ThinkWon/article/details/101025543</a></td>
</tr>
</tbody>
</table></div><h3><a name="t17"></a><a name="t17"></a><a id="Maven_252"></a>Maven</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Maven简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346090">https://blog.csdn.net/ThinkWon/article/details/94346090</a></td>
</tr>
<tr>
<td>2</td>
<td>Maven安装与配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346569">https://blog.csdn.net/ThinkWon/article/details/94346569</a></td>
</tr>
<tr>
<td>3</td>
<td>Maven依赖冲突</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483020">https://blog.csdn.net/ThinkWon/article/details/101483020</a></td>
</tr>
<tr>
<td>4</td>
<td>手动安装Maven依赖</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483478">https://blog.csdn.net/ThinkWon/article/details/101483478</a></td>
</tr>
<tr>
<td>5</td>
<td>Maven部署jar包到远程仓库</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101483769">https://blog.csdn.net/ThinkWon/article/details/101483769</a></td>
</tr>
<tr>
<td>6</td>
<td>Maven私服Nexus安装与使用</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346681">https://blog.csdn.net/ThinkWon/article/details/94346681</a></td>
</tr>
</tbody>
</table></div><h3><a name="t18"></a><a name="t18"></a><a id="Docker_265"></a>Docker</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>使用Docker安装GitLab</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95042797">https://blog.csdn.net/ThinkWon/article/details/95042797</a></td>
</tr>
</tbody>
</table></div><h3><a name="t19"></a><a name="t19"></a><a id="Git_273"></a>Git</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Git简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/94346816">https://blog.csdn.net/ThinkWon/article/details/94346816</a></td>
</tr>
<tr>
<td>2</td>
<td>版本控制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449228">https://blog.csdn.net/ThinkWon/article/details/101449228</a></td>
</tr>
<tr>
<td>3</td>
<td>Git忽略文件.gitignore详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101447866">https://blog.csdn.net/ThinkWon/article/details/101447866</a></td>
</tr>
<tr>
<td>4</td>
<td>Git与SVN的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101449611">https://blog.csdn.net/ThinkWon/article/details/101449611</a></td>
</tr>
<tr>
<td>5</td>
<td>常用Git命令</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101450420">https://blog.csdn.net/ThinkWon/article/details/101450420</a></td>
</tr>
<tr>
<td>6</td>
<td>Git，GitHub与GitLab的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101470086">https://blog.csdn.net/ThinkWon/article/details/101470086</a></td>
</tr>
</tbody>
</table></div><h3><a name="t20"></a><a name="t20"></a><a id="GitLab_286"></a>GitLab</h3>
<h3><a name="t21"></a><a name="t21"></a><a id="GitKraken_290"></a>GitKraken</h3>
<h3><a name="t22"></a><a name="t22"></a><a id="Navicat_294"></a>Navicat</h3>
<h2><a name="t23"></a><a name="t23"></a><a id="_298"></a>并发编程</h2>
<h3><a name="t24"></a><a name="t24"></a><a id="_300"></a>基础知识</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发编程的优缺点</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102020811">https://blog.csdn.net/ThinkWon/article/details/102020811</a></td>
</tr>
<tr>
<td>2</td>
<td>线程的状态和基本操作</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102027115">https://blog.csdn.net/ThinkWon/article/details/102027115</a></td>
</tr>
<tr>
<td>3</td>
<td>进程和线程的区别(超详细)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021274">https://blog.csdn.net/ThinkWon/article/details/102021274</a></td>
</tr>
<tr>
<td>4</td>
<td>创建线程的四种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102021143">https://blog.csdn.net/ThinkWon/article/details/102021143</a></td>
</tr>
</tbody>
</table></div><h3><a name="t25"></a><a name="t25"></a><a id="_311"></a>并发理论</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java内存模型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073578">https://blog.csdn.net/ThinkWon/article/details/102073578</a></td>
</tr>
<tr>
<td>2</td>
<td>重排序与数据依赖性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102073858">https://blog.csdn.net/ThinkWon/article/details/102073858</a></td>
</tr>
<tr>
<td>3</td>
<td>as-if-serial规则和happens-before规则的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074107">https://blog.csdn.net/ThinkWon/article/details/102074107</a></td>
</tr>
<tr>
<td>4</td>
<td>Java并发理论总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102074440">https://blog.csdn.net/ThinkWon/article/details/102074440</a></td>
</tr>
</tbody>
</table></div><h3><a name="t26"></a><a name="t26"></a><a id="_322"></a>并发关键字</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Java并发关键字-synchronized</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243189">https://blog.csdn.net/ThinkWon/article/details/102243189</a></td>
</tr>
<tr>
<td>2</td>
<td>Java并发关键字-volatile</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102243670">https://blog.csdn.net/ThinkWon/article/details/102243670</a></td>
</tr>
<tr>
<td>3</td>
<td>Java并发关键字-final</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102244477">https://blog.csdn.net/ThinkWon/article/details/102244477</a></td>
</tr>
</tbody>
</table></div><h3><a name="t27"></a><a name="t27"></a><a id="Lock_332"></a>Lock体系</h3>
<p>待整理：</p>
<p>公平锁 &amp; 非公平锁</p>
<p>乐观锁 &amp; 悲观锁</p>
<p>可重入锁 &amp; 不可重入锁</p>
<p>互斥锁 &amp; 共享锁</p>
<p>死锁</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Lock简介与初识AQS</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102468837">https://blog.csdn.net/ThinkWon/article/details/102468837</a></td>
</tr>
<tr>
<td>2</td>
<td>AQS(AbstractQueuedSynchronizer)详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469112">https://blog.csdn.net/ThinkWon/article/details/102469112</a></td>
</tr>
<tr>
<td>3</td>
<td>ReentrantLock(重入锁)实现原理与公平锁非公平锁区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469388">https://blog.csdn.net/ThinkWon/article/details/102469388</a></td>
</tr>
<tr>
<td>4</td>
<td>读写锁ReentrantReadWriteLock源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469598">https://blog.csdn.net/ThinkWon/article/details/102469598</a></td>
</tr>
<tr>
<td>5</td>
<td>Condition源码分析与等待通知机制</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469889">https://blog.csdn.net/ThinkWon/article/details/102469889</a></td>
</tr>
<tr>
<td>6</td>
<td>LockSupport详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102469993">https://blog.csdn.net/ThinkWon/article/details/102469993</a></td>
</tr>
</tbody>
</table></div><h3><a name="t28"></a><a name="t28"></a><a id="_357"></a>并发容器</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102506447">https://blog.csdn.net/ThinkWon/article/details/102506447</a></td>
</tr>
<tr>
<td>2</td>
<td>并发容器之ConcurrentLinkedQueue详解与源码分析</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508089">https://blog.csdn.net/ThinkWon/article/details/102508089</a></td>
</tr>
<tr>
<td>3</td>
<td>并发容器之CopyOnWriteArrayList详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508258">https://blog.csdn.net/ThinkWon/article/details/102508258</a></td>
</tr>
<tr>
<td>4</td>
<td>并发容器之ThreadLocal详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508381">https://blog.csdn.net/ThinkWon/article/details/102508381</a></td>
</tr>
<tr>
<td>5</td>
<td>ThreadLocal内存泄漏分析与解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508721">https://blog.csdn.net/ThinkWon/article/details/102508721</a></td>
</tr>
<tr>
<td>6</td>
<td>并发容器之BlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508901">https://blog.csdn.net/ThinkWon/article/details/102508901</a></td>
</tr>
<tr>
<td>7</td>
<td>并发容器之ArrayBlockingQueue与LinkedBlockingQueue详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102508971">https://blog.csdn.net/ThinkWon/article/details/102508971</a></td>
</tr>
</tbody>
</table></div><h3><a name="t29"></a><a name="t29"></a><a id="_371"></a>线程池</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>线程池ThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541900">https://blog.csdn.net/ThinkWon/article/details/102541900</a></td>
</tr>
<tr>
<td>2</td>
<td>Executors类创建四种常见线程池</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102541990">https://blog.csdn.net/ThinkWon/article/details/102541990</a></td>
</tr>
<tr>
<td>3</td>
<td>线程池之ScheduledThreadPoolExecutor详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542299">https://blog.csdn.net/ThinkWon/article/details/102542299</a></td>
</tr>
<tr>
<td>4</td>
<td>FutureTask详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102542404">https://blog.csdn.net/ThinkWon/article/details/102542404</a></td>
</tr>
</tbody>
</table></div><h3><a name="t30"></a><a name="t30"></a><a id="_382"></a>原子操作类</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>原子操作类总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556910">https://blog.csdn.net/ThinkWon/article/details/102556910</a></td>
</tr>
</tbody>
</table></div><h3><a name="t31"></a><a name="t31"></a><a id="_390"></a>并发工具</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>并发工具之CountDownLatch与CyclicBarrier</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102556958">https://blog.csdn.net/ThinkWon/article/details/102556958</a></td>
</tr>
<tr>
<td>2</td>
<td>并发工具之Semaphore与Exchanger</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557034">https://blog.csdn.net/ThinkWon/article/details/102557034</a></td>
</tr>
</tbody>
</table></div><h3><a name="t32"></a><a name="t32"></a><a id="_399"></a>并发实践</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>实现生产者消费者的三种方式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102557126">https://blog.csdn.net/ThinkWon/article/details/102557126</a></td>
</tr>
</tbody>
</table></div><h2><a name="t33"></a><a name="t33"></a><a id="_409"></a>数据结构与算法</h2>
<h3><a name="t34"></a><a name="t34"></a><a id="_411"></a>数据结构</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>红黑树详细分析(图文详解)，看了都说好</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102571535">https://blog.csdn.net/ThinkWon/article/details/102571535</a></td>
</tr>
</tbody>
</table>
</div>

       1、数组
        2、栈
        3、队列
        4、链表
        5、树
            二叉树
            完全二叉树
            平衡二叉树
            二叉查找树（BST）
            红黑树
            B，B+，B*树
            LSM 树
        字段是不是数据结构

<h3><a name="t35"></a><a name="t35"></a><a id="_438"></a>算法</h3>
<p>语言只是编程工具，算法才是编程之魂！</p>

    1、排序算法：快速排序、归并排序、计数排序
    2、搜索算法：回溯、递归、剪枝
    3、图论：最短路径、最小生成树、网络流建模
    4、动态规划：背包问题、最长子序列、计数问题
    5、基础技巧：分治、倍增、二分法、贪心算法
    
    宽度优先搜索
    深度优先搜索
    广度优先
    双指针
    扫描线
    
    朴素贝叶斯
    推荐算法
    

<h4><a id="_461"></a>排序算法</h4>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>史上最全经典排序算法总结(Java实现)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/95616819">https://blog.csdn.net/ThinkWon/article/details/95616819</a></td>
</tr>
<tr>
<td>2</td>
<td>冒泡排序（Bubble Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534473">https://blog.csdn.net/ThinkWon/article/details/101534473</a></td>
</tr>
<tr>
<td>3</td>
<td>选择排序（Selection Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101534721">https://blog.csdn.net/ThinkWon/article/details/101534721</a></td>
</tr>
<tr>
<td>4</td>
<td>插入排序（Insertion Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101537804">https://blog.csdn.net/ThinkWon/article/details/101537804</a></td>
</tr>
<tr>
<td>5</td>
<td>希尔排序（Shell Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538166">https://blog.csdn.net/ThinkWon/article/details/101538166</a></td>
</tr>
<tr>
<td>6</td>
<td>归并排序（Merge Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101538756">https://blog.csdn.net/ThinkWon/article/details/101538756</a></td>
</tr>
<tr>
<td>7</td>
<td>快速排序（Quick Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543580">https://blog.csdn.net/ThinkWon/article/details/101543580</a></td>
</tr>
<tr>
<td>8</td>
<td>堆排序（Heap Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101543941">https://blog.csdn.net/ThinkWon/article/details/101543941</a></td>
</tr>
<tr>
<td>9</td>
<td>计数排序（Counting Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544159">https://blog.csdn.net/ThinkWon/article/details/101544159</a></td>
</tr>
<tr>
<td>10</td>
<td>桶排序（Bucket Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101544356">https://blog.csdn.net/ThinkWon/article/details/101544356</a></td>
</tr>
<tr>
<td>11</td>
<td>基数排序（Radix Sort）</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101545529">https://blog.csdn.net/ThinkWon/article/details/101545529</a></td>
</tr>
</tbody>
</table></div><h3><a name="t36"></a><a name="t36"></a><a id="LeetCode_479"></a>LeetCode</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>LeetCode第1题 两数之和(Two Sum)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113049">https://blog.csdn.net/ThinkWon/article/details/103113049</a></td>
</tr>
<tr>
<td>2</td>
<td>LeetCode第3题 无重复字符的最长子串(Longest Substring Without Repeating Characters)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113969">https://blog.csdn.net/ThinkWon/article/details/103113969</a></td>
</tr>
<tr>
<td>3</td>
<td>LeetCode第7题 整数反转(Reverse Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113167">https://blog.csdn.net/ThinkWon/article/details/103113167</a></td>
</tr>
<tr>
<td>4</td>
<td>LeetCode第9题 回文数(Palindrome Number)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113151">https://blog.csdn.net/ThinkWon/article/details/103113151</a></td>
</tr>
<tr>
<td>5</td>
<td>LeetCode第13题 罗马数字转整数(Roman to Integer)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113519">https://blog.csdn.net/ThinkWon/article/details/103113519</a></td>
</tr>
<tr>
<td>6</td>
<td>LeetCode第14题 最长公共前缀(Longest Common Prefix)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113700">https://blog.csdn.net/ThinkWon/article/details/103113700</a></td>
</tr>
<tr>
<td>7</td>
<td>LeetCode第20题 有效的括号(Valid Parentheses)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113848">https://blog.csdn.net/ThinkWon/article/details/103113848</a></td>
</tr>
<tr>
<td>8</td>
<td>LeetCode第26题 删除排序数组中的重复项(Remove Duplicates from Sorted Array)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103113097">https://blog.csdn.net/ThinkWon/article/details/103113097</a></td>
</tr>
</tbody>
</table></div><h2><a name="t37"></a><a name="t37"></a><a id="_498"></a>数据库</h2>
<h3><a name="t38"></a><a name="t38"></a><a id="Oracle_500"></a>Oracle</h3>
<h3><a name="t39"></a><a name="t39"></a><a id="MySQL_504"></a>MySQL</h3>
<h4><a id="_506"></a>数据库基础知识</h4>
<h4><a id="_508"></a>数据类型</h4>
<h4><a id="_510"></a>引擎</h4>
<h4><a id="_512"></a>索引</h4>
<h4><a id="_514"></a>三大范式</h4>
<h4><a id="SQL_516"></a>常用SQL语句</h4>
<h4><a id="_518"></a>存储过程与函数</h4>
<h4><a id="_520"></a>视图</h4>
<h4><a id="MySQL_522"></a>MySQL优化</h4>
<h4><a id="_524"></a>事务</h4>
<h4><a id="_526"></a>数据备份与还原</h4>
<h3><a name="t40"></a><a name="t40"></a><a id="Redis_530"></a>Redis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Redis总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/99999584">https://blog.csdn.net/ThinkWon/article/details/99999584</a></td>
</tr>
<tr>
<td>2</td>
<td>Redis使用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521497">https://blog.csdn.net/ThinkWon/article/details/101521497</a></td>
</tr>
<tr>
<td>3</td>
<td>Redis数据类型</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101521724">https://blog.csdn.net/ThinkWon/article/details/101521724</a></td>
</tr>
<tr>
<td>4</td>
<td>Redis持久化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522209">https://blog.csdn.net/ThinkWon/article/details/101522209</a></td>
</tr>
<tr>
<td>5</td>
<td>Redis过期键的删除策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101522970">https://blog.csdn.net/ThinkWon/article/details/101522970</a></td>
</tr>
<tr>
<td>6</td>
<td>Redis数据淘汰策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530624">https://blog.csdn.net/ThinkWon/article/details/101530624</a></td>
</tr>
<tr>
<td>7</td>
<td>Redis与Memcached的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101530406">https://blog.csdn.net/ThinkWon/article/details/101530406</a></td>
</tr>
<tr>
<td>8</td>
<td>Redis常见面试题(精简版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></td>
</tr>
<tr>
<td>9</td>
<td>Redis中缓存雪崩、缓存穿透等问题的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103402008">https://blog.csdn.net/ThinkWon/article/details/103402008</a></td>
</tr>
<tr>
<td>10</td>
<td>阿里云Redis开发规范学习总结</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103400250">https://blog.csdn.net/ThinkWon/article/details/103400250</a></td>
</tr>
<tr>
<td>11</td>
<td>Redis开发常用规范</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401781">https://blog.csdn.net/ThinkWon/article/details/103401781</a></td>
</tr>
<tr>
<td>12</td>
<td>这可能是最中肯的Redis规范了</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103401978">https://blog.csdn.net/ThinkWon/article/details/103401978</a></td>
</tr>
</tbody>
</table></div><h2><a name="t41"></a><a name="t41"></a><a id="Java_551"></a>Java虚拟机</h2>
<h3><a name="t42"></a><a name="t42"></a><a id="Java_553"></a>深入理解Java虚拟机</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>深入理解Java虚拟机-走近Java</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103804387">https://blog.csdn.net/ThinkWon/article/details/103804387</a></td>
</tr>
<tr>
<td>2</td>
<td>深入理解Java虚拟机-Java内存区域与内存溢出异常</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103827387">https://blog.csdn.net/ThinkWon/article/details/103827387</a></td>
</tr>
<tr>
<td>3</td>
<td>深入理解Java虚拟机-垃圾回收器与内存分配策略</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103831676">https://blog.csdn.net/ThinkWon/article/details/103831676</a></td>
</tr>
<tr>
<td>4</td>
<td>深入理解Java虚拟机-虚拟机执行子系统</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835168">https://blog.csdn.net/ThinkWon/article/details/103835168</a></td>
</tr>
<tr>
<td>5</td>
<td>深入理解Java虚拟机-程序编译与代码优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103835883">https://blog.csdn.net/ThinkWon/article/details/103835883</a></td>
</tr>
<tr>
<td>6</td>
<td>深入理解Java虚拟机-高效并发</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103836167">https://blog.csdn.net/ThinkWon/article/details/103836167</a></td>
</tr>
</tbody>
</table></div><h2><a name="t43"></a><a name="t43"></a><a id="_566"></a>架构设计</h2>
<p>高可用架构</p>
<p>高并发架构</p>
<p>可伸缩架构</p>
<p>集群</p>
<h3><a name="t44"></a><a name="t44"></a><a id="_578"></a>设计模式</h3>
<p>常用设计模式</p>
<p>创建型：<br>
单例模式、工厂模式、抽象工厂模式</p>
<p>结构型：<br>
适配器模式、外观模式、代理模式、装饰器模式</p>
<p>行为型：<br>
观察者模式、策略模式、模板模式</p>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>设计模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/96829572">https://blog.csdn.net/ThinkWon/article/details/96829572</a></td>
</tr>
</tbody>
</table></div><h4><a id="_599"></a>创建型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>抽象工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382584">https://blog.csdn.net/ThinkWon/article/details/101382584</a></td>
</tr>
<tr>
<td>2</td>
<td>单例模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382855">https://blog.csdn.net/ThinkWon/article/details/101382855</a></td>
</tr>
<tr>
<td>3</td>
<td>工厂模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383285">https://blog.csdn.net/ThinkWon/article/details/101383285</a></td>
</tr>
<tr>
<td>4</td>
<td>建造者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383401">https://blog.csdn.net/ThinkWon/article/details/101383401</a></td>
</tr>
<tr>
<td>5</td>
<td>原型模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383491">https://blog.csdn.net/ThinkWon/article/details/101383491</a></td>
</tr>
</tbody>
</table></div><h4><a id="_611"></a>结构型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>代理模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384436">https://blog.csdn.net/ThinkWon/article/details/101384436</a></td>
</tr>
<tr>
<td>2</td>
<td>过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384514">https://blog.csdn.net/ThinkWon/article/details/101384514</a></td>
</tr>
<tr>
<td>3</td>
<td>桥接模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384584">https://blog.csdn.net/ThinkWon/article/details/101384584</a></td>
</tr>
<tr>
<td>4</td>
<td>适配器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384619">https://blog.csdn.net/ThinkWon/article/details/101384619</a></td>
</tr>
<tr>
<td>5</td>
<td>外观模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384676">https://blog.csdn.net/ThinkWon/article/details/101384676</a></td>
</tr>
<tr>
<td>6</td>
<td>享元模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384716">https://blog.csdn.net/ThinkWon/article/details/101384716</a></td>
</tr>
<tr>
<td>7</td>
<td>装饰器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384753">https://blog.csdn.net/ThinkWon/article/details/101384753</a></td>
</tr>
<tr>
<td>8</td>
<td>组合模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384786">https://blog.csdn.net/ThinkWon/article/details/101384786</a></td>
</tr>
</tbody>
</table></div><h4><a id="_626"></a>行为型模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>备忘录模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383582">https://blog.csdn.net/ThinkWon/article/details/101383582</a></td>
</tr>
<tr>
<td>2</td>
<td>策略模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383647">https://blog.csdn.net/ThinkWon/article/details/101383647</a></td>
</tr>
<tr>
<td>3</td>
<td>迭代器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383722">https://blog.csdn.net/ThinkWon/article/details/101383722</a></td>
</tr>
<tr>
<td>4</td>
<td>访问者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383780">https://blog.csdn.net/ThinkWon/article/details/101383780</a></td>
</tr>
<tr>
<td>5</td>
<td>观察者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383872">https://blog.csdn.net/ThinkWon/article/details/101383872</a></td>
</tr>
<tr>
<td>6</td>
<td>解释器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101383930">https://blog.csdn.net/ThinkWon/article/details/101383930</a></td>
</tr>
<tr>
<td>7</td>
<td>空对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384001">https://blog.csdn.net/ThinkWon/article/details/101384001</a></td>
</tr>
<tr>
<td>8</td>
<td>命令模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384090">https://blog.csdn.net/ThinkWon/article/details/101384090</a></td>
</tr>
<tr>
<td>9</td>
<td>模板模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384138">https://blog.csdn.net/ThinkWon/article/details/101384138</a></td>
</tr>
<tr>
<td>10</td>
<td>责任链模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384195">https://blog.csdn.net/ThinkWon/article/details/101384195</a></td>
</tr>
<tr>
<td>11</td>
<td>中介者模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384251">https://blog.csdn.net/ThinkWon/article/details/101384251</a></td>
</tr>
<tr>
<td>12</td>
<td>状态模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101384315">https://blog.csdn.net/ThinkWon/article/details/101384315</a></td>
</tr>
</tbody>
</table></div><h4><a id="J2EE_645"></a>J2EE模式</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MVC模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101381701">https://blog.csdn.net/ThinkWon/article/details/101381701</a></td>
</tr>
<tr>
<td>2</td>
<td>传输对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382134">https://blog.csdn.net/ThinkWon/article/details/101382134</a></td>
</tr>
<tr>
<td>3</td>
<td>服务定位器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382179">https://blog.csdn.net/ThinkWon/article/details/101382179</a></td>
</tr>
<tr>
<td>4</td>
<td>拦截过滤器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382210">https://blog.csdn.net/ThinkWon/article/details/101382210</a></td>
</tr>
<tr>
<td>5</td>
<td>前端控制器模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382247">https://blog.csdn.net/ThinkWon/article/details/101382247</a></td>
</tr>
<tr>
<td>6</td>
<td>数据访问对象模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382287">https://blog.csdn.net/ThinkWon/article/details/101382287</a></td>
</tr>
<tr>
<td>7</td>
<td>业务代表模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382356">https://blog.csdn.net/ThinkWon/article/details/101382356</a></td>
</tr>
<tr>
<td>8</td>
<td>组合实体模式</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101382390">https://blog.csdn.net/ThinkWon/article/details/101382390</a></td>
</tr>
</tbody>
</table></div><h4><a id="_660"></a>实践应用</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>业务复杂=if else？刚来的大神竟然用策略+工厂彻底干掉了他们！</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102924813">https://blog.csdn.net/ThinkWon/article/details/102924813</a></td>
</tr>
</tbody>
</table></div><h2><a name="t45"></a><a name="t45"></a><a id="_672"></a>应用框架</h2>
<p>如何学习一个框架或者技术</p>
<ul>
<li>
<p>是什么，简介，概述</p>
</li>
<li>
<p>有什么用，用途，使用场景</p>
</li>
<li>
<p>怎么用，在实际开发中的应用，注意事项</p>
</li>
<li>
<p>优缺点</p>
</li>
<li>
<p>框架原理，工作流程，工作原理</p>
</li>
<li>
<p>常见面试题</p>
</li>
<li>
<p>源码分析，核心类，核心方法，设计模式</p>
</li>
<li>
<p>发布博客，在开发和实践中，博客反馈中持续改进</p>
</li>
<li>
<p>与同事朋友交流，技术论坛，技术分享中持续丰富知识</p>
</li>
</ul>
<p>常用框架</p>
<ul>
<li>
<p>集成开发工具（IDE）：Eclipse、MyEclipse、Spring Tool Suite（STS）、Intellij IDEA、NetBeans、JBuilder、JCreator</p>
</li>
<li>
<p>JAVA服务器：tomcat、jboss、websphere、weblogic、resin、jetty、apusic、apache</p>
</li>
<li>
<p>负载均衡：nginx、lvs</p>
</li>
<li>
<p>web层框架：Spring MVC、Struts2、Struts1、Google Web Toolkit（GWT）、JQWEB</p>
</li>
<li>
<p>服务层框架：Spring、EJB</p>
</li>
<li>
<p>持久层框架：Hibernate、MyBatis、JPA、TopLink</p>
</li>
<li>
<p>数据库：Oracle、MySql、MSSQL、Redis</p>
</li>
<li>
<p>项目构建：maven、ant</p>
</li>
<li>
<p>持续集成：Jenkins</p>
</li>
<li>
<p>版本控制：SVN、CVS、VSS、GIT</p>
</li>
<li>
<p>私服：Nexus</p>
</li>
<li>
<p>消息组件：IBM MQ、RabbitMQ、ActiveMQ、RocketMq</p>
</li>
<li>
<p>日志框架：Commons Logging、log4j 、slf4j、IOC</p>
</li>
<li>
<p>缓存框架：memcache、redis、ehcache、jboss cache</p>
</li>
<li>
<p>RPC框架：Hessian、Dubbo</p>
</li>
<li>
<p>规则引擎：Drools</p>
</li>
<li>
<p>工作流：Activiti</p>
</li>
<li>
<p>批处理：Spring Batch</p>
</li>
<li>
<p>通用查询框架：Query DSL</p>
</li>
<li>
<p>JAVA安全框架：shiro、Spring Security</p>
</li>
<li>
<p>代码静态检查工具：FindBugs、PMD</p>
</li>
<li>
<p>Linux操作系统：CentOS、Ubuntu、SUSE Linux、</p>
</li>
<li>
<p>常用工具：PLSQL Developer（Oracle）、Navicat（MySql）、FileZilla（FTP）、Xshell（SSH）、putty（SSH）、SecureCRT（SSH）、jd-gui（反编译）</p>
</li>
</ul>
<h3><a name="t46"></a><a name="t46"></a><a id="Spring_745"></a>Spring</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring简介、设计理念、优缺点、应用场景</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810748">https://blog.csdn.net/ThinkWon/article/details/102810748</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring模块组成(框架组成、整体架构、体系架构、体系结构)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102810819">https://blog.csdn.net/ThinkWon/article/details/102810819</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring容器中bean的生命周期</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102866432">https://blog.csdn.net/ThinkWon/article/details/102866432</a></td>
</tr>
<tr>
<td>4</td>
<td>控制反转(IoC)与依赖注入(DI)详解</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102912332">https://blog.csdn.net/ThinkWon/article/details/102912332</a></td>
</tr>
</tbody>
</table></div><h4><a id="Spring_756"></a>《Spring实战》读书笔记</h4>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>《Spring实战》读书笔记-第1章 Spring之旅</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103097364">https://blog.csdn.net/ThinkWon/article/details/103097364</a></td>
</tr>
<tr>
<td>2</td>
<td>《Spring实战》读书笔记-第2章 装配Bean</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103527675">https://blog.csdn.net/ThinkWon/article/details/103527675</a></td>
</tr>
<tr>
<td>3</td>
<td>《Spring实战》读书笔记-第3章 高级装配</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103536621">https://blog.csdn.net/ThinkWon/article/details/103536621</a></td>
</tr>
<tr>
<td>4</td>
<td>《Spring实战》读书笔记-第4章 面向切面的Spring</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103541166">https://blog.csdn.net/ThinkWon/article/details/103541166</a></td>
</tr>
<tr>
<td>5</td>
<td>《Spring实战》读书笔记-第5章 构建Spring Web应用程序</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103550083">https://blog.csdn.net/ThinkWon/article/details/103550083</a></td>
</tr>
<tr>
<td>6</td>
<td>《Spring实战》读书笔记-第6章 渲染Web视图</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103559672">https://blog.csdn.net/ThinkWon/article/details/103559672</a></td>
</tr>
<tr>
<td>7</td>
<td>《Spring实战》读书笔记-第7章 Spring MVC的高级技术</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103562467">https://blog.csdn.net/ThinkWon/article/details/103562467</a></td>
</tr>
</tbody>
</table></div><h3><a name="t47"></a><a name="t47"></a><a id="Spring_MVC_770"></a>Spring MVC</h3>
<h3><a name="t48"></a><a name="t48"></a><a id="MyBatis_774"></a>MyBatis</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MyBatis官方文档</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887995">https://blog.csdn.net/ThinkWon/article/details/100887995</a></td>
</tr>
<tr>
<td>2</td>
<td>MyBatis官方文档-简介</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887076">https://blog.csdn.net/ThinkWon/article/details/100887076</a></td>
</tr>
<tr>
<td>3</td>
<td>MyBatis官方文档-入门</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887176">https://blog.csdn.net/ThinkWon/article/details/100887176</a></td>
</tr>
<tr>
<td>4</td>
<td>MyBatis官方文档-XML 配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887349">https://blog.csdn.net/ThinkWon/article/details/100887349</a></td>
</tr>
<tr>
<td>5</td>
<td>MyBatis官方文档-XML 映射文件</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887478">https://blog.csdn.net/ThinkWon/article/details/100887478</a></td>
</tr>
<tr>
<td>6</td>
<td>MyBatis官方文档-动态 SQL</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887702">https://blog.csdn.net/ThinkWon/article/details/100887702</a></td>
</tr>
<tr>
<td>7</td>
<td>MyBatis官方文档-Java API</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887746">https://blog.csdn.net/ThinkWon/article/details/100887746</a></td>
</tr>
<tr>
<td>8</td>
<td>MyBatis官方文档-SQL 语句构建器类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887821">https://blog.csdn.net/ThinkWon/article/details/100887821</a></td>
</tr>
<tr>
<td>9</td>
<td>MyBatis官方文档-日志</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100887951">https://blog.csdn.net/ThinkWon/article/details/100887951</a></td>
</tr>
<tr>
<td>10</td>
<td>MyBatis功能架构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101295025">https://blog.csdn.net/ThinkWon/article/details/101295025</a></td>
</tr>
<tr>
<td>11</td>
<td>MyBatis工作原理</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293609">https://blog.csdn.net/ThinkWon/article/details/101293609</a></td>
</tr>
<tr>
<td>12</td>
<td>MyBatis核心类</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101293216">https://blog.csdn.net/ThinkWon/article/details/101293216</a></td>
</tr>
<tr>
<td>13</td>
<td>MyBatis面试宝典</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101292950">https://blog.csdn.net/ThinkWon/article/details/101292950</a></td>
</tr>
<tr>
<td>14</td>
<td>MyBatis实现一对一，一对多关联查询</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101322334">https://blog.csdn.net/ThinkWon/article/details/101322334</a></td>
</tr>
<tr>
<td>15</td>
<td>MyBatis缓存</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101351212">https://blog.csdn.net/ThinkWon/article/details/101351212</a></td>
</tr>
</tbody>
</table></div><h3><a name="t49"></a><a name="t49"></a><a id="Hibernate_796"></a>Hibernate</h3>
<h3><a name="t50"></a><a name="t50"></a><a id="Shiro_800"></a>Shiro</h3>
<h3><a name="t51"></a><a name="t51"></a><a id="Spring_Security_802"></a>Spring Security</h3>
<h3><a name="t52"></a><a name="t52"></a><a id="Netty_806"></a>Netty</h3>
<h3><a name="t53"></a><a name="t53"></a><a id="_810"></a>搜索引擎</h3>
<h4><a id="LuceneSolr_812"></a>Lucene/Solr</h4>
<h4><a id="Elasticsearch_814"></a>Elasticsearch</h4>
<h4><a id="ELK_816"></a>ELK</h4>
<h2><a name="t54"></a><a name="t54"></a><a id="_826"></a>中间件</h2>
<h3><a name="t55"></a><a name="t55"></a><a id="_828"></a>消息中间件</h3>
<h4><a id="RabbitMQ_830"></a>RabbitMQ</h4>
<h4><a id="RocketMQ_832"></a>RocketMQ</h4>
<h4><a id="ActiveMQ_834"></a>ActiveMQ</h4>
<h4><a id="Kafka_836"></a>Kafka</h4>
<h3><a name="t56"></a><a name="t56"></a><a id="_842"></a>远程过程调用中间件</h3>
<h4><a id="Dubbo_844"></a>Dubbo</h4>
<h3><a name="t57"></a><a name="t57"></a><a id="_850"></a>数据访问中间件</h3>
<p>Sharding JDBC</p>
<p>MyCat</p>
<h3><a name="t58"></a><a name="t58"></a><a id="Web_858"></a>Web应用服务器</h3>
<h4><a id="Tomcat_860"></a>Tomcat</h4>
<p>待整理：Tomcat各组件作用	Tomcat集群	Tomcat面试题</p>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Win10安装Tomcat服务器与配置环境变量</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622905">https://blog.csdn.net/ThinkWon/article/details/102622905</a></td>
</tr>
<tr>
<td>2</td>
<td>Linux(CentOS7)安装Tomcat与设置Tomcat为开机启动项</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102717537">https://blog.csdn.net/ThinkWon/article/details/102717537</a></td>
</tr>
<tr>
<td>3</td>
<td>Tomcat与JDK版本对应关系，Tomcat各版本特性</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622738">https://blog.csdn.net/ThinkWon/article/details/102622738</a></td>
</tr>
<tr>
<td>4</td>
<td>Tomcat目录结构</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102619466">https://blog.csdn.net/ThinkWon/article/details/102619466</a></td>
</tr>
<tr>
<td>5</td>
<td>Tomcat乱码与端口占用的解决方案</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102622824">https://blog.csdn.net/ThinkWon/article/details/102622824</a></td>
</tr>
<tr>
<td>6</td>
<td>Tomcat系统架构与请求处理流程</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102676442">https://blog.csdn.net/ThinkWon/article/details/102676442</a></td>
</tr>
<tr>
<td>7</td>
<td>史上最强Tomcat8性能优化</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102744033">https://blog.csdn.net/ThinkWon/article/details/102744033</a></td>
</tr>
</tbody>
</table></div><h4><a id="Nginx_876"></a>Nginx</h4>
<h3><a name="t59"></a><a name="t59"></a><a id="_880"></a>缓存</h3>
<p>本地缓存</p>
<p>客户端缓存</p>
<p>服务端缓存</p>
<p>	web缓存，Redis，Memcached，Ehcache</p>
<h3><a name="t60"></a><a name="t60"></a><a id="_892"></a>其他</h3>
<h4><a id="Zookeeper_894"></a>Zookeeper</h4>
<h2><a name="t61"></a><a name="t61"></a><a id="_900"></a>微服务与分布式</h2>
<h3><a name="t62"></a><a name="t62"></a><a id="Spring_Boot_902"></a>Spring Boot</h3>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>application.yml与bootstrap.yml的区别</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/100007093">https://blog.csdn.net/ThinkWon/article/details/100007093</a></td>
</tr>
<tr>
<td>2</td>
<td>一分钟了解约定优于配置</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/101703815">https://blog.csdn.net/ThinkWon/article/details/101703815</a></td>
</tr>
</tbody>
</table></div><h3><a name="t63"></a><a name="t63"></a><a id="Spring_Cloud_911"></a>Spring Cloud</h3>


<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Spring Cloud入门-十分钟了解Spring Cloud</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103715146">https://blog.csdn.net/ThinkWon/article/details/103715146</a></td>
</tr>
<tr>
<td>2</td>
<td>Spring Cloud入门-Eureka服务注册与发现(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></td>
</tr>
<tr>
<td>3</td>
<td>Spring Cloud入门-Ribbon服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></td>
</tr>
<tr>
<td>4</td>
<td>Spring Cloud入门-Hystrix断路器(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></td>
</tr>
<tr>
<td>5</td>
<td>Spring Cloud入门-Hystrix Dashboard与Turbine断路器监控(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103734664">https://blog.csdn.net/ThinkWon/article/details/103734664</a></td>
</tr>
<tr>
<td>6</td>
<td>Spring Cloud入门-OpenFeign服务消费者(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></td>
</tr>
<tr>
<td>7</td>
<td>Spring Cloud入门-Zuul服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103738851">https://blog.csdn.net/ThinkWon/article/details/103738851</a></td>
</tr>
<tr>
<td>8</td>
<td>Spring Cloud入门-Config分布式配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103739628">https://blog.csdn.net/ThinkWon/article/details/103739628</a></td>
</tr>
<tr>
<td>9</td>
<td>Spring Cloud入门-Bus消息总线(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753372">https://blog.csdn.net/ThinkWon/article/details/103753372</a></td>
</tr>
<tr>
<td>10</td>
<td>Spring Cloud入门-Sleuth服务链路跟踪(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103753896">https://blog.csdn.net/ThinkWon/article/details/103753896</a></td>
</tr>
<tr>
<td>11</td>
<td>Spring Cloud入门-Consul服务注册发现与配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103756139">https://blog.csdn.net/ThinkWon/article/details/103756139</a></td>
</tr>
<tr>
<td>12</td>
<td>Spring Cloud入门-Gateway服务网关(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></td>
</tr>
<tr>
<td>13</td>
<td>Spring Cloud入门-Admin服务监控中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103758697">https://blog.csdn.net/ThinkWon/article/details/103758697</a></td>
</tr>
<tr>
<td>14</td>
<td>Spring Cloud入门-Oauth2授权的使用(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103761687">https://blog.csdn.net/ThinkWon/article/details/103761687</a></td>
</tr>
<tr>
<td>15</td>
<td>Spring Cloud入门-Oauth2授权之JWT集成(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103763364">https://blog.csdn.net/ThinkWon/article/details/103763364</a></td>
</tr>
<tr>
<td>16</td>
<td>Spring Cloud入门-Oauth2授权之基于JWT完成单点登录(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103766368">https://blog.csdn.net/ThinkWon/article/details/103766368</a></td>
</tr>
<tr>
<td>17</td>
<td>Spring Cloud入门-Nacos实现注册和配置中心(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103769680">https://blog.csdn.net/ThinkWon/article/details/103769680</a></td>
</tr>
<tr>
<td>18</td>
<td>Spring Cloud入门-Sentinel实现服务限流、熔断与降级(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103770879">https://blog.csdn.net/ThinkWon/article/details/103770879</a></td>
</tr>
<tr>
<td>19</td>
<td>Spring Cloud入门-Seata处理分布式事务问题(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786102">https://blog.csdn.net/ThinkWon/article/details/103786102</a></td>
</tr>
<tr>
<td>20</td>
<td>Spring Cloud入门-汇总篇(Hoxton版本)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103786588">https://blog.csdn.net/ThinkWon/article/details/103786588</a></td>
</tr>
</tbody>
</table></div><h3><a name="t64"></a><a name="t64"></a><a id="_938"></a>服务注册发现</h3>
<h3><a name="t65"></a><a name="t65"></a><a id="_940"></a>服务配置</h3>
<h3><a name="t66"></a><a name="t66"></a><a id="_942"></a>负载均衡</h3>
<h3><a name="t67"></a><a name="t67"></a><a id="_944"></a>服务调用</h3>
<h3><a name="t68"></a><a name="t68"></a><a id="_946"></a>服务限流</h3>
<h3><a name="t69"></a><a name="t69"></a><a id="_948"></a>熔断降级</h3>
<h3><a name="t70"></a><a name="t70"></a><a id="_950"></a>网关路由</h3>
<h3><a name="t71"></a><a name="t71"></a><a id="_952"></a>服务权限</h3>
<h3><a name="t72"></a><a name="t72"></a><a id="_954"></a>链路追踪</h3>
<h3><a name="t73"></a><a name="t73"></a><a id="_956"></a>分布式事务</h3>
<h3><a name="t74"></a><a name="t74"></a><a id="_958"></a>分布式缓存</h3>
<h3><a name="t75"></a><a name="t75"></a><a id="_960"></a>分布式会话</h3>
<h3><a name="t76"></a><a name="t76"></a><a id="_962"></a>日志收集</h3>
<h3><a name="t77"></a><a name="t77"></a><a id="_964"></a>服务监控</h3>
<h3><a name="t78"></a><a name="t78"></a><a id="_966"></a>消息驱动</h3>
<h3><a name="t79"></a><a name="t79"></a><a id="_968"></a>数据处理流</h3>
<h3><a name="t80"></a><a name="t80"></a><a id="_970"></a>自动化测试与部署</h3>
<h3><a name="t81"></a><a name="t81"></a><a id="_972"></a>第三方支持</h3>
<h3><a name="t82"></a><a name="t82"></a><a id="Zookeeper_974"></a>分布式协调服务Zookeeper</h3>
<h2><a name="t83"></a><a name="t83"></a><a id="_978"></a>程序员的一些思考</h2>

<div class="table-box"><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>程序员写个人技术博客的价值与意义</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/102980571">https://blog.csdn.net/ThinkWon/article/details/102980571</a></td>
</tr>
<tr>
<td>2</td>
<td>Java知识体系最强总结(2020版)</td>
<td><a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></td>
</tr>
</tbody>
</table></div><h2><a name="t84"></a><a name="t84"></a><a id="_987"></a>项目管理</h2>
<h3><a name="t85"></a><a name="t85"></a><a id="_989"></a>需求调研</h3>
<h3><a name="t86"></a><a name="t86"></a><a id="_991"></a>项目管理</h3>
<h3><a name="t87"></a><a name="t87"></a><a id="_993"></a>代码管理</h3>
<h3><a name="t88"></a><a name="t88"></a><a id="_995"></a>文档管理</h3>
<h3><a name="t89"></a><a name="t89"></a><a id="_997"></a>测试</h3>
<h2><a name="t90"></a><a name="t90"></a><a id="_1003"></a>运维</h2>
<p>常规监控</p>
<p>APM</p>
<p>持续集成(CI/CD)：Jenkins，环境分离</p>
<p>自动化运维：Ansible，puppet，chef</p>
<p>测试：TDD 理论，单元测试，压力测试，全链路压测，A/B 、灰度、蓝绿测试</p>
<p>虚拟化：KVM，Xen，OpenVZ</p>
<p>容器技术：Docker</p>
<p>云技术：OpenStack</p>
<p>DevOps</p>
<p>文档管理</p>
<h2><a name="t91"></a><a name="t91"></a><a id="_1027"></a>操作系统</h2>
<p>计算机操作系统</p>
<p>计算机原理</p>
<p>Linux</p>
<p>CPU</p>
<p>进程，线程，协程</p>
<h2><a name="t92"></a><a name="t92"></a><a id="_1043"></a>推荐书籍</h2>
<h2><a name="t93"></a><a name="t93"></a><a id="_1049"></a>云计算</h2>
<p>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</p>
<h2><a name="t94"></a><a name="t94"></a><a id="_1055"></a>搜索引擎</h2>
<p>Solr、Lucene、Nutch、Elasticsearch</p>
<h2><a name="t95"></a><a name="t95"></a><a id="_1061"></a>权限管理</h2>
<p>Shiro、Spring Security</p>
<h2><a name="t96"></a><a name="t96"></a><a id="_1067"></a>区块链</h2>
<p>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</p>

, firstPicture=https://apenixx-oss.oss-cn-shenzhen.aliyuncs.com/public/blogArticlesCover/2020-02-18/1582007698.png, flag=转载, views=null, appreciation=false, shareStatement=false, commentabled=true, published=true, recommend=true, type=Type(name=null, blogs=[]), tags=[], user=null, comments=[], tagIds=9, description=整理的Java知识体系主要包括基础知识，工具，并发编程，数据结构与算法，数据库，JVM，架构设计，应用框架，中间件，微服务架构，分布式架构，程序员的一些思考，项目管理，运维，权限，推荐书籍，云计算，区块链等，包含了作为一个Java工程师在开发工作学习中需要用到或者可能用到的绝大部分知识
), {}, org.apache.catalina.session.StandardSessionFacade@c90b94]
2020-04-10 22:51:11.090 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:redirect:/admin/blogs
2020-04-10 22:51:11.100 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/admin/blogs
2020-04-10 22:51:11.110 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:51:11.110 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.admin.BlogController.blogs
2020-04-10 22:51:11.110 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 5, sort: updateTime: DESC], BlogQuery(title=null, typeId=null, recommend=false), {message=操作成功, blogQuery=BlogQuery(title=null, typeId=null, recommend=false), org.springframework.validation.BindingResult.blogQuery=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]
2020-04-10 22:51:11.130 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:admin/blogs
2020-04-10 22:51:13.500 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:51:13.500 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:51:13.500 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:51:13.500 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:51:13.520 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:51:14.783 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:51:14.783 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:51:14.784 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:51:14.784 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:51:14.789 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:51:30.200 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/
2020-04-10 22:51:30.200 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:51:30.200 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.index
2020-04-10 22:51:30.200 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 6, sort: updateTime: DESC], {}]
2020-04-10 22:51:30.240 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:index
2020-04-10 22:52:20.325 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:52:20.325 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:52:20.325 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:52:20.325 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:52:20.355 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:52:21.296 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:52:21.297 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:52:21.298 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:52:21.298 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:52:21.304 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:56:53.487 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:56:53.487 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:56:53.487 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:56:53.487 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:56:53.517 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:56:55.076 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:56:55.076 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:56:55.076 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:56:55.076 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:56:55.076 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:56:57.176 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/10
2020-04-10 22:56:57.176 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:56:57.176 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 22:56:57.176 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 10]
2020-04-10 22:56:57.236 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 22:57:00.978 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:57:00.979 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:57:00.979 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:57:00.979 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:57:00.984 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:57:36.802 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:57:36.802 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:57:36.802 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:57:36.802 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:57:36.822 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:57:38.392 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:57:38.392 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:57:38.392 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:57:38.392 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:57:38.402 [ http-nio-8082-exec-1 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:58:12.740 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 22:58:12.740 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:58:12.740 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 22:58:12.740 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:58:12.760 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 22:58:14.013 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 22:58:14.014 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:58:14.015 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 22:58:14.015 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 22:58:14.020 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 22:59:38.316 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/types/-1
2020-04-10 22:59:38.316 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 22:59:38.326 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TypeShowController.types
2020-04-10 22:59:38.326 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, -1]
2020-04-10 22:59:38.376 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:types
2020-04-10 23:00:11.898 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:00:11.898 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:00:11.898 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:00:11.898 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:00:11.928 [ http-nio-8082-exec-4 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:00:12.890 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:00:12.891 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:00:12.893 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:00:12.895 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:00:12.899 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:02:56.079 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:02:56.079 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:02:56.079 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:02:56.079 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:02:56.119 [ http-nio-8082-exec-10 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:02:57.404 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:02:57.405 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:02:57.406 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:02:57.406 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:02:57.412 [ http-nio-8082-exec-9 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:03:10.761 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 23:03:10.761 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:03:10.761 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:03:10.761 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 23:03:10.781 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:03:22.616 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/2
2020-04-10 23:03:22.616 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:03:22.616 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:03:22.616 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[2, {}]
2020-04-10 23:03:22.636 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:03:53.167 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:03:53.167 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:03:53.167 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:03:53.167 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:03:53.177 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:03:54.270 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:03:54.272 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:03:54.273 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:03:54.274 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:03:54.279 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:04:26.876 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/11
2020-04-10 23:04:26.876 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:04:26.886 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:04:26.886 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 23:04:26.896 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:04:27.854 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/11
2020-04-10 23:04:27.855 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:04:27.856 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:04:27.857 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[11, {}]
2020-04-10 23:04:27.860 [ http-nio-8082-exec-6 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:10:19.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:10:19.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:10:19.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:10:19.305 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:10:19.335 [ http-nio-8082-exec-5 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:10:20.565 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:10:20.565 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:10:20.565 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:10:20.565 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:10:20.565 [ http-nio-8082-exec-2 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:11:42.151 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:11:42.151 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:11:42.151 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:11:42.151 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:11:42.181 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:11:43.511 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:11:43.511 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:11:43.511 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:11:43.521 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:11:43.521 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:12:30.147 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:12:30.147 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:12:30.147 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:12:30.147 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:12:30.167 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:12:31.452 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:12:31.462 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:12:31.462 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:12:31.462 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:12:31.462 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
2020-04-10 23:12:34.132 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/tags/9
2020-04-10 23:12:34.132 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:12:34.132 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.TagShowController.types
2020-04-10 23:12:34.142 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[Page request [number: 0, size 3, sort: updateTime: DESC], {}, 9]
2020-04-10 23:12:34.212 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:tags
2020-04-10 23:12:47.302 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/blog/12
2020-04-10 23:12:47.302 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:12:47.312 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.IndexController.blog
2020-04-10 23:12:47.312 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:12:47.332 [ http-nio-8082-exec-8 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog
2020-04-10 23:12:48.313 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 47 ] - URL:http://localhost:8082/comments/12
2020-04-10 23:12:48.314 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 48 ] - IP:0:0:0:0:0:0:0:1
2020-04-10 23:12:48.314 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 49 ] - CLASS_METHOD:com.ljx.blog.controller.CommentController.comments
2020-04-10 23:12:48.314 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 50 ] - ARGS：[12, {}]
2020-04-10 23:12:48.318 [ http-nio-8082-exec-7 ] - [ INFO  ] [ com.ljx.blog.aspect.LogAspect : 70 ] - result:blog :: commentList
